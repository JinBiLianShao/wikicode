{"meta":{"version":1,"warehouse":"4.0.2"},"models":{"Asset":[{"_id":"source/robots.txt","path":"robots.txt","modified":0,"renderable":0},{"_id":"source/assets/0006018857256120_b.jpg","path":"assets/0006018857256120_b.jpg","modified":0,"renderable":0},{"_id":"source/assets/1541383178746.png","path":"assets/1541383178746.png","modified":0,"renderable":0},{"_id":"source/assets/1541383377380.png","path":"assets/1541383377380.png","modified":0,"renderable":0},{"_id":"source/assets/1541383814237.png","path":"assets/1541383814237.png","modified":0,"renderable":0},{"_id":"source/assets/1541383817248.png","path":"assets/1541383817248.png","modified":0,"renderable":0},{"_id":"source/assets/1541384140042.png","path":"assets/1541384140042.png","modified":0,"renderable":0},{"_id":"source/assets/1541384366413.png","path":"assets/1541384366413.png","modified":0,"renderable":0},{"_id":"source/assets/1541384818688.png","path":"assets/1541384818688.png","modified":0,"renderable":0},{"_id":"source/assets/1541673704101.png","path":"assets/1541673704101.png","modified":0,"renderable":0},{"_id":"source/assets/1541676003486.png","path":"assets/1541676003486.png","modified":0,"renderable":0},{"_id":"source/assets/1541748375356.png","path":"assets/1541748375356.png","modified":0,"renderable":0},{"_id":"source/assets/1541905327273.png","path":"assets/1541905327273.png","modified":0,"renderable":0},{"_id":"source/assets/1541905559138.png","path":"assets/1541905559138.png","modified":0,"renderable":0},{"_id":"source/assets/clip_image002-1541662519170.png","path":"assets/clip_image002-1541662519170.png","modified":0,"renderable":0},{"_id":"source/assets/clip_image002-1541662552695.png","path":"assets/clip_image002-1541662552695.png","modified":0,"renderable":0},{"_id":"source/assets/clip_image002-1541662566808.png","path":"assets/clip_image002-1541662566808.png","modified":0,"renderable":0},{"_id":"source/assets/clip_image002-1541668640382.png","path":"assets/clip_image002-1541668640382.png","modified":0,"renderable":0},{"_id":"source/assets/clip_image002-1541668786891.png","path":"assets/clip_image002-1541668786891.png","modified":0,"renderable":0},{"_id":"source/assets/clip_image002-1541671163478.png","path":"assets/clip_image002-1541671163478.png","modified":0,"renderable":0},{"_id":"source/assets/clip_image002.png","path":"assets/clip_image002.png","modified":0,"renderable":0},{"_id":"source/assets/timg.gif","path":"assets/timg.gif","modified":0,"renderable":0},{"_id":"source/assets/三只小猪.jpg","path":"assets/三只小猪.jpg","modified":0,"renderable":0},{"_id":"source/assets/猜数字.jpg","path":"assets/猜数字.jpg","modified":0,"renderable":0},{"_id":"source/img/hander.png","path":"img/hander.png","modified":0,"renderable":0},{"_id":"source/download/cmake/1.10.zip","path":"download/cmake/1.10.zip","modified":0,"renderable":0},{"_id":"themes/Wikitten/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/images/mobile1.png","path":"images/mobile1.png","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/images/mobile2.png","path":"images/mobile2.png","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/images/SitePreview.png","path":"images/SitePreview.png","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/js/insight.js","path":"js/insight.js","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/js/main.js","path":"js/main.js","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/css/images/favicon.ico","path":"css/images/favicon.ico","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/css/images/thumb-default-small.png","path":"css/images/thumb-default-small.png","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/css/images/logo.png","path":"css/images/logo.png","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/fonts/glyphicons-halflings-regular.eot","path":"libs/fonts/glyphicons-halflings-regular.eot","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/fonts/glyphicons-halflings-regular.svg","path":"libs/fonts/glyphicons-halflings-regular.svg","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/fonts/glyphicons-halflings-regular.woff2","path":"libs/fonts/glyphicons-halflings-regular.woff2","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/fonts/glyphicons-halflings-regular.woff","path":"libs/fonts/glyphicons-halflings-regular.woff","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/fonts/glyphicons-halflings-regular.ttf","path":"libs/fonts/glyphicons-halflings-regular.ttf","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/justified-gallery/jquery.justifiedGallery.min.js","path":"libs/justified-gallery/jquery.justifiedGallery.min.js","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/justified-gallery/justifiedGallery.min.css","path":"libs/justified-gallery/justifiedGallery.min.css","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/open-sans/styles.css","path":"libs/open-sans/styles.css","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/source-code-pro/styles.css","path":"libs/source-code-pro/styles.css","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/font-awesome/css/font-awesome.css","path":"libs/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/font-awesome/css/font-awesome.min.css","path":"libs/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/font-awesome/fonts/fontawesome-webfont.svg","path":"libs/font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/font-awesome/fonts/fontawesome-webfont.eot","path":"libs/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/font-awesome/fonts/fontawesome-webfont.ttf","path":"libs/font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/font-awesome/fonts/FontAwesome.otf","path":"libs/font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/font-awesome/fonts/fontawesome-webfont.woff","path":"libs/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/font-awesome/fonts/fontawesome-webfont.woff2","path":"libs/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/lightgallery/css/lg-fb-comment-box.css","path":"libs/lightgallery/css/lg-fb-comment-box.css","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/jquery/2.1.3/jquery.min.js","path":"libs/jquery/2.1.3/jquery.min.js","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/lightgallery/css/lg-fb-comment-box.css.map","path":"libs/lightgallery/css/lg-fb-comment-box.css.map","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/lightgallery/css/lg-transitions.css","path":"libs/lightgallery/css/lg-transitions.css","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/lightgallery/css/lg-fb-comment-box.min.css","path":"libs/lightgallery/css/lg-fb-comment-box.min.css","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/lightgallery/css/lg-transitions.css.map","path":"libs/lightgallery/css/lg-transitions.css.map","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/lightgallery/css/lg-transitions.min.css","path":"libs/lightgallery/css/lg-transitions.min.css","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/lightgallery/css/lightgallery.css","path":"libs/lightgallery/css/lightgallery.css","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/lightgallery/css/lightgallery.min.css","path":"libs/lightgallery/css/lightgallery.min.css","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/lightgallery/css/lightgallery.css.map","path":"libs/lightgallery/css/lightgallery.css.map","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/lightgallery/img/loading.gif","path":"libs/lightgallery/img/loading.gif","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/lightgallery/img/video-play.png","path":"libs/lightgallery/img/video-play.png","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/lightgallery/img/vimeo-play.png","path":"libs/lightgallery/img/vimeo-play.png","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/lightgallery/img/youtube-play.png","path":"libs/lightgallery/img/youtube-play.png","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/lightgallery/fonts/lg.eot","path":"libs/lightgallery/fonts/lg.eot","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/lightgallery/fonts/lg.ttf","path":"libs/lightgallery/fonts/lg.ttf","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/lightgallery/fonts/lg.svg","path":"libs/lightgallery/fonts/lg.svg","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/lightgallery/fonts/lg.woff","path":"libs/lightgallery/fonts/lg.woff","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/lightgallery/js/lg-autoplay.js","path":"libs/lightgallery/js/lg-autoplay.js","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/lightgallery/js/lg-autoplay.min.js","path":"libs/lightgallery/js/lg-autoplay.min.js","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/lightgallery/js/lg-fullscreen.min.js","path":"libs/lightgallery/js/lg-fullscreen.min.js","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/lightgallery/js/lg-fullscreen.js","path":"libs/lightgallery/js/lg-fullscreen.js","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/lightgallery/js/lg-hash.js","path":"libs/lightgallery/js/lg-hash.js","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/lightgallery/js/lg-pager.js","path":"libs/lightgallery/js/lg-pager.js","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/lightgallery/js/lg-hash.min.js","path":"libs/lightgallery/js/lg-hash.min.js","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/lightgallery/js/lg-pager.min.js","path":"libs/lightgallery/js/lg-pager.min.js","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/lightgallery/js/lg-share.js","path":"libs/lightgallery/js/lg-share.js","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/lightgallery/js/lg-share.min.js","path":"libs/lightgallery/js/lg-share.min.js","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/lightgallery/js/lg-thumbnail.js","path":"libs/lightgallery/js/lg-thumbnail.js","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/lightgallery/js/lg-thumbnail.min.js","path":"libs/lightgallery/js/lg-thumbnail.min.js","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/lightgallery/js/lg-video.js","path":"libs/lightgallery/js/lg-video.js","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/lightgallery/js/lg-video.min.js","path":"libs/lightgallery/js/lg-video.min.js","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/lightgallery/js/lg-zoom.js","path":"libs/lightgallery/js/lg-zoom.js","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/lightgallery/js/lg-zoom.min.js","path":"libs/lightgallery/js/lg-zoom.min.js","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/lightgallery/js/lightgallery.js","path":"libs/lightgallery/js/lightgallery.js","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/lightgallery/js/lightgallery.min.js","path":"libs/lightgallery/js/lightgallery.min.js","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/open-sans/fonts/59ZRklaO5bWGqF5A9baEERJtnKITppOI_IvcXXDNrsc.woff2","path":"libs/open-sans/fonts/59ZRklaO5bWGqF5A9baEERJtnKITppOI_IvcXXDNrsc.woff2","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/open-sans/fonts/K88pR3goAWT7BTt32Z01mxJtnKITppOI_IvcXXDNrsc.woff2","path":"libs/open-sans/fonts/K88pR3goAWT7BTt32Z01mxJtnKITppOI_IvcXXDNrsc.woff2","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNShWV49_lSm1NYrwo-zkhivY.woff2","path":"libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNShWV49_lSm1NYrwo-zkhivY.woff2","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/open-sans/fonts/LWCjsQkB6EMdfHrEVqA1KRJtnKITppOI_IvcXXDNrsc.woff2","path":"libs/open-sans/fonts/LWCjsQkB6EMdfHrEVqA1KRJtnKITppOI_IvcXXDNrsc.woff2","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSj0LW-43aMEzIO6XUTLjad8.woff2","path":"libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSj0LW-43aMEzIO6XUTLjad8.woff2","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSq-j2U0lmluP9RWlSytm3ho.woff2","path":"libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSq-j2U0lmluP9RWlSytm3ho.woff2","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSqaRobkAwv3vxw3jMhVENGA.woff2","path":"libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSqaRobkAwv3vxw3jMhVENGA.woff2","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSugdm0LZdjqr5-oayXSOefg.woff2","path":"libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSugdm0LZdjqr5-oayXSOefg.woff2","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSpX5f-9o1vgP2EXwfjgl7AY.woff2","path":"libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSpX5f-9o1vgP2EXwfjgl7AY.woff2","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/open-sans/fonts/RjgO7rYTmqiVp7vzi-Q5URJtnKITppOI_IvcXXDNrsc.woff2","path":"libs/open-sans/fonts/RjgO7rYTmqiVp7vzi-Q5URJtnKITppOI_IvcXXDNrsc.woff2","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSv8zf_FOSsgRmwsS7Aa9k2w.woff2","path":"libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSv8zf_FOSsgRmwsS7Aa9k2w.woff2","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/open-sans/fonts/cJZKeOuBrn4kERxqtaUH3VtXRa8TVwTICgirnJhmVJw.woff2","path":"libs/open-sans/fonts/cJZKeOuBrn4kERxqtaUH3VtXRa8TVwTICgirnJhmVJw.woff2","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/open-sans/fonts/u-WUoqrET9fUeobQW7jkRRJtnKITppOI_IvcXXDNrsc.woff2","path":"libs/open-sans/fonts/u-WUoqrET9fUeobQW7jkRRJtnKITppOI_IvcXXDNrsc.woff2","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBiYE0-AqJ3nfInTTiDXDjU4.woff2","path":"libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBiYE0-AqJ3nfInTTiDXDjU4.woff2","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBjTOQ_MqJVwkKsUn0wKzc2I.woff2","path":"libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBjTOQ_MqJVwkKsUn0wKzc2I.woff2","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBjUj_cnvWIuuBMVgbX098Mw.woff2","path":"libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBjUj_cnvWIuuBMVgbX098Mw.woff2","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBmo_sUJ8uO4YLWRInS22T3Y.woff2","path":"libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBmo_sUJ8uO4YLWRInS22T3Y.woff2","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBkbcKLIaa1LC45dFaAfauRA.woff2","path":"libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBkbcKLIaa1LC45dFaAfauRA.woff2","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBo4P5ICox8Kq3LLUNMylGO4.woff2","path":"libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBo4P5ICox8Kq3LLUNMylGO4.woff2","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBr6up8jxqWt8HVA3mDhkV_0.woff2","path":"libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBr6up8jxqWt8HVA3mDhkV_0.woff2","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/open-sans/fonts/xozscpT2726on7jbcb_pAhJtnKITppOI_IvcXXDNrsc.woff2","path":"libs/open-sans/fonts/xozscpT2726on7jbcb_pAhJtnKITppOI_IvcXXDNrsc.woff2","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasD9V_2ngZ8dMf8fLgjYEouxg.woff2","path":"libs/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasD9V_2ngZ8dMf8fLgjYEouxg.woff2","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasDy2Q8seG17bfDXYR_jUsrzg.woff2","path":"libs/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasDy2Q8seG17bfDXYR_jUsrzg.woff2","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/jquery/plugins/cookie/1.4.1/jquery.cookie.js","path":"libs/jquery/plugins/cookie/1.4.1/jquery.cookie.js","modified":0,"renderable":1}],"Cache":[{"_id":"source/robots.txt","hash":"be8d5ab7132ac74a9375439e438b00b8c91e50b4","modified":1677502115327},{"_id":"source/_discarded/hello-world.md","hash":"3b5719428c38148548db45eb1c2ec4e4dcade16c","modified":1677502115326},{"_id":"source/_discarded/八-结构体.md","hash":"f701cbeda8c19af97f7cd585515198e121291581","modified":1677670380110},{"_id":"source/_discarded/vi使用教程.md","hash":"9b40ff39be79dfd73c41d9a94f9293c3b2f1ce89","modified":1678106873748},{"_id":"source/_discarded/测试-1.md","hash":"a3156c4fc842bbf2df7875138b5dae4849beb7c4","modified":1677667917937},{"_id":"source/_discarded/七-指针.md","hash":"ed412dc8654d6c4744a5180911e540c94d1ed988","modified":1677670192496},{"_id":"source/_discarded/测试.md","hash":"b5505984a1b075b3f75ad868222bca47f1915710","modified":1677667912420},{"_id":"source/_posts/1-什么是-Git.md","hash":"16af3a91edff51f188f59f2c31da00077bfbc954","modified":1677681905605},{"_id":"source/_posts/1-将单个源文件编译为可执行文件.md","hash":"51b16575c4fc1daff97959101bacefc007b63800","modified":1677754819157},{"_id":"source/_posts/10-使用控制流.md","hash":"64553ecf7e4bcb32f177aa23b3d7d5eab44393f1","modified":1677757684118},{"_id":"source/_posts/2-git安装与初体验.md","hash":"c1058bfccad65a06a20161fb1d9d5737b85fc8b7","modified":1677682043420},{"_id":"source/_posts/2-切换生成器.md","hash":"60067350a3decd8a997d586f9ca5261a7261b6bb","modified":1677754801866},{"_id":"source/_posts/3-创建代码仓库.md","hash":"b62dffbbadb76ebf6279e2a62d97791b8f01b740","modified":1677682201147},{"_id":"source/_posts/3-构建和链接静态库和动态库.md","hash":"16a6f013fa7d141927a984f64c020a727917b52e","modified":1677755088538},{"_id":"source/_posts/4-保存更改.md","hash":"54fd1e50750d09c052a220140d294b69ee66cf70","modified":1677682301884},{"_id":"source/_posts/4-用条件句控制编译.md","hash":"b6e6e0a86987c17b03b618d84e3a7be498085150","modified":1677755395381},{"_id":"source/_posts/5-向用户显示选项.md","hash":"3f10689de0581b9fb337bc7aa355f3e1798817be","modified":1677755554066},{"_id":"source/_posts/5-查看仓库状态.md","hash":"aadb8c53504d87c80c86f6674c5bd7540c553d39","modified":1677682404596},{"_id":"source/_posts/6-指定编译器.md","hash":"8e84eee668aab03717a47d9f06c01303eeae85ad","modified":1677756012953},{"_id":"source/_posts/6-检出历史提交.md","hash":"75cfa0b0f8e877a5dcf5f9869d3db0eb8917fea8","modified":1677682498687},{"_id":"source/_posts/7-切换构建类型.md","hash":"324fded4a8c5d96638140e90519a45b377d386a9","modified":1677756192066},{"_id":"source/_posts/8-设置编译器选项.md","hash":"31a3e686c33da7382598c3ac909bdec4fa5bae27","modified":1677756307281},{"_id":"source/_posts/7-回滚错误的修改.md","hash":"e1728111ad25ee3efd0e9c6b8c8191f849caae27","modified":1677682942352},{"_id":"source/_posts/8-重写项目历史.md","hash":"eaec40e9b7fd80198dece679d6d8d718a655c329","modified":1677683212642},{"_id":"source/_posts/9-为语言设定标准.md","hash":"19c1cf5557453c8bba50665bc7e57722e5cf2bcc","modified":1677756413000},{"_id":"source/_posts/C.md","hash":"2aaa84903507543b93065633f7bec672ce8ea984","modified":1677672074428},{"_id":"source/_posts/vi使用教程-1.md","hash":"a242ac248d6c0029edd9a810e2743638390d50e1","modified":1678107131343},{"_id":"source/_posts/七。指针.md","hash":"49054446e4e4c951ede0e2947a4da3a74f923a04","modified":1677672171839},{"_id":"source/_posts/三-运算符.md","hash":"dfccf1f6ecee64e7ddf98f7bf93debb6c81d0395","modified":1677672107407},{"_id":"source/_posts/八-结构体.md","hash":"928a2de6d6df22d431b25cb32341f6bc8feca859","modified":1677672191589},{"_id":"source/_posts/二-数据类型.md","hash":"6bc59bb53a93651d935dc93ca04f9cdf55acfebf","modified":1677672090884},{"_id":"source/_posts/五-数组.md","hash":"37f5bf37c8757c943292e7dc81e6bba4bb95ea31","modified":1677672140596},{"_id":"source/_posts/六-函数.md","hash":"7f0d3a168a3a21f96aca5f5bd9bb477337b2e656","modified":1677672155083},{"_id":"source/_posts/四-程序流程结构.md","hash":"148a1a61f2e8e43d9876cfd3a6453346f797e0a3","modified":1677672124486},{"_id":"source/about/index.md","hash":"3c9b7a6853bfcdd019317c95f2aa33829b269cbc","modified":1677502115326},{"_id":"source/assets/1541383377380.png","hash":"62e6d3b65616b5ec1669ce7fa5e9b734ad7c0f9d","modified":1547694066830},{"_id":"source/assets/1541383814237.png","hash":"369a0171051a4eecceedb1733ace439dcfd259e1","modified":1547694067022},{"_id":"source/assets/1541383817248.png","hash":"369a0171051a4eecceedb1733ace439dcfd259e1","modified":1547694067059},{"_id":"source/assets/1541384140042.png","hash":"81432ec930580556ff09c1d51cccf92af2a902d6","modified":1547694067520},{"_id":"source/assets/1541384366413.png","hash":"c58ba3b296a686b7ec0d511a27e236bab22b57ff","modified":1547694067981},{"_id":"source/assets/1541384818688.png","hash":"ed30eac3df2c24362092538fd1417d2111c5a58a","modified":1547694067794},{"_id":"source/assets/1541673704101.png","hash":"6069d85590d631af68bf52c411185c2b6040a808","modified":1547694068210},{"_id":"source/assets/1541676003486.png","hash":"108c68da0e7dafa4eae3ed82170811e7d5e115c7","modified":1547694068333},{"_id":"source/assets/1541905327273.png","hash":"b079f711bd025a62da5491dc7e3db87e8f2282cb","modified":1547694068979},{"_id":"source/assets/clip_image002-1541662519170.png","hash":"4b6ac0affce65a49312df91ddefc5fa631d74609","modified":1547694069555},{"_id":"source/assets/clip_image002-1541662552695.png","hash":"a019155e19db06c0c67d720fa417558f072451d1","modified":1547694069115},{"_id":"source/assets/clip_image002-1541662566808.png","hash":"a019155e19db06c0c67d720fa417558f072451d1","modified":1547694069200},{"_id":"source/assets/clip_image002-1541668640382.png","hash":"b4027c2629201dfb13942817391ab60b4e92294f","modified":1547694069461},{"_id":"source/assets/clip_image002-1541668786891.png","hash":"b4027c2629201dfb13942817391ab60b4e92294f","modified":1547694069623},{"_id":"source/assets/clip_image002-1541671163478.png","hash":"a20953938a6e0c2890517ecac46180c52a642d4b","modified":1547694069993},{"_id":"source/assets/clip_image002.png","hash":"a33347c144e791ff0e1ad14690c1fa4a781e63b4","modified":1547694069791},{"_id":"source/assets/timg.gif","hash":"f4d8f8e358a4b9e1cbfc399c2fcaa9b2fad1074c","modified":1547694070061},{"_id":"source/assets/猜数字.jpg","hash":"2a981e993ec0b5f8c84b7b27bd36539ae6c22099","modified":1547694070223},{"_id":"source/categories/index.md","hash":"62fe9cd3a09f7971c8bfb84f18ed7863f84cb30a","modified":1677502115327},{"_id":"source/img/hander.png","hash":"e48507378b0fb2f8eee1e53355e76fa746aeffcd","modified":1677505337868},{"_id":"source/tags/index.md","hash":"f913370f50299b9b8b4cfd73fbdd5c07f4950549","modified":1677502115327},{"_id":"source/download/cmake/1.10.zip","hash":"26441e524e4fbc659385e31ff5c8d0826af153dc","modified":1677756960800},{"_id":"source/assets/1541383178746.png","hash":"0f0a342a3d31473ed4291409726d75d91787ed7f","modified":1547694066235},{"_id":"source/assets/三只小猪.jpg","hash":"10c3514481821efaf06249673aca6f8f6a3c5f1e","modified":1547694070401},{"_id":"source/assets/1541748375356.png","hash":"fc3a738fa7bdd27f8095f8bf9d150d343cc6fc88","modified":1547694068606},{"_id":"source/assets/0006018857256120_b.jpg","hash":"f7893e2805d75a742d3e87d7156c081381bec3a8","modified":1547694066290},{"_id":"source/assets/1541905559138.png","hash":"7557ca0de997fd70ba9844ed9db7acafcc86f477","modified":1547694069154},{"_id":"themes/Wikitten/.gitignore","hash":"ea8a4ebacaed7c82d9eed91280d62a2c749e72ba","modified":1677502115328},{"_id":"themes/Wikitten/LICENSE","hash":"aa38bf02ec4328ae8bf08666f9e5af2c3deef955","modified":1677502115328},{"_id":"themes/Wikitten/README_zh-CN.md","hash":"1fca84e615c01c0500c89806c10dc47c38ce699c","modified":1677502115328},{"_id":"themes/Wikitten/README.md","hash":"90c64d7ea5fe3c88044a901f717fa3c0adf39e96","modified":1677502115328},{"_id":"themes/Wikitten/_config.yml","hash":"4be12ed213805fbbf31fee5b11f4a2ce8d9d95b2","modified":1677507763426},{"_id":"themes/Wikitten/_config.yml.example","hash":"cf61d087784d43d0659c52ed9b419e75c664de10","modified":1677502115328},{"_id":"themes/Wikitten/package.json","hash":"d06eced0723a98c50e9d9965d6350f304715b38f","modified":1677502115345},{"_id":"themes/Wikitten/_scaffolds/embed.md","hash":"b355987461542baf759585c752a39b33ed24ad44","modified":1677502115329},{"_id":"themes/Wikitten/_scaffolds/post.md","hash":"19bbcdc84c5facb37609f3cc74e83624c5bd38b0","modified":1677502115329},{"_id":"themes/Wikitten/_source/robots.txt","hash":"be8d5ab7132ac74a9375439e438b00b8c91e50b4","modified":1677502115330},{"_id":"themes/Wikitten/languages/en.yml","hash":"2b888a89957e07f440452a12ef338af979abb4c6","modified":1677502115331},{"_id":"themes/Wikitten/languages/es.yml","hash":"f48b21e020b48a38747a5cd0a2c853d717ad8a7f","modified":1677502115331},{"_id":"themes/Wikitten/languages/id.yml","hash":"2dc3671a92378f4bd499b0dcfb90170bb44c786b","modified":1677502115331},{"_id":"themes/Wikitten/languages/fr.yml","hash":"7b386bf21226433cb7da7989aba07ce33da5b359","modified":1677502115331},{"_id":"themes/Wikitten/languages/ko.yml","hash":"5e6e5b5d20c940cf0be26957f3a3f6a141f338e0","modified":1677502115332},{"_id":"themes/Wikitten/languages/ja.yml","hash":"e13df67ba3666c0d95d60c081e41fb86f6f48663","modified":1677502115331},{"_id":"themes/Wikitten/languages/ru.yml","hash":"7423608a9608766ab5998d6b8d3e8d76b792e30e","modified":1677502115332},{"_id":"themes/Wikitten/languages/pt-BR.yml","hash":"3cf767f94766ac3a93d6efb9ef954e20d16b2b44","modified":1677502115332},{"_id":"themes/Wikitten/languages/tr.yml","hash":"50d94b21e1838db1214f6874f4f81b47c8c521db","modified":1677502115333},{"_id":"themes/Wikitten/languages/zh-CN.yml","hash":"fdce6e6716768cfac9355c4e88a05260efeeae1c","modified":1677502115333},{"_id":"themes/Wikitten/languages/zh-TW.yml","hash":"646a7ef3e85481b013ffb2f4d9f9a8900f092d73","modified":1677502115333},{"_id":"themes/Wikitten/layout/archive.ejs","hash":"163bf8597dc6f70474489dd941a4d98df8ce17a6","modified":1677502115333},{"_id":"themes/Wikitten/layout/categories.ejs","hash":"7be3918bcfb9f04b5213aeda4ad19c952128bee3","modified":1677502115334},{"_id":"themes/Wikitten/layout/category.ejs","hash":"1d407f9176db84e83062c52ad4755aaea9e74401","modified":1677502115334},{"_id":"themes/Wikitten/layout/embed.ejs","hash":"9e4e14d7adf20225e26d3943bdae8d08cf2d0d8b","modified":1677502115339},{"_id":"themes/Wikitten/layout/page.ejs","hash":"50170783bac99946ae8af483920568de9b2d9801","modified":1677502115340},{"_id":"themes/Wikitten/layout/layout.ejs","hash":"75aa8e55eb41cea1f28c8ff0093ca00f9581ef2b","modified":1677502115340},{"_id":"themes/Wikitten/layout/index.ejs","hash":"dfaad9e7ef566044fb83a38d62bc6946d8132d2a","modified":1677502115340},{"_id":"themes/Wikitten/layout/post.ejs","hash":"50170783bac99946ae8af483920568de9b2d9801","modified":1677502115341},{"_id":"themes/Wikitten/layout/tag.ejs","hash":"f6c220d4e5c231028bc71ddc11aec97d7b5a9943","modified":1677502115343},{"_id":"themes/Wikitten/layout/tags.ejs","hash":"2a5b11bdf0dbf7300e11eae34bba00490ed77a0f","modified":1677502115344},{"_id":"themes/Wikitten/scripts/meta.js","hash":"2e5ac0cb9c90c072ca4b33e88f1892e954935ab7","modified":1677502115346},{"_id":"themes/Wikitten/scripts/thumbnail.js","hash":"4a7385e533f3567758bc995a8be5eb3e7839ac9c","modified":1677502115346},{"_id":"themes/Wikitten/_source/categories/index.md","hash":"62fe9cd3a09f7971c8bfb84f18ed7863f84cb30a","modified":1677502115330},{"_id":"themes/Wikitten/_source/tags/index.md","hash":"f913370f50299b9b8b4cfd73fbdd5c07f4950549","modified":1677502115330},{"_id":"themes/Wikitten/_source/about/index.md","hash":"3c9b7a6853bfcdd019317c95f2aa33829b269cbc","modified":1677502115330},{"_id":"themes/Wikitten/layout/comment/counter.ejs","hash":"13f884f07e1ed39fde1a84cd51d45b4d90078b83","modified":1677502115334},{"_id":"themes/Wikitten/layout/comment/disqus.ejs","hash":"b83fd91a30ca2bd62e2d43ae48e0523e0e1994c0","modified":1677502115335},{"_id":"themes/Wikitten/layout/comment/duoshuo.ejs","hash":"adc024b7205e934e64c98a5b912c41117a4425bd","modified":1677502115335},{"_id":"themes/Wikitten/layout/comment/index.ejs","hash":"aad24d2a43549b88eb7c716ba90e3d3003bec5d1","modified":1677502115335},{"_id":"themes/Wikitten/layout/comment/scripts.ejs","hash":"8767c30714baf8011bb191b8a1c652ea114a53f2","modified":1677502115335},{"_id":"themes/Wikitten/layout/comment/youyan.ejs","hash":"b4c49b97b757d01ba0c4e16f9862a2ec05f37b1f","modified":1677502115335},{"_id":"themes/Wikitten/layout/common/article.ejs","hash":"51c352625f8d8acee1f3dd8ef7684c770a44d754","modified":1677502115336},{"_id":"themes/Wikitten/layout/common/footer.ejs","hash":"fbca6250be2aa58b89563cc213edb2af10f4d81d","modified":1677502115336},{"_id":"themes/Wikitten/layout/common/head.ejs","hash":"8c6c754417e2901945dbcc000d76f7f42e7bc14c","modified":1677502115336},{"_id":"themes/Wikitten/layout/common/header.ejs","hash":"c75d5c3e956f70b0b82552f1e3f5749f0229ddd7","modified":1677502115336},{"_id":"themes/Wikitten/layout/common/profile.ejs","hash":"d4dfa98d6481f9cd8f78b7a749276a76241b35d1","modified":1677502115338},{"_id":"themes/Wikitten/layout/common/scripts.ejs","hash":"6c39352254c93f1fbedb4e81d2fdc94f34f54c2e","modified":1677502115338},{"_id":"themes/Wikitten/layout/common/iframe.ejs","hash":"5f1e95febfc1c5230e92d8048a7deb259f3ea835","modified":1677502115336},{"_id":"themes/Wikitten/layout/common/sidebar.ejs","hash":"c2a2fc5dd40fa6349127c0eb3144e55dfa7555cf","modified":1677502115339},{"_id":"themes/Wikitten/layout/common/thumbnail.ejs","hash":"b80d8733a620be64a6f7d73f0b012a986755fd91","modified":1677502115339},{"_id":"themes/Wikitten/layout/plugin/google-analytics.ejs","hash":"760a8f9ee9b81f6eb27a5f2c8c5159b220a88a74","modified":1677502115341},{"_id":"themes/Wikitten/layout/common/timeline.ejs","hash":"a2ba07bd70a82a80df71133dc0cea1248a1e3b3e","modified":1677502115339},{"_id":"themes/Wikitten/layout/plugin/baidu-analytics.ejs","hash":"3218b9f6345aaa537f742ab4781bd27a3f40c378","modified":1677502115340},{"_id":"themes/Wikitten/layout/plugin/mathjax.ejs","hash":"a5578fd682da0f26c85428bfb59043f9f5c682a7","modified":1677502115341},{"_id":"themes/Wikitten/layout/plugin/scripts.ejs","hash":"04edd060448ee5f0fd06550fd5a0ca4ba5f0c91b","modified":1677502115341},{"_id":"themes/Wikitten/layout/search/baidu.ejs","hash":"8cc6f6e601b14d310f20eaf29dc55d6c60ab4ee4","modified":1677502115341},{"_id":"themes/Wikitten/layout/search/index-mobile.ejs","hash":"8e2e28b37a908f60e4953bf9175a7af329d15d40","modified":1677502115342},{"_id":"themes/Wikitten/layout/search/index.ejs","hash":"fb1ac5d6b44dbc96cbef7ecdbb6397c3d4fe3e0f","modified":1677502115342},{"_id":"themes/Wikitten/layout/search/insight.ejs","hash":"21ec59e4534ac2417d6b215b6cfe3825245ad340","modified":1677502115342},{"_id":"themes/Wikitten/layout/search/swiftype.ejs","hash":"cce9c44180d9490f45b30b8f052ac82675a9d66a","modified":1677502115342},{"_id":"themes/Wikitten/layout/share/addtoany.ejs","hash":"b79f714da69c121729a136df0c94c09a85966d44","modified":1677502115342},{"_id":"themes/Wikitten/layout/share/default.ejs","hash":"8532f15f400dbc7c1e89ab26972fc4e404001849","modified":1677502115343},{"_id":"themes/Wikitten/layout/share/bdshare.ejs","hash":"d2a0826700c51d9edaf21fa6cbb047b5127cec8a","modified":1677502115343},{"_id":"themes/Wikitten/layout/share/index.ejs","hash":"52c094140d19e7e2fce57fe43968b2bd86aa4ef0","modified":1677502115343},{"_id":"themes/Wikitten/layout/share/jiathis.ejs","hash":"442abbc0fe5cab4171179257d172150f2a789638","modified":1677502115343},{"_id":"themes/Wikitten/layout/widget/archive.ejs","hash":"b1ba25791f82dd9b31bd4528c6737b0fc5f41477","modified":1677502115344},{"_id":"themes/Wikitten/layout/widget/category.ejs","hash":"09c185211eb23e218082987fb4b10a59fa80b282","modified":1677502115344},{"_id":"themes/Wikitten/layout/widget/links.ejs","hash":"c03770223baf50bc1dd4ec111c93a3c39f89eee7","modified":1677502115344},{"_id":"themes/Wikitten/layout/widget/recent_posts.ejs","hash":"b40f033b1b3a529fa8cedda89f317bb1da13d34e","modified":1677502115345},{"_id":"themes/Wikitten/layout/widget/tag.ejs","hash":"f46903cba7298cb81e68705f4cd6b61d0dfcc191","modified":1677502115345},{"_id":"themes/Wikitten/source/css/_extend.styl","hash":"74dc73324adde45f2635be99e7b44fd8939342e0","modified":1677502115346},{"_id":"themes/Wikitten/source/css/_variables.styl","hash":"db79df80b45d992e0cf2e74f5eefd0e692bdc065","modified":1677502115365},{"_id":"themes/Wikitten/layout/widget/tagcloud.ejs","hash":"f434359629a263c105de62853b0d9b35d3882894","modified":1677502115345},{"_id":"themes/Wikitten/source/css/style.styl","hash":"bf0488a9c73d03779b2956e075430515128606de","modified":1677502115366},{"_id":"themes/Wikitten/source/images/mobile1.png","hash":"db83e3ffbf60ff88443cd3b9d1c23666005e88f0","modified":1677502115368},{"_id":"themes/Wikitten/source/images/mobile2.png","hash":"ba9a7a5464369c4272f6345ef879b5d1c2449de1","modified":1677502115369},{"_id":"themes/Wikitten/source/js/insight.js","hash":"a45f75daff2b42284e21ed4ad1c4518097b8638a","modified":1677502115369},{"_id":"themes/Wikitten/source/js/main.js","hash":"e4d733be10993f168a80a5ce7a9512face802bf3","modified":1677502115369},{"_id":"themes/Wikitten/layout/common/post/banner.ejs","hash":"431b445dfa5dec4b710069c7f1b5fae3f0a907a5","modified":1677502115337},{"_id":"themes/Wikitten/layout/common/post/date.ejs","hash":"fc90dbfc227563029ece7cff13585083b62935bc","modified":1677502115337},{"_id":"themes/Wikitten/layout/common/post/gallery.ejs","hash":"1ccdc66206e84668fa1f0d2440a8ed983aa321fd","modified":1677502115337},{"_id":"themes/Wikitten/layout/common/post/category.ejs","hash":"96f999573eb908f7129a1c09e486d46d630c0a7d","modified":1677502115337},{"_id":"themes/Wikitten/layout/common/post/nav.ejs","hash":"79d15e00ead668bf44a48f4e870ac0cde9dbdee3","modified":1677502115337},{"_id":"themes/Wikitten/layout/common/post/title.ejs","hash":"3620e4dad9c7f9c31efd4ad6cf5872cfb9d418c2","modified":1677502115338},{"_id":"themes/Wikitten/source/css/_highlight/agate.styl","hash":"c01db6c4e7648b217048a8deefeee189688a9290","modified":1677502115347},{"_id":"themes/Wikitten/source/css/_highlight/androidstudio.styl","hash":"b0923fe15d0b5eb24d3c6236cb2fc30ee14a4c56","modified":1677502115347},{"_id":"themes/Wikitten/source/css/_highlight/ascetic.styl","hash":"ca087a3c70998c7ac6b0b42d5cf7a653b8707591","modified":1677502115348},{"_id":"themes/Wikitten/source/css/_highlight/arta.styl","hash":"3bc322455f657aa29f455f91009034af08cdc65c","modified":1677502115347},{"_id":"themes/Wikitten/source/css/_highlight/atelier-cave-dark.styl","hash":"a6b1960d8a3b39d035e06ce92af4f00a259b5c56","modified":1677502115348},{"_id":"themes/Wikitten/source/css/_highlight/atelier-cave-light.styl","hash":"f47de0b9d66617728f68096ed48371dd6bb9e67a","modified":1677502115348},{"_id":"themes/Wikitten/layout/common/post/tag.ejs","hash":"7df16851b35da0ea09f7323bdbfb977198823f4c","modified":1677502115338},{"_id":"themes/Wikitten/source/css/_highlight/atelier-dune-dark.styl","hash":"68021a92fd7d6895426d0cc7f0929aa95633d742","modified":1677502115348},{"_id":"themes/Wikitten/source/css/_highlight/atelier-dune-light.styl","hash":"657fe215931fd06e21b56374df699a94890f7ab4","modified":1677502115348},{"_id":"themes/Wikitten/source/css/_highlight/atelier-estuary-dark.styl","hash":"6c051f034c229c49ffc9a2ec96c032441b0c6586","modified":1677502115349},{"_id":"themes/Wikitten/source/css/_highlight/atelier-estuary-light.styl","hash":"2b416a0567a53aa0fa8898b196ddd44315c1a5f3","modified":1677502115349},{"_id":"themes/Wikitten/source/css/_highlight/atelier-forest-dark.styl","hash":"15559324ee3a5f9bf6724ec9606f6f2e16cdc24d","modified":1677502115349},{"_id":"themes/Wikitten/source/css/_highlight/atelier-forest-light.styl","hash":"8d7c7242974aa2454fa792c5d7a47c5f9632355a","modified":1677502115349},{"_id":"themes/Wikitten/source/css/_highlight/atelier-heath-dark.styl","hash":"bf62cafe316eb874f1f43679957dc3add4fbea34","modified":1677502115350},{"_id":"themes/Wikitten/source/css/_highlight/atelier-heath-light.styl","hash":"c1db353e8613607580d40b12ddc162d029560576","modified":1677502115350},{"_id":"themes/Wikitten/source/css/_highlight/arduino-light.styl","hash":"591962bfc758a521b4cb907750c19a1a2423b4d5","modified":1677502115347},{"_id":"themes/Wikitten/source/css/_highlight/atelier-lakeside-dark.styl","hash":"64ab6ab93a092a890d3d0fdeb23e4b6a2d0f2887","modified":1677502115350},{"_id":"themes/Wikitten/source/css/_highlight/atelier-lakeside-light.styl","hash":"8659eaae6a0c2e00b4b9199803e50adf4ff0128d","modified":1677502115350},{"_id":"themes/Wikitten/source/css/_highlight/atelier-plateau-dark.styl","hash":"8a6c187afcd60152306c003e1a5903e57d9428dd","modified":1677502115351},{"_id":"themes/Wikitten/source/css/_highlight/atelier-plateau-light.styl","hash":"96181544eeadc5b0749229f11607e7c01f81e078","modified":1677502115351},{"_id":"themes/Wikitten/source/css/_highlight/atelier-savanna-dark.styl","hash":"5261a100e84cf34f4752c24dfaddfa05c7be96f7","modified":1677502115351},{"_id":"themes/Wikitten/source/css/_highlight/atelier-savanna-light.styl","hash":"8a5207a0c30262a0bf5e1a41411a306f7a89a7e7","modified":1677502115351},{"_id":"themes/Wikitten/source/css/_highlight/atelier-seaside-dark.styl","hash":"434b7f0bdd5f91bf79d5b4ca46820db4a8e10166","modified":1677502115351},{"_id":"themes/Wikitten/source/css/_highlight/atelier-seaside-light.styl","hash":"08e2df313c272d5c70c93e713639663c168180d0","modified":1677502115351},{"_id":"themes/Wikitten/source/css/_highlight/atelier-sulphurpool-dark.styl","hash":"fa0cccd0f0dc015218cf8c1bba0b53c8c9383135","modified":1677502115351},{"_id":"themes/Wikitten/source/css/_highlight/atelier-sulphurpool-light.styl","hash":"add3d88c9d12567dcfae7a8e49984d119fc72227","modified":1677502115351},{"_id":"themes/Wikitten/source/css/_highlight/brown-papersq.png","hash":"3a1332ede3a75a3d24f60b6ed69035b72da5e182","modified":1677502115352},{"_id":"themes/Wikitten/source/css/_highlight/brown-paper.styl","hash":"d14846542a26b75fd26df5b5df6c5493733f73f6","modified":1677502115351},{"_id":"themes/Wikitten/source/css/_highlight/codepen-embed.styl","hash":"7432ce9edb047b6382d28c82054a7e2a77e476c3","modified":1677502115352},{"_id":"themes/Wikitten/source/css/_highlight/dark.styl","hash":"df4c1dc05567ad0812d0cd3133cb2a2a5fd23c04","modified":1677502115352},{"_id":"themes/Wikitten/source/css/_highlight/color-brewer.styl","hash":"9c4905eab730d0b389e6972e907057577f7e25f1","modified":1677502115352},{"_id":"themes/Wikitten/source/css/_highlight/darkula.styl","hash":"3c943561a885092286ec8db14e9177036bf8d21f","modified":1677502115352},{"_id":"themes/Wikitten/source/css/_highlight/docco.styl","hash":"7bd3389ce16d20488ab336d557056cc703c921c7","modified":1677502115353},{"_id":"themes/Wikitten/source/css/_highlight/far.styl","hash":"5989aea14ccd0153d17ee19b3e125dae06c75f3c","modified":1677502115353},{"_id":"themes/Wikitten/source/css/_highlight/github-gist.styl","hash":"71f4b0fca91a587e6eba15a5306dca963bb8f441","modified":1677502115353},{"_id":"themes/Wikitten/source/css/_highlight/foundation.styl","hash":"28c59a31467c33bd51cbf3b6085782c2a724ff6c","modified":1677502115353},{"_id":"themes/Wikitten/source/css/_highlight/googlecode.styl","hash":"7f5082ae008925a23eb713f160773fe647eb3ff7","modified":1677502115354},{"_id":"themes/Wikitten/source/css/_highlight/grayscale.styl","hash":"c83804abe39faebd80f8f4ff64fbd7137674cb1c","modified":1677502115354},{"_id":"themes/Wikitten/source/css/_highlight/highlightjs.styl","hash":"fd796a58c5d4590cda67c998187933788d45f30a","modified":1677502115354},{"_id":"themes/Wikitten/source/css/_highlight/hopscotch.styl","hash":"7ec8d75a9c9d58f65868ea64289873302d3fad5e","modified":1677502115354},{"_id":"themes/Wikitten/source/css/_highlight/idea.styl","hash":"e284c1760e8da0848f56cd5601d867ceeb0192d7","modified":1677502115355},{"_id":"themes/Wikitten/source/css/_highlight/hybrid.styl","hash":"d3ee1bcefc94f5f87a2b76a689f4c31594501d07","modified":1677502115355},{"_id":"themes/Wikitten/source/css/_highlight/github.styl","hash":"a84eb710b302006120c3e7f8ca18f9e6fbc231c3","modified":1677502115353},{"_id":"themes/Wikitten/source/css/_highlight/index.styl","hash":"36c44375229613a5bb9ee84a8e90214978070439","modified":1677502115355},{"_id":"themes/Wikitten/source/css/_highlight/ir-black.styl","hash":"c59db73998af32ce8419a5d2d335bcc9cfbaae45","modified":1677502115355},{"_id":"themes/Wikitten/source/css/_highlight/kimbie.dark.styl","hash":"3b998c640eeb2c6192fee24bc78b4137de475dd7","modified":1677502115355},{"_id":"themes/Wikitten/source/css/_highlight/kimbie.light.styl","hash":"e901738455ec9a1bddde7b62bbd8595de6033e1e","modified":1677502115356},{"_id":"themes/Wikitten/source/css/_highlight/magula.styl","hash":"ab179306c12a1cf2949482beaca328e379ef034a","modified":1677502115356},{"_id":"themes/Wikitten/source/css/_highlight/mono-blue.styl","hash":"14fb8678739b77f35771b6d63101ddbf1e7a9fbc","modified":1677502115356},{"_id":"themes/Wikitten/source/css/_highlight/monokai-sublime.styl","hash":"32955f699687b5fc2e4072804cb90925912d3c7c","modified":1677502115356},{"_id":"themes/Wikitten/source/css/_highlight/monokai.styl","hash":"8489fc71bedefa8f271808126296fce6381f9e04","modified":1677502115357},{"_id":"themes/Wikitten/source/css/_highlight/obsidian.styl","hash":"8145db8ec349548f09d91d7a05c00c83ff84d146","modified":1677502115357},{"_id":"themes/Wikitten/source/css/_highlight/paraiso-light.styl","hash":"e428e8202b01e83b0f018a96058d806e7f4c76bf","modified":1677502115357},{"_id":"themes/Wikitten/source/css/_highlight/pojoaque.jpg","hash":"c5fe6533b88b21f8d90d3d03954c6b29baa67791","modified":1677502115358},{"_id":"themes/Wikitten/source/css/_highlight/pojoaque.styl","hash":"d9f4b35c9f6115029600a8a023b559013e2b4e75","modified":1677502115358},{"_id":"themes/Wikitten/source/css/_highlight/railscasts.styl","hash":"1ff800d9b6de464fafe591682cc48bf983202758","modified":1677502115358},{"_id":"themes/Wikitten/source/css/_highlight/rainbow.styl","hash":"516c7080d64b12730357358dee2adc42c43c4516","modified":1677502115358},{"_id":"themes/Wikitten/source/css/_highlight/paraiso-dark.styl","hash":"50f1cee8a5b3b165b4184ead0a99dc564b62ef4f","modified":1677502115357},{"_id":"themes/Wikitten/source/css/_highlight/school-book.png","hash":"711ec983c874e093bb89eb77afcbdf6741fa61ee","modified":1677502115358},{"_id":"themes/Wikitten/source/css/_highlight/school-book.styl","hash":"186c37e9c39e65aa291cce3317e35904693598d1","modified":1677502115359},{"_id":"themes/Wikitten/source/css/_highlight/solarized-dark.styl","hash":"577458d1f6c02bc42e312066bf7dd7e427cab057","modified":1677502115359},{"_id":"themes/Wikitten/source/css/_highlight/solarized-light.styl","hash":"bb04944fc06c12ecd7b56ad933dbedde60c2259a","modified":1677502115359},{"_id":"themes/Wikitten/source/css/_highlight/sunburst.styl","hash":"482bbb2bc461b22e9d6ce55f0f84767e1cfae99a","modified":1677502115359},{"_id":"themes/Wikitten/source/css/_highlight/tomorrow-night-bright.styl","hash":"f3cd5ed391d40265e36fcd9f7daced52773fb886","modified":1677502115360},{"_id":"themes/Wikitten/source/css/_highlight/tomorrow-night-blue.styl","hash":"eeafa86697c857c4e9a84ad48c0d56a7154997a3","modified":1677502115359},{"_id":"themes/Wikitten/source/css/_highlight/tomorrow-night-eighties.styl","hash":"1cd947f3d414fa5c1435caea509f27c99f6dc5b3","modified":1677502115360},{"_id":"themes/Wikitten/source/css/_highlight/tomorrow-night.styl","hash":"b2a175caa23631f764b2f6fe2bac9739f5f5e078","modified":1677502115360},{"_id":"themes/Wikitten/source/css/_highlight/tomorrow.styl","hash":"502335f0fac07ed74ca78207bcf3ef8dd2252cf6","modified":1677502115360},{"_id":"themes/Wikitten/source/css/_highlight/vs.styl","hash":"14fbb0c43af440a290280b26968c8a5c0786b27f","modified":1677502115361},{"_id":"themes/Wikitten/source/css/_highlight/xcode.styl","hash":"5fa8999c7f807c1aae29c7a1cdf681678576fb69","modified":1677502115361},{"_id":"themes/Wikitten/source/css/_highlight/zenburn.styl","hash":"6908313d2666d31fc9d8658fd7e8dda3de2bb596","modified":1677502115361},{"_id":"themes/Wikitten/source/css/_util/mixin.styl","hash":"3f8730ec2b1b582ba93b14f0e50a41fbbce52755","modified":1677502115364},{"_id":"themes/Wikitten/source/css/_partial/archive.styl","hash":"3c694e20b227d53dd4611dfa891ff0029b309efa","modified":1677502115362},{"_id":"themes/Wikitten/source/css/_partial/article.styl","hash":"9c192a33ef13a16a71c50e7bd00820faf03df5fe","modified":1677502115362},{"_id":"themes/Wikitten/source/css/_partial/comment.styl","hash":"7fc8a32cf235d0a977d9ff0c49263c0541025222","modified":1677502115362},{"_id":"themes/Wikitten/source/css/_partial/footer.styl","hash":"06c2c9029ebfb16880a203c218657048a83a3e4b","modified":1677502115362},{"_id":"themes/Wikitten/source/css/_partial/header.styl","hash":"60e89add4fbd7935f706528e99f14422965e95ed","modified":1677502115363},{"_id":"themes/Wikitten/source/css/_partial/insight.styl","hash":"ee13429257229edf9578a276208ce61ee5b0245b","modified":1677502115363},{"_id":"themes/Wikitten/source/css/_partial/sidebar.styl","hash":"41c54d305910f250425e4fc8429e363be19c5503","modified":1677502115364},{"_id":"themes/Wikitten/source/css/_partial/profile.styl","hash":"332a8cfe5fc024449618d7583baece2533991379","modified":1677502115363},{"_id":"themes/Wikitten/source/css/_partial/timeline.styl","hash":"2106b731a64278ba42dddf5cad8d9de4c274ea22","modified":1677502115364},{"_id":"themes/Wikitten/source/css/images/favicon.ico","hash":"b37ac89616b9e4c01a35991af59fe6b63e41a48e","modified":1677502115365},{"_id":"themes/Wikitten/source/css/images/thumb-default-small.png","hash":"e8403b97ed9251f9f5207765b0ce796c5000b4ba","modified":1677502115366},{"_id":"themes/Wikitten/source/css/_util/grid.styl","hash":"866fc18d6368c4131b03601a15af7703a9a42b61","modified":1677502115364},{"_id":"themes/Wikitten/source/css/images/logo.png","hash":"8c61e1ec0b7c7200045d7795bac097fce475ef16","modified":1677502115365},{"_id":"themes/Wikitten/source/libs/fonts/glyphicons-halflings-regular.eot","hash":"86b6f62b7853e67d3e635f6512a5a5efc58ea3c3","modified":1677502115387},{"_id":"themes/Wikitten/source/libs/fonts/glyphicons-halflings-regular.woff2","hash":"ca35b697d99cae4d1b60f2d60fcd37771987eb07","modified":1677502115389},{"_id":"themes/Wikitten/source/libs/fonts/glyphicons-halflings-regular.woff","hash":"278e49a86e634da6f2a02f3b47dd9d2a8f26210f","modified":1677502115389},{"_id":"themes/Wikitten/source/libs/fonts/glyphicons-halflings-regular.ttf","hash":"44bc1850f570972267b169ae18f1cb06b611ffa2","modified":1677502115388},{"_id":"themes/Wikitten/source/libs/justified-gallery/jquery.justifiedGallery.min.js","hash":"1c7fd3bd976f671ba396ad4dbbb7157006243bf5","modified":1677502115391},{"_id":"themes/Wikitten/source/libs/justified-gallery/justifiedGallery.min.css","hash":"45fa2fad51cecfc41107dbd4637450b746a7cbc3","modified":1677502115391},{"_id":"themes/Wikitten/source/libs/open-sans/styles.css","hash":"08c8c7eeaf34cb2f8c3312a3ce2e96b58ce2b4c0","modified":1677502115406},{"_id":"themes/Wikitten/source/libs/source-code-pro/styles.css","hash":"6335d719343cca455152ad71a1aaed9868339236","modified":1677502115408},{"_id":"themes/Wikitten/source/libs/font-awesome/css/font-awesome.css","hash":"3655f1fdf1e584c4d8e8d39026093ca306a5a341","modified":1677502115370},{"_id":"themes/Wikitten/source/libs/font-awesome/css/font-awesome.min.css","hash":"88af80502c44cd52ca81ffe7dc7276b7eccb06cf","modified":1677502115370},{"_id":"themes/Wikitten/source/libs/lightgallery/css/lg-fb-comment-box.css","hash":"10c9630e41bb8d6bb7f75a3bfe8cdb33451ed7ba","modified":1677502115392},{"_id":"themes/Wikitten/source/libs/lightgallery/css/lg-fb-comment-box.css.map","hash":"5281d2cfb0ef278940c4860ea9aa7ef86d3dbc8d","modified":1677502115392},{"_id":"themes/Wikitten/source/libs/lightgallery/css/lg-transitions.css","hash":"2866c3f1eda31ed34485ff3511bcfb706d78ac56","modified":1677502115392},{"_id":"themes/Wikitten/source/libs/lightgallery/css/lg-fb-comment-box.min.css","hash":"05830fadb8454f39dcc98c8686eb4d5c24b71fc0","modified":1677502115392},{"_id":"themes/Wikitten/source/libs/lightgallery/css/lg-transitions.min.css","hash":"5c22e2073a4c96d6212c72135391b599e8d1359f","modified":1677502115393},{"_id":"themes/Wikitten/source/libs/lightgallery/css/lightgallery.css","hash":"d26b528a13ee1ef245bdb0aa3db149be3fe9cba6","modified":1677502115394},{"_id":"themes/Wikitten/source/libs/lightgallery/css/lightgallery.min.css","hash":"c9a2e19c932b56f4a2ce30c98910d10b74edb38a","modified":1677502115394},{"_id":"themes/Wikitten/source/libs/lightgallery/css/lg-transitions.css.map","hash":"6ee19f99bca3ecf2fa0d6f07fb5c200db07ddd11","modified":1677502115393},{"_id":"themes/Wikitten/source/libs/lightgallery/img/loading.gif","hash":"607810444094b8619fa4efa6273bc2a7e38dd4b4","modified":1677502115396},{"_id":"themes/Wikitten/source/libs/lightgallery/css/lightgallery.css.map","hash":"91788030e3c7107b6b4bf50a82d4309368850488","modified":1677502115394},{"_id":"themes/Wikitten/source/libs/lightgallery/img/video-play.png","hash":"3ea484cdc04d2e4547f80cbf80001dcf248c94ef","modified":1677502115396},{"_id":"themes/Wikitten/source/libs/lightgallery/img/vimeo-play.png","hash":"6190254f2804904a4a1fa1eb390dfd334e416992","modified":1677502115396},{"_id":"themes/Wikitten/source/libs/lightgallery/img/youtube-play.png","hash":"fea6df9d9d43151f9c9d15f000adb30eb3e26fc4","modified":1677502115396},{"_id":"themes/Wikitten/source/libs/lightgallery/fonts/lg.eot","hash":"54caf05a81e33d7bf04f2e420736ce6f1de5f936","modified":1677502115394},{"_id":"themes/Wikitten/source/libs/lightgallery/fonts/lg.ttf","hash":"f6421c0c397311ae09f9257aa58bcd5e9720f493","modified":1677502115395},{"_id":"themes/Wikitten/source/libs/lightgallery/fonts/lg.woff","hash":"3048de344dd5cad4624e0127e58eaae4b576f574","modified":1677502115395},{"_id":"themes/Wikitten/source/libs/lightgallery/fonts/lg.svg","hash":"3480f00d284c812d623ed16a9e0ead3fb964c72e","modified":1677502115395},{"_id":"themes/Wikitten/source/libs/lightgallery/js/lg-autoplay.js","hash":"ba52bd55c0ab647e277c42b0e48a0ac25cbd3099","modified":1677502115397},{"_id":"themes/Wikitten/source/libs/lightgallery/js/lg-autoplay.min.js","hash":"44203a1490749aff6aba9784868b6c888d3fb86e","modified":1677502115397},{"_id":"themes/Wikitten/source/libs/lightgallery/js/lg-fullscreen.min.js","hash":"a5c468d260e3a8e68c9026aa2b5f31ce1860b8bf","modified":1677502115397},{"_id":"themes/Wikitten/source/libs/lightgallery/js/lg-fullscreen.js","hash":"6369e9704550f4207fa798dc6018da1d259fd318","modified":1677502115397},{"_id":"themes/Wikitten/source/libs/lightgallery/js/lg-hash.js","hash":"8a026dc31f912cbd3b8a110bb87984b372661f65","modified":1677502115397},{"_id":"themes/Wikitten/source/libs/lightgallery/js/lg-pager.js","hash":"562f883ba3a5e8ea570fd5d0c40afe527938c026","modified":1677502115398},{"_id":"themes/Wikitten/source/libs/lightgallery/js/lg-hash.min.js","hash":"fbdbcb46ae9fd668ba5e4dce5635c040359e3359","modified":1677502115398},{"_id":"themes/Wikitten/source/libs/lightgallery/js/lg-pager.min.js","hash":"ec662f97ed5a15c2bd8cf87d5c93cd9a6b4df07a","modified":1677502115398},{"_id":"themes/Wikitten/source/libs/lightgallery/js/lg-share.js","hash":"b000585441e9bff2f5b7c538d623b698d48049a6","modified":1677502115399},{"_id":"themes/Wikitten/source/libs/lightgallery/js/lg-share.min.js","hash":"afe725882964c87a148ac6ab54955cb0da0974c4","modified":1677502115399},{"_id":"themes/Wikitten/source/libs/lightgallery/js/lg-thumbnail.js","hash":"99fe3cc63161f0d678360a939fbd54c5d1c11eeb","modified":1677502115399},{"_id":"themes/Wikitten/source/libs/lightgallery/js/lg-thumbnail.min.js","hash":"e570807e2786a0acb393c1195c820a660312fffe","modified":1677502115399},{"_id":"themes/Wikitten/source/libs/lightgallery/js/lg-video.js","hash":"11c8509a3e398cb8c2a32ff559ccdda6d9d71740","modified":1677502115399},{"_id":"themes/Wikitten/source/libs/lightgallery/js/lg-video.min.js","hash":"050e7684bfbb133bed5375938fe0021f1fa88f7f","modified":1677502115400},{"_id":"themes/Wikitten/source/libs/lightgallery/js/lg-zoom.js","hash":"69a127964e508699f5f13467dd1b58fbf04bcca9","modified":1677502115401},{"_id":"themes/Wikitten/source/libs/lightgallery/js/lg-zoom.min.js","hash":"8daabc26ceadc43741904b99db7e01bfababbd04","modified":1677502115401},{"_id":"themes/Wikitten/source/libs/lightgallery/js/lightgallery.js","hash":"6d424527be45ff4deedd198e195fdeb74f1c6567","modified":1677502115401},{"_id":"themes/Wikitten/source/libs/lightgallery/js/lightgallery.min.js","hash":"dc9c6447d3574fcba3868c35bb48e0bed9be6b7e","modified":1677502115401},{"_id":"themes/Wikitten/source/libs/open-sans/fonts/59ZRklaO5bWGqF5A9baEERJtnKITppOI_IvcXXDNrsc.woff2","hash":"c4248ea800bd5608344ce163f5658b57e7ef9410","modified":1677502115402},{"_id":"themes/Wikitten/source/libs/open-sans/fonts/K88pR3goAWT7BTt32Z01mxJtnKITppOI_IvcXXDNrsc.woff2","hash":"e0350190d720a8fec0557ab47b318ec4e4486448","modified":1677502115402},{"_id":"themes/Wikitten/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNShWV49_lSm1NYrwo-zkhivY.woff2","hash":"22413bb8bfb78608c1e25aa1ed5c1f38557df79f","modified":1677502115403},{"_id":"themes/Wikitten/source/libs/open-sans/fonts/LWCjsQkB6EMdfHrEVqA1KRJtnKITppOI_IvcXXDNrsc.woff2","hash":"2c5b039b57f62625e88226a938679ec937431ad1","modified":1677502115402},{"_id":"themes/Wikitten/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSj0LW-43aMEzIO6XUTLjad8.woff2","hash":"63eb74ef040aade256f2274a7f31a914edddb0ea","modified":1677502115403},{"_id":"themes/Wikitten/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSq-j2U0lmluP9RWlSytm3ho.woff2","hash":"4dc6d7174ea6d89f4c45e43e1bfc3e03d8ffebaf","modified":1677502115404},{"_id":"themes/Wikitten/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSqaRobkAwv3vxw3jMhVENGA.woff2","hash":"415eee05976ab8b2471602a5ddb78a6c58fc21aa","modified":1677502115404},{"_id":"themes/Wikitten/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSugdm0LZdjqr5-oayXSOefg.woff2","hash":"a0b0c389cf46d63c850e61fed572485ff0b68183","modified":1677502115404},{"_id":"themes/Wikitten/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSpX5f-9o1vgP2EXwfjgl7AY.woff2","hash":"328a22fe3eec71ad9e5ece4d67dd62e79dab6b7f","modified":1677502115403},{"_id":"themes/Wikitten/source/libs/open-sans/fonts/RjgO7rYTmqiVp7vzi-Q5URJtnKITppOI_IvcXXDNrsc.woff2","hash":"be201d32a9aa5d186723ebb3c538be691aa8c53a","modified":1677502115404},{"_id":"themes/Wikitten/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSv8zf_FOSsgRmwsS7Aa9k2w.woff2","hash":"c5f29fed6632efe0aa83318369f0d8c4061b775b","modified":1677502115404},{"_id":"themes/Wikitten/source/libs/open-sans/fonts/cJZKeOuBrn4kERxqtaUH3VtXRa8TVwTICgirnJhmVJw.woff2","hash":"afc44700053c9a28f9ab26f6aec4862ac1d0795d","modified":1677502115405},{"_id":"themes/Wikitten/source/libs/open-sans/fonts/u-WUoqrET9fUeobQW7jkRRJtnKITppOI_IvcXXDNrsc.woff2","hash":"113978181dcac77baecef6115a9121d8f6e4fc3a","modified":1677502115405},{"_id":"themes/Wikitten/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBiYE0-AqJ3nfInTTiDXDjU4.woff2","hash":"5067c81462c15422853c94d21a1726865a61634f","modified":1677502115405},{"_id":"themes/Wikitten/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBjTOQ_MqJVwkKsUn0wKzc2I.woff2","hash":"b366f2fda2e524eb5ef50058eefff249a3b96e6c","modified":1677502115405},{"_id":"themes/Wikitten/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBjUj_cnvWIuuBMVgbX098Mw.woff2","hash":"d22904914469be735490e3c8cb093c7862896dd5","modified":1677502115405},{"_id":"themes/Wikitten/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBmo_sUJ8uO4YLWRInS22T3Y.woff2","hash":"b85efde42fa3a03c32b1d31c6cd74c622fc7916c","modified":1677502115405},{"_id":"themes/Wikitten/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBkbcKLIaa1LC45dFaAfauRA.woff2","hash":"ae80fb3cd16339aa7b5da280ab53975523dcaac2","modified":1677502115405},{"_id":"themes/Wikitten/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBo4P5ICox8Kq3LLUNMylGO4.woff2","hash":"e75607ba1417181397c700775b84303d5a2957b9","modified":1677502115406},{"_id":"themes/Wikitten/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBr6up8jxqWt8HVA3mDhkV_0.woff2","hash":"d0b40a7848703556c6631f24e961a98ca5829255","modified":1677502115406},{"_id":"themes/Wikitten/source/libs/open-sans/fonts/xozscpT2726on7jbcb_pAhJtnKITppOI_IvcXXDNrsc.woff2","hash":"be365eca44760ce3fc9b377c43d4634958479c69","modified":1677502115406},{"_id":"themes/Wikitten/source/libs/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasD9V_2ngZ8dMf8fLgjYEouxg.woff2","hash":"942addaec4d3a60af33947a84a3d85f926015947","modified":1677502115407},{"_id":"themes/Wikitten/source/libs/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasDy2Q8seG17bfDXYR_jUsrzg.woff2","hash":"b0e0bb5ef78db8b15d430d0b9be9d4329289a310","modified":1677502115407},{"_id":"themes/Wikitten/source/libs/jquery/plugins/cookie/1.4.1/jquery.cookie.js","hash":"cf68d8abf7d192a3044cb82ec31c2106e4a2b5bb","modified":1677502115391},{"_id":"themes/Wikitten/source/libs/fonts/glyphicons-halflings-regular.svg","hash":"4dcf0ab896f5417047f881de91bad10dcbda48c6","modified":1677502115388},{"_id":"themes/Wikitten/source/libs/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1677502115386},{"_id":"themes/Wikitten/source/libs/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1677502115387},{"_id":"themes/Wikitten/source/libs/jquery/2.1.3/jquery.min.js","hash":"17a740d68a1c330876c198b6a4d9319f379f3af2","modified":1677502115390},{"_id":"themes/Wikitten/package-lock.json","hash":"338a2f902c29c6c1d3817b2fe0e8c7c06c965a01","modified":1677502717985},{"_id":"themes/Wikitten/source/images/SitePreview.png","hash":"c37c32696828492d6a8a4dfb0f84af98f5fb1306","modified":1677502115367},{"_id":"themes/Wikitten/source/libs/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1677502115384},{"_id":"themes/Wikitten/source/libs/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1677502115386},{"_id":"themes/Wikitten/source/libs/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1677502115371},{"_id":"themes/Wikitten/source/libs/font-awesome/fonts/fontawesome-webfont.svg","hash":"b5483b11f8ba213e733b5b8af9927a04fec996f6","modified":1677502115385},{"_id":"public/assets/0006018857256120_b.jpg","hash":"a2fcb1949564cd9f1dc7926678528d632303fa58","modified":1685782002978},{"_id":"public/assets/1541383178746.png","hash":"23dec9436aafef7eabfdb0fae87d6d79fc588d19","modified":1685782002978},{"_id":"public/assets/1541383377380.png","hash":"2f8a2acad0ce2d9eab0bb92193c0945d70936fef","modified":1685782002978},{"_id":"public/assets/1541383814237.png","hash":"28531a5dfa58e7f8c8b38667ce8f09f16d86c6f0","modified":1685782002978},{"_id":"public/assets/1541383817248.png","hash":"28531a5dfa58e7f8c8b38667ce8f09f16d86c6f0","modified":1685782002978},{"_id":"public/assets/1541384140042.png","hash":"65da2040145798c8b6541525dee620c7d08b925f","modified":1685782002978},{"_id":"public/assets/1541384366413.png","hash":"9a3b5f58dd25b3c73f5fe12385b034ce47518182","modified":1685782002978},{"_id":"public/assets/1541384818688.png","hash":"77c4bd968fe6283818d2d5778350e2f1556e9ddf","modified":1685782002978},{"_id":"public/assets/1541673704101.png","hash":"48bc0b0b31599a89d3815d5ebc51ada652437866","modified":1685782002978},{"_id":"public/assets/1541676003486.png","hash":"9a63136b0df00abc3a76ac8fc7cc7b2f337f1510","modified":1685782002978},{"_id":"public/assets/1541748375356.png","hash":"5cbb9b6ea1f46c695f50d627d5b354a82a3edf45","modified":1685782002978},{"_id":"public/assets/1541905327273.png","hash":"38b2ccdbcb3a6b34fb4cb13d6af401e50422f9d7","modified":1685782002978},{"_id":"public/assets/1541905559138.png","hash":"14811a168b1199c055a529035a15cbf85cb68ec4","modified":1685782002978},{"_id":"public/assets/clip_image002-1541662519170.png","hash":"9b5e5088610927cf44b644c3fe353a92675416aa","modified":1685782002978},{"_id":"public/assets/clip_image002-1541662552695.png","hash":"b96ad1f148df271fea810a64e120236ebffb3dbf","modified":1685782002978},{"_id":"public/assets/clip_image002-1541662566808.png","hash":"b96ad1f148df271fea810a64e120236ebffb3dbf","modified":1685782002978},{"_id":"public/assets/clip_image002-1541668640382.png","hash":"981cdd8fa532fcb674917e3a4196652be7e67579","modified":1685782002978},{"_id":"public/assets/clip_image002-1541668786891.png","hash":"981cdd8fa532fcb674917e3a4196652be7e67579","modified":1685782002978},{"_id":"public/assets/clip_image002-1541671163478.png","hash":"92307ca63b71b87661d460d5edd7f388b0cc1e8c","modified":1685782002978},{"_id":"public/assets/clip_image002.png","hash":"e4bc75822632630be305fbfb562ae34cb70bc60b","modified":1685782002978},{"_id":"public/assets/猜数字.jpg","hash":"cf462e7c17cdeb6d580674a6800952184a0d09d7","modified":1685782002978},{"_id":"public/assets/三只小猪.jpg","hash":"0776e718e2f97ac495a385f6be4b8b99afe9034c","modified":1685782002978},{"_id":"public/img/hander.png","hash":"d87dfe7493e75c5ead1b3a9fbbf49d5e12e9a61d","modified":1685782002978},{"_id":"public/images/mobile1.png","hash":"25fa19d984b497fac8ceb53cb88b84e711946b74","modified":1685782002978},{"_id":"public/images/mobile2.png","hash":"6ce6c4a5e0b13bf59e6625b4cc715879f8978f60","modified":1685782002978},{"_id":"public/images/SitePreview.png","hash":"446c3a44cdc3be513d0a6ffe0e6d8e0b788e0b13","modified":1685782002978},{"_id":"public/css/images/thumb-default-small.png","hash":"e63874a08229a3031c407915ca448ca9d3ab234f","modified":1685782002978},{"_id":"public/libs/fonts/glyphicons-halflings-regular.svg","hash":"afa0cf6a692138f5deaea0b93890b151bb76f2c1","modified":1685782002978},{"_id":"public/libs/font-awesome/fonts/fontawesome-webfont.svg","hash":"c975f33dbfd282987b3a97ef2fdf2e96fc89b007","modified":1685782002978},{"_id":"public/libs/lightgallery/img/loading.gif","hash":"66532a70bf3f0b148846ea98ae20f0577a7cf99a","modified":1685782002978},{"_id":"public/libs/lightgallery/fonts/lg.svg","hash":"cc22b499da769e11621cd29e4d0230fd371dac5e","modified":1685782002978},{"_id":"public/atom.xml","hash":"6c50e99ff721ee03212f7b5e6ce4abc00e2d7062","modified":1685782002978},{"_id":"public/content.json","hash":"cfe1134efbd892e063fe4498872c97da2ed45aab","modified":1685782002978},{"_id":"public/sitemap.xml","hash":"6a4a3bd1c653478d94d578749820f8ec5ae8e27d","modified":1685782002978},{"_id":"public/about/index.html","hash":"31199cb712a59866b00a8182e045bf16fcffb48a","modified":1685782002978},{"_id":"public/tags/vi/index.html","hash":"538cbb3331e945919db7718148494cdb26006c0f","modified":1685782002978},{"_id":"public/tags/index.html","hash":"334feb7bceb4c54eebfcd623d588c7802210598d","modified":1685782002978},{"_id":"public/categories/index.html","hash":"bb2c5ec4e7646b064620701859d88384ab705465","modified":1685782002978},{"_id":"public/wiki/vi使用教程-1/index.html","hash":"7fdd87ecfb610280a69a7b91fa08e59fd042fe25","modified":1685782002978},{"_id":"public/wiki/10-使用控制流/index.html","hash":"be4ae92e2794800bc85ee054c1f49531421d6f1e","modified":1685782002978},{"_id":"public/wiki/9-为语言设定标准/index.html","hash":"2b5ed2a5d860a6f0b13b5c25d0f12690c0cce2d0","modified":1685782002978},{"_id":"public/wiki/8-设置编译器选项/index.html","hash":"91413f7e7e61a712b9a55edd0ea6eddb30cc81ea","modified":1685782002978},{"_id":"public/wiki/7-切换构建类型/index.html","hash":"5b98f8475eea317c4f801c2de87ea780d63417b2","modified":1685782002978},{"_id":"public/wiki/6-指定编译器/index.html","hash":"a076c196d0d9c65cf74c1e0dabd195d1da05e79a","modified":1685782002978},{"_id":"public/wiki/5-向用户显示选项/index.html","hash":"1d657226ff7739241bde4ba1c29f10267b95fb8c","modified":1685782002978},{"_id":"public/wiki/4-用条件句控制编译/index.html","hash":"a2e149e8c53b19b863193317964817ff38c38dab","modified":1685782002978},{"_id":"public/wiki/3-构建和链接静态库和动态库/index.html","hash":"ce5637baf6d192764bc5aea70d3925f3becf2ba2","modified":1685782002978},{"_id":"public/wiki/2-切换生成器/index.html","hash":"79742398d8b2907650c860ff69804837ea4e46ec","modified":1685782002978},{"_id":"public/wiki/1-将单个源文件编译为可执行文件/index.html","hash":"70fe8b55fb646ec56a554b458c6f5960b81531bb","modified":1685782002978},{"_id":"public/wiki/8-重写项目历史/index.html","hash":"c846e472c6d04270e63437bbf9b3161753e5353f","modified":1685782002978},{"_id":"public/wiki/7-回滚错误的修改/index.html","hash":"c3c63b82c02a9f9b5bd1719179f45e8df6a69562","modified":1685782002978},{"_id":"public/wiki/6-检出历史提交/index.html","hash":"8fb82b81e14d1a2fc6959d30130f38270cfcbc05","modified":1685782002978},{"_id":"public/wiki/5-查看仓库状态/index.html","hash":"5ed2a8bac1330eb908383ac82efa3c270327cd91","modified":1685782002978},{"_id":"public/wiki/4-保存更改/index.html","hash":"41d18fd67871912a605a47e93521be61ee27759c","modified":1685782002978},{"_id":"public/wiki/3-创建代码仓库/index.html","hash":"27908c62f221cb1f40ffd33c7703f7f655dbd967","modified":1685782002978},{"_id":"public/wiki/2-git安装与初体验/index.html","hash":"a9d23e4b7697f391a94c1f4813e769778f083fa3","modified":1685782002978},{"_id":"public/wiki/1-什么是-Git/index.html","hash":"bf4546beaabf6e7587e074cf52dd57c535501c0d","modified":1685782002978},{"_id":"public/wiki/八-结构体/index.html","hash":"2321d119f1eac0b32be9832340a32f3ec80949ee","modified":1685782002978},{"_id":"public/wiki/七。指针/index.html","hash":"abcf26332d78825164712a9f0ad272dc27d39254","modified":1685782002978},{"_id":"public/wiki/六-函数/index.html","hash":"e8c571a9741bfa48054e48a8942b9288f4e70caa","modified":1685782002978},{"_id":"public/wiki/五-数组/index.html","hash":"afcc2219afcc34af7cfa50de6e6b5d5d30040859","modified":1685782002978},{"_id":"public/wiki/四-程序流程结构/index.html","hash":"96d19535d63fe514ef5f41132453daa143f1575e","modified":1685782002978},{"_id":"public/wiki/三-运算符/index.html","hash":"d1e1ea72751b6dce5007bc0bc1b3a8f4f58a31f0","modified":1685782002978},{"_id":"public/wiki/二-数据类型/index.html","hash":"1cf759229b903659eeab61e987b94cc7857d0144","modified":1685782002978},{"_id":"public/wiki/C/index.html","hash":"06c44c7a964547e457e93f46519b5bced50e73b0","modified":1685782002978},{"_id":"public/categories//index.html","hash":"d384e8ccd17b88c39a698530bdc3285667d510dc","modified":1685782002978},{"_id":"public/categories//page/2/index.html","hash":"77c518f7849ce48436b49d5317daba3e0a728c68","modified":1685782002978},{"_id":"public/categories//page/3/index.html","hash":"57a035f6a8e11ae8a48f7953691f35a577f4ad7c","modified":1685782002978},{"_id":"public/categories//cmake/index.html","hash":"b015659b0e69edb699893be77958e6325912ceba","modified":1685782002978},{"_id":"public/categories//git/index.html","hash":"a88e78a91baebc98e829efe4c5b7bb13f6cc93d9","modified":1685782002978},{"_id":"public/categories//cmake/第一章：从简单的可执行文件到库/index.html","hash":"39a3e84c2b3623d019766cb493a22cf83a615164","modified":1685782002978},{"_id":"public/categories//C/index.html","hash":"68547e6691e99840a45e2822b6b31d72cae7701d","modified":1685782002978},{"_id":"public/categories//常用工具/index.html","hash":"83eeaf3072532beb257aca819cf10c935df26199","modified":1685782002978},{"_id":"public/categories//C/C-基础教程/index.html","hash":"e4cf9b4de527aa4a3e1c29d5050abcd29190d553","modified":1685782002978},{"_id":"public/archives/index.html","hash":"89defaebd1616e60e3a85700b4f540d4e854bf91","modified":1685782002978},{"_id":"public/archives/page/2/index.html","hash":"a98a5c96c8dbcfa96d2c24f6709a6bdf015ff98a","modified":1685782002978},{"_id":"public/archives/page/3/index.html","hash":"ebd6c52ebb60a852a1a0a6d19bf7cf161576328e","modified":1685782002978},{"_id":"public/archives/2023/index.html","hash":"51748af3c522b24611a4e326cf4c6bc836e4590c","modified":1685782002978},{"_id":"public/archives/2023/page/2/index.html","hash":"451feb04d03ed2f9bf15c223f8099bb4342c308f","modified":1685782002978},{"_id":"public/archives/2023/page/3/index.html","hash":"7a9aec477a1b258dfce90a07b912860614210914","modified":1685782002978},{"_id":"public/archives/2023/03/index.html","hash":"335b304e25b686ad25994cff8d91e7d130002d12","modified":1685782002978},{"_id":"public/archives/2023/02/index.html","hash":"0d5e470ccd5de2adfeb12751b91db6490b306b35","modified":1685782002978},{"_id":"public/archives/2023/03/page/2/index.html","hash":"0911ad6b503da70f67a6e76a24585c8d9a345987","modified":1685782002978},{"_id":"public/index.html","hash":"9f6317a2501d3107e62a3617737573ae4def0127","modified":1685782002978},{"_id":"public/archives/2023/03/page/3/index.html","hash":"980f683748efcb2cb2c74f6a6d72652924192341","modified":1685782002978},{"_id":"public/page/2/index.html","hash":"757ed2096f6c800a3cb9559a5297960387b072ba","modified":1685782002978},{"_id":"public/page/3/index.html","hash":"493c5b0567467cc7322847d37fc1103ecc897978","modified":1685782002978},{"_id":"public/tags/cmake/index.html","hash":"18e66cd0462386b32329b421a02d3755659afee4","modified":1685782002978},{"_id":"public/tags/git/index.html","hash":"828c80db68381b8d40ba0cad8c5771c7ac75f3c0","modified":1685782002978},{"_id":"public/tags/c/index.html","hash":"16c389d1f5644ca43475074207556589303a5447","modified":1685782002978},{"_id":"public/tags/变量常量标识符/index.html","hash":"b5d8d755fbe91f6911571923b0f73f9d3cc7e43a","modified":1685782002978},{"_id":"public/tags/指针/index.html","hash":"dc2682bbd1886304c4024c328d6138e5f0c5db65","modified":1685782002978},{"_id":"public/tags/运算符/index.html","hash":"54bff7373495d9fbbd2e58e4d8877a4920887792","modified":1685782002978},{"_id":"public/tags/数据类型/index.html","hash":"9be149b55ebeb45f6e6da7c9af6a9fc01399fba5","modified":1685782002978},{"_id":"public/tags/数组/index.html","hash":"4ed42ddf3bcb4f374b724d8d2527c2c57f9dda09","modified":1685782002978},{"_id":"public/tags/结构体/index.html","hash":"502641573c80cc84b218e72c7a2b77e654f801e6","modified":1685782002978},{"_id":"public/tags/函数/index.html","hash":"7a73cb5f2e23fa10a1048fe0d8f22050ab8b8a58","modified":1685782002978},{"_id":"public/tags/流程结构/index.html","hash":"e6f612e941044236e9d3c4de7e581354d5136998","modified":1685782002978},{"_id":"public/robots.txt","hash":"be8d5ab7132ac74a9375439e438b00b8c91e50b4","modified":1685782002978},{"_id":"public/assets/timg.gif","hash":"f4d8f8e358a4b9e1cbfc399c2fcaa9b2fad1074c","modified":1685782002978},{"_id":"public/download/cmake/1.10.zip","hash":"26441e524e4fbc659385e31ff5c8d0826af153dc","modified":1685782002978},{"_id":"public/css/images/favicon.ico","hash":"b37ac89616b9e4c01a35991af59fe6b63e41a48e","modified":1685782002978},{"_id":"public/css/images/logo.png","hash":"8c61e1ec0b7c7200045d7795bac097fce475ef16","modified":1685782002978},{"_id":"public/libs/fonts/glyphicons-halflings-regular.eot","hash":"86b6f62b7853e67d3e635f6512a5a5efc58ea3c3","modified":1685782002978},{"_id":"public/libs/fonts/glyphicons-halflings-regular.woff2","hash":"ca35b697d99cae4d1b60f2d60fcd37771987eb07","modified":1685782002978},{"_id":"public/libs/fonts/glyphicons-halflings-regular.woff","hash":"278e49a86e634da6f2a02f3b47dd9d2a8f26210f","modified":1685782002978},{"_id":"public/libs/fonts/glyphicons-halflings-regular.ttf","hash":"44bc1850f570972267b169ae18f1cb06b611ffa2","modified":1685782002978},{"_id":"public/libs/lightgallery/css/lg-fb-comment-box.css.map","hash":"5281d2cfb0ef278940c4860ea9aa7ef86d3dbc8d","modified":1685782002978},{"_id":"public/libs/lightgallery/css/lg-transitions.css.map","hash":"6ee19f99bca3ecf2fa0d6f07fb5c200db07ddd11","modified":1685782002978},{"_id":"public/libs/lightgallery/css/lightgallery.css.map","hash":"91788030e3c7107b6b4bf50a82d4309368850488","modified":1685782002978},{"_id":"public/libs/lightgallery/img/video-play.png","hash":"3ea484cdc04d2e4547f80cbf80001dcf248c94ef","modified":1685782002978},{"_id":"public/libs/lightgallery/img/vimeo-play.png","hash":"6190254f2804904a4a1fa1eb390dfd334e416992","modified":1685782002978},{"_id":"public/libs/lightgallery/img/youtube-play.png","hash":"fea6df9d9d43151f9c9d15f000adb30eb3e26fc4","modified":1685782002978},{"_id":"public/libs/lightgallery/fonts/lg.eot","hash":"54caf05a81e33d7bf04f2e420736ce6f1de5f936","modified":1685782002978},{"_id":"public/libs/lightgallery/fonts/lg.ttf","hash":"f6421c0c397311ae09f9257aa58bcd5e9720f493","modified":1685782002978},{"_id":"public/libs/lightgallery/fonts/lg.woff","hash":"3048de344dd5cad4624e0127e58eaae4b576f574","modified":1685782002978},{"_id":"public/libs/open-sans/fonts/59ZRklaO5bWGqF5A9baEERJtnKITppOI_IvcXXDNrsc.woff2","hash":"c4248ea800bd5608344ce163f5658b57e7ef9410","modified":1685782002978},{"_id":"public/libs/open-sans/fonts/K88pR3goAWT7BTt32Z01mxJtnKITppOI_IvcXXDNrsc.woff2","hash":"e0350190d720a8fec0557ab47b318ec4e4486448","modified":1685782002978},{"_id":"public/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNShWV49_lSm1NYrwo-zkhivY.woff2","hash":"22413bb8bfb78608c1e25aa1ed5c1f38557df79f","modified":1685782002978},{"_id":"public/libs/open-sans/fonts/LWCjsQkB6EMdfHrEVqA1KRJtnKITppOI_IvcXXDNrsc.woff2","hash":"2c5b039b57f62625e88226a938679ec937431ad1","modified":1685782002978},{"_id":"public/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSj0LW-43aMEzIO6XUTLjad8.woff2","hash":"63eb74ef040aade256f2274a7f31a914edddb0ea","modified":1685782002978},{"_id":"public/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSq-j2U0lmluP9RWlSytm3ho.woff2","hash":"4dc6d7174ea6d89f4c45e43e1bfc3e03d8ffebaf","modified":1685782002978},{"_id":"public/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSqaRobkAwv3vxw3jMhVENGA.woff2","hash":"415eee05976ab8b2471602a5ddb78a6c58fc21aa","modified":1685782002978},{"_id":"public/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSugdm0LZdjqr5-oayXSOefg.woff2","hash":"a0b0c389cf46d63c850e61fed572485ff0b68183","modified":1685782002978},{"_id":"public/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSpX5f-9o1vgP2EXwfjgl7AY.woff2","hash":"328a22fe3eec71ad9e5ece4d67dd62e79dab6b7f","modified":1685782002978},{"_id":"public/libs/open-sans/fonts/RjgO7rYTmqiVp7vzi-Q5URJtnKITppOI_IvcXXDNrsc.woff2","hash":"be201d32a9aa5d186723ebb3c538be691aa8c53a","modified":1685782002978},{"_id":"public/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSv8zf_FOSsgRmwsS7Aa9k2w.woff2","hash":"c5f29fed6632efe0aa83318369f0d8c4061b775b","modified":1685782002978},{"_id":"public/libs/open-sans/fonts/cJZKeOuBrn4kERxqtaUH3VtXRa8TVwTICgirnJhmVJw.woff2","hash":"afc44700053c9a28f9ab26f6aec4862ac1d0795d","modified":1685782002978},{"_id":"public/libs/open-sans/fonts/u-WUoqrET9fUeobQW7jkRRJtnKITppOI_IvcXXDNrsc.woff2","hash":"113978181dcac77baecef6115a9121d8f6e4fc3a","modified":1685782002978},{"_id":"public/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBiYE0-AqJ3nfInTTiDXDjU4.woff2","hash":"5067c81462c15422853c94d21a1726865a61634f","modified":1685782002978},{"_id":"public/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBjTOQ_MqJVwkKsUn0wKzc2I.woff2","hash":"b366f2fda2e524eb5ef50058eefff249a3b96e6c","modified":1685782002978},{"_id":"public/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBjUj_cnvWIuuBMVgbX098Mw.woff2","hash":"d22904914469be735490e3c8cb093c7862896dd5","modified":1685782002978},{"_id":"public/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBmo_sUJ8uO4YLWRInS22T3Y.woff2","hash":"b85efde42fa3a03c32b1d31c6cd74c622fc7916c","modified":1685782002978},{"_id":"public/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBkbcKLIaa1LC45dFaAfauRA.woff2","hash":"ae80fb3cd16339aa7b5da280ab53975523dcaac2","modified":1685782002978},{"_id":"public/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBr6up8jxqWt8HVA3mDhkV_0.woff2","hash":"d0b40a7848703556c6631f24e961a98ca5829255","modified":1685782002978},{"_id":"public/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBo4P5ICox8Kq3LLUNMylGO4.woff2","hash":"e75607ba1417181397c700775b84303d5a2957b9","modified":1685782002978},{"_id":"public/libs/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasD9V_2ngZ8dMf8fLgjYEouxg.woff2","hash":"942addaec4d3a60af33947a84a3d85f926015947","modified":1685782002978},{"_id":"public/libs/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasDy2Q8seG17bfDXYR_jUsrzg.woff2","hash":"b0e0bb5ef78db8b15d430d0b9be9d4329289a310","modified":1685782002978},{"_id":"public/libs/open-sans/fonts/xozscpT2726on7jbcb_pAhJtnKITppOI_IvcXXDNrsc.woff2","hash":"be365eca44760ce3fc9b377c43d4634958479c69","modified":1685782002978},{"_id":"public/libs/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1685782002978},{"_id":"public/libs/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1685782002978},{"_id":"public/js/insight.js","hash":"f3ca3627a7eff416ad9bf82b9d90a18679871544","modified":1685782002978},{"_id":"public/js/main.js","hash":"498f1931f99e144d111f0db786f0827a7b381cf0","modified":1685782002978},{"_id":"public/libs/justified-gallery/justifiedGallery.min.css","hash":"13fbcba5e97aa88b748d94d3efc4718475279907","modified":1685782002978},{"_id":"public/libs/lightgallery/css/lg-fb-comment-box.min.css","hash":"05830fadb8454f39dcc98c8686eb4d5c24b71fc0","modified":1685782002978},{"_id":"public/libs/lightgallery/js/lg-autoplay.min.js","hash":"d845741bcaf961579622880eb2a445257efad1ac","modified":1685782002978},{"_id":"public/libs/lightgallery/js/lg-autoplay.js","hash":"2bb31b2b5c141241db5298a9f9c0adc466692350","modified":1685782002978},{"_id":"public/libs/lightgallery/js/lg-fullscreen.js","hash":"45e8a510878a92563b7be2000bff5274ec19d3d5","modified":1685782002978},{"_id":"public/libs/lightgallery/js/lg-fullscreen.min.js","hash":"b6b9e4022700b7faf2a5a175ba44a3bd938fdd20","modified":1685782002978},{"_id":"public/libs/lightgallery/js/lg-hash.js","hash":"0a0295e4a7b98e6c381640393e2d7e8ee614bff1","modified":1685782002978},{"_id":"public/libs/lightgallery/js/lg-pager.js","hash":"d6d6bda03addfc1c81579b43e0d7bc2f7995b791","modified":1685782002978},{"_id":"public/libs/lightgallery/js/lg-hash.min.js","hash":"43f1e1e720ab0e241c19b83aa26bd6848eab8edc","modified":1685782002978},{"_id":"public/libs/lightgallery/js/lg-share.js","hash":"faf13b07ad5801ed2925fabfce2af6c21eaa8442","modified":1685782002978},{"_id":"public/libs/lightgallery/js/lg-share.min.js","hash":"39c615f07c5d3aaa65a2c3068a30fdd6dd5c372d","modified":1685782002978},{"_id":"public/libs/lightgallery/js/lg-thumbnail.js","hash":"2c15049f238164feca678ad1840cd0a4e070a4e0","modified":1685782002978},{"_id":"public/libs/lightgallery/js/lg-thumbnail.min.js","hash":"18dd7d2909d1bfd6852f031d03e774b4428c512b","modified":1685782002978},{"_id":"public/libs/lightgallery/js/lg-pager.min.js","hash":"25caa6ff65b1c6dee09941e795ae2633bdbab211","modified":1685782002978},{"_id":"public/libs/lightgallery/js/lg-video.min.js","hash":"032c001ab045a69856f9c3ed4a2a3bf12a8e310f","modified":1685782002978},{"_id":"public/libs/lightgallery/js/lg-video.js","hash":"d79e34ee375f0aed21c9723f1e5f1158cf1e9c3f","modified":1685782002978},{"_id":"public/libs/lightgallery/js/lg-zoom.js","hash":"a995bc9603c1e65221fb1d1a67d4ecc74df5c858","modified":1685782002978},{"_id":"public/libs/lightgallery/js/lg-zoom.min.js","hash":"15b49f9728439819ece15e4295cce254c87a4f45","modified":1685782002978},{"_id":"public/libs/jquery/plugins/cookie/1.4.1/jquery.cookie.js","hash":"8d693ee36a40201cafabd2e3f22f3096ebadcdb4","modified":1685782002978},{"_id":"public/libs/justified-gallery/jquery.justifiedGallery.min.js","hash":"b2683e7a872bc109b1756a65188a37cef7d0bd5c","modified":1685782002978},{"_id":"public/libs/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1685782002978},{"_id":"public/libs/lightgallery/css/lg-transitions.min.css","hash":"5c22e2073a4c96d6212c72135391b599e8d1359f","modified":1685782002978},{"_id":"public/libs/lightgallery/css/lightgallery.min.css","hash":"c9a2e19c932b56f4a2ce30c98910d10b74edb38a","modified":1685782002978},{"_id":"public/libs/jquery/2.1.3/jquery.min.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1685782002978},{"_id":"public/libs/lightgallery/js/lightgallery.js","hash":"3bf4a5ad0a4c72d838df5b7b282f80df686cf0c6","modified":1685782002978},{"_id":"public/libs/lightgallery/js/lightgallery.min.js","hash":"956ef9b706755318da69ad0b5d7786339d831251","modified":1685782002978},{"_id":"public/libs/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1685782002978},{"_id":"public/libs/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1685782002978},{"_id":"public/libs/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1685782002978},{"_id":"public/libs/source-code-pro/styles.css","hash":"70e52a27f47dfe1c8b98d7a13b0e4cd89023e596","modified":1685782002978},{"_id":"public/libs/open-sans/styles.css","hash":"2e612d70e830d09a7c18b9a2d2bdaa940373bcbb","modified":1685782002978},{"_id":"public/libs/lightgallery/css/lg-fb-comment-box.css","hash":"15be92e89f3390d4c305259a7eee43e47754424f","modified":1685782002978},{"_id":"public/css/style.css","hash":"8297ec00f5664f9892ab9f495086c608962756d0","modified":1685782002978},{"_id":"public/libs/font-awesome/css/font-awesome.css","hash":"04240896af0776e0a6db7f384d8421da596d185b","modified":1685782002978},{"_id":"public/libs/lightgallery/css/lg-transitions.css","hash":"74889647faa797215f5895a81b02bb5448dd8e92","modified":1685782002978},{"_id":"public/libs/lightgallery/css/lightgallery.css","hash":"1e53a0060074e50295f42e09851728587e40135b","modified":1685782002978}],"Category":[{"name":"..","_id":"clifr2v1h000414uo1orz2zdd"},{"name":"cmake","parent":"clifr2v1h000414uo1orz2zdd","_id":"clifr2v1o000m14uo6b16afex"},{"name":"git","parent":"clifr2v1h000414uo1orz2zdd","_id":"clifr2v1r000y14uo79ewg1ok"},{"name":"第一章：从简单的可执行文件到库","parent":"clifr2v1o000m14uo6b16afex","_id":"clifr2v1z002714uofrwacrq7"},{"name":"C++","parent":"clifr2v1h000414uo1orz2zdd","_id":"clifr2v25003n14uo5yfr35i8"},{"name":"常用工具","parent":"clifr2v1h000414uo1orz2zdd","_id":"clifr2v25003r14uo0v04fqsk"},{"name":"C++基础教程","parent":"clifr2v25003n14uo5yfr35i8","_id":"clifr2v29004i14uoars96rgc"}],"Data":[],"Page":[{"title":"About","layout":"page","_content":"\n","source":"about/index.md","raw":"title: \"About\"\nlayout: \"page\"\n---\n\n","date":"2023-02-27T12:48:35.326Z","updated":"2023-02-27T12:48:35.326Z","path":"about/index.html","comments":1,"_id":"clifr2v1c000014uodz7fcrea","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"Tags","layout":"tags","_content":"","source":"tags/index.md","raw":"title: \"Tags\"\nlayout: \"tags\"\n---\n","date":"2023-02-27T12:48:35.327Z","updated":"2023-02-27T12:48:35.327Z","path":"tags/index.html","comments":1,"_id":"clifr2v1g000214uo8euhcthv","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"Categories","layout":"categories","_content":"","source":"categories/index.md","raw":"title: \"Categories\"\nlayout: \"categories\"\n---\n","date":"2023-02-27T12:48:35.327Z","updated":"2023-02-27T12:48:35.327Z","path":"categories/index.html","comments":1,"_id":"clifr2v1i000614uof81mdkff","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"1.将单个源文件编译为可执行文件","author":"连思鑫","date":"2023-03-02T10:47:00.000Z","_content":"#### 生成构建器\n\n``` shell\n$ mkdir -p build\n$ cd build\n$ cmake ..\n```\n\n>  这里，我们创建了一个目录 build (生成构建器的位置)，进入 build 目录，并通过指定 CMakeLists.txt 的位置(本例中位于父目录中)来调用 CMake。\n>\n> CMake语言不区分大小写，但是参数区分大小写。\n>\n> CMake中，C++是默认的编程语言。不过，我们还是建议使用LANGUAGES 选项在 project 命令中显式地声明项目的语言。\n\n可以使用以下命令行来实现相同的效果：\n\n``` shell\n$ cmake -H. -Bbuild\n# 该命令是跨平台的，使用了-H 和-B 为 CLI 选项。\n# -H 表示当前目录中搜索根 CMakeLists.txt 文件。\n# -Bbuild 告诉 CMake 在一个名为 build 的目录中生成所有的文件。\n```\n\n#### 构建项目\n\n```shell \n# 在 build 文件夹下执行\n$ cmake --build .\n\n# Windows 输出如下\n$ cmake --build .\n用于 .NET Framework 的 Microsoft (R) 生成引擎版本 16.10.2+857e5a733\n版权所有(C) Microsoft Corporation。保留所有权利。\n\n  Checking Build System\n  Building Custom Rule C:/Users/3D Objects/HelloCMake/CMakeLists.txt\n  HelloCMake.cpp\n  hello-cmake.vcxproj -> C:\\Users\\3D Objects\\HelloCMake\\build\\Debug\\hello-cmake.exe\n  Building Custom Rule C:/Users/3D Objects/HelloCMake/CMakeLists.txt\n```\n","source":"_posts/1-将单个源文件编译为可执行文件.md","raw":"title: 1.将单个源文件编译为可执行文件\nauthor: 连思鑫\ntags:\n  - cmake\ncategories:\n  - ..\n  - cmake\n  - 第一章：从简单的可执行文件到库\ndate: 2023-03-02 18:47:00\n---\n#### 生成构建器\n\n``` shell\n$ mkdir -p build\n$ cd build\n$ cmake ..\n```\n\n>  这里，我们创建了一个目录 build (生成构建器的位置)，进入 build 目录，并通过指定 CMakeLists.txt 的位置(本例中位于父目录中)来调用 CMake。\n>\n> CMake语言不区分大小写，但是参数区分大小写。\n>\n> CMake中，C++是默认的编程语言。不过，我们还是建议使用LANGUAGES 选项在 project 命令中显式地声明项目的语言。\n\n可以使用以下命令行来实现相同的效果：\n\n``` shell\n$ cmake -H. -Bbuild\n# 该命令是跨平台的，使用了-H 和-B 为 CLI 选项。\n# -H 表示当前目录中搜索根 CMakeLists.txt 文件。\n# -Bbuild 告诉 CMake 在一个名为 build 的目录中生成所有的文件。\n```\n\n#### 构建项目\n\n```shell \n# 在 build 文件夹下执行\n$ cmake --build .\n\n# Windows 输出如下\n$ cmake --build .\n用于 .NET Framework 的 Microsoft (R) 生成引擎版本 16.10.2+857e5a733\n版权所有(C) Microsoft Corporation。保留所有权利。\n\n  Checking Build System\n  Building Custom Rule C:/Users/3D Objects/HelloCMake/CMakeLists.txt\n  HelloCMake.cpp\n  hello-cmake.vcxproj -> C:\\Users\\3D Objects\\HelloCMake\\build\\Debug\\hello-cmake.exe\n  Building Custom Rule C:/Users/3D Objects/HelloCMake/CMakeLists.txt\n```\n","slug":"1-将单个源文件编译为可执行文件","published":1,"updated":"2023-03-02T11:00:19.157Z","_id":"clifr2v1e000114uo3xmlcthm","comments":1,"layout":"post","photos":[],"link":"","content":"<h4 id=\"生成构建器\"><a href=\"#生成构建器\" class=\"headerlink\" title=\"生成构建器\"></a>生成构建器</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\"><span class=\"built_in\">mkdir</span> -p build</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\"><span class=\"built_in\">cd</span> build</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">cmake ..</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p> 这里，我们创建了一个目录 build (生成构建器的位置)，进入 build 目录，并通过指定 CMakeLists.txt 的位置(本例中位于父目录中)来调用 CMake。</p>\n<p>CMake语言不区分大小写，但是参数区分大小写。</p>\n<p>CMake中，C++是默认的编程语言。不过，我们还是建议使用LANGUAGES 选项在 project 命令中显式地声明项目的语言。</p>\n</blockquote>\n<p>可以使用以下命令行来实现相同的效果：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">cmake -H. -Bbuild</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">该命令是跨平台的，使用了-H 和-B 为 CLI 选项。</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">-H 表示当前目录中搜索根 CMakeLists.txt 文件。</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">-Bbuild 告诉 CMake 在一个名为 build 的目录中生成所有的文件。</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"构建项目\"><a href=\"#构建项目\" class=\"headerlink\" title=\"构建项目\"></a>构建项目</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">在 build 文件夹下执行</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">cmake --build .</span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">Windows 输出如下</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">cmake --build .</span></span><br><span class=\"line\">用于 .NET Framework 的 Microsoft (R) 生成引擎版本 16.10.2+857e5a733</span><br><span class=\"line\">版权所有(C) Microsoft Corporation。保留所有权利。</span><br><span class=\"line\"></span><br><span class=\"line\">  Checking Build System</span><br><span class=\"line\">  Building Custom Rule C:/Users/3D Objects/HelloCMake/CMakeLists.txt</span><br><span class=\"line\">  HelloCMake.cpp</span><br><span class=\"line\">  hello-cmake.vcxproj -&gt; C:\\Users\\3D Objects\\HelloCMake\\build\\Debug\\hello-cmake.exe</span><br><span class=\"line\">  Building Custom Rule C:/Users/3D Objects/HelloCMake/CMakeLists.txt</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"生成构建器\"><a href=\"#生成构建器\" class=\"headerlink\" title=\"生成构建器\"></a>生成构建器</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\"><span class=\"built_in\">mkdir</span> -p build</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\"><span class=\"built_in\">cd</span> build</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">cmake ..</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p> 这里，我们创建了一个目录 build (生成构建器的位置)，进入 build 目录，并通过指定 CMakeLists.txt 的位置(本例中位于父目录中)来调用 CMake。</p>\n<p>CMake语言不区分大小写，但是参数区分大小写。</p>\n<p>CMake中，C++是默认的编程语言。不过，我们还是建议使用LANGUAGES 选项在 project 命令中显式地声明项目的语言。</p>\n</blockquote>\n<p>可以使用以下命令行来实现相同的效果：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">cmake -H. -Bbuild</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">该命令是跨平台的，使用了-H 和-B 为 CLI 选项。</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">-H 表示当前目录中搜索根 CMakeLists.txt 文件。</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">-Bbuild 告诉 CMake 在一个名为 build 的目录中生成所有的文件。</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"构建项目\"><a href=\"#构建项目\" class=\"headerlink\" title=\"构建项目\"></a>构建项目</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">在 build 文件夹下执行</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">cmake --build .</span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">Windows 输出如下</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">cmake --build .</span></span><br><span class=\"line\">用于 .NET Framework 的 Microsoft (R) 生成引擎版本 16.10.2+857e5a733</span><br><span class=\"line\">版权所有(C) Microsoft Corporation。保留所有权利。</span><br><span class=\"line\"></span><br><span class=\"line\">  Checking Build System</span><br><span class=\"line\">  Building Custom Rule C:/Users/3D Objects/HelloCMake/CMakeLists.txt</span><br><span class=\"line\">  HelloCMake.cpp</span><br><span class=\"line\">  hello-cmake.vcxproj -&gt; C:\\Users\\3D Objects\\HelloCMake\\build\\Debug\\hello-cmake.exe</span><br><span class=\"line\">  Building Custom Rule C:/Users/3D Objects/HelloCMake/CMakeLists.txt</span><br></pre></td></tr></table></figure>\n"},{"title":"10.使用控制流","author":"连思鑫","date":"2023-03-02T11:27:00.000Z","_content":"### 10.使用控制流\n\n#### 使用控制流 （Linux 环境下正常）\n\n---\n\n本章前面的示例中，已经使用过 if-else-endif 。\n\nCMake还提供了创建循环的语言工具： foreach endforeach 和 while-endwhile 。两者都可以与 break 结合使用，以便尽早从循环中跳出。\n\n本示例将展示如何使用 foreach ，来循环源文件列表。我们将应用这样的循环，在引入新目标的前提下，来为一组源文件进行优化降级。\n\n#### 具体实施\n\n----\n\n1. 声明最低要求的 CMake 版本，项目名称和语言，并声明了库目标\n\n   ``` cmake\n   cmake_minimum_required(VERSION 3.5)\n   project(download LIANGUAGES CXX)\n   add_library(progressbar\n   \tSHARED\n   \tProgressBar.h\n   \tProgressBar.cpp\n   )\n   add_library(printer\n   \tSHARED\n   \tPrinter.h\n   \tPrinter.cpp\n   )\n   add_library(sleep\n   \tSHARED\n   \tSleep.h\n   \tSleep.cpp\n   )\n   ```\n\n2. 使用` -O3 `编译器优化级别编译库，对目标设置一个私有编译器选项\n\n   ``` cmake\n   target_compile_options(progressbar\n   \tPRIVATE\n   \t-O3\n   )\n   target_compile_options(Sleep\n   \tPRIVATE\n   \t-O3\n   )\n   target_compile_options(\n   \tPRIVATE\n   \t-O3\n   )\n   ```\n\n3. 然后，生成一个源文件列表，以较低的优化选项进行编译\n\n   ``` cmake\n   list(APPEND sources_list\n   \tProgressBar.h\n   \tProgressBar.cpp\n   \tSleep.h\n   \tSleep.cpp\n   \tPrinter.h\n   \tPrinter.cpp\n   )\n   ```\n\n4. 循环这些源文件，将它们的优化级别调到 -O2 。使用它们的源文件属性完成:\n\n   ``` cmake\nmessage(STATUS \"##### Setting source properties using IN LISTS syntax: \")\n   foreach(_source IN LISTS sources_list)\n   \tset_source_files_properties($(_source) PROPERTIES COMPILE_FLAGS -O2)\n   \tmessage(STATUS \"##### Appending -O2 flag for ${_source}\")\n   endforeach()\n   ```\n   \n5. 为了确保设置属性，再次循环并在打印每个源文件的 COMPILE_FLAGS 属性\n\n   ``` cmake \n   foreach(_source IN LISTS sources_list)\n   \tget_source_files_property(_flags ${_source} COMPILE_FLAGS)\n   \tmessage(STATUS \"##### Source ${_source} has the following extra COMPILE_FLAGS: ${_flags}\")\n   endforeach()\n   ```\n   \n6. 最后，添加 download 可执行目标，并将 progressbar、printer、sleep 库连接上去\n\n   ``` cmake\n   add_executable(download download.cpp)\n   target_link_libraries(download progressbar printer sleep)\n   ```\n\n#### 工作原理\n\n---\n\nforeach-endforeach 语法可用于在变量列表上，表示重复特定任务。\n\n本示例中，使用它来操作、设置和获取项目中特定文件的编译器标志。CMake代码片段中引入了另外两个新命令:\n\n- set_source_files_properties(file PROPERTIES property value) ，它将属性设置为给定文件的传递值。\n\n  与目标非常相似，文件在CMake中也有属性，允许对构建系统进行非常细粒度的控制。\n\n- get_source_file_property(VAR file property) ，检索给定文件所需属性的值，并将其存储在 CMake VAR 变量中。\n\n  ----\n\n- CMake中，列表是用分号分隔的字符串组。列表可以由 list 或 set 命令创建。\n\n  例如， set(var a b c d e) 和 list(APPEND a b c d e) 都创建了列表 a;b;c;d;e 。\n  \n  \n  \n#### 源码下载\n\n[使用控制流源码](/wikicode/download/cmake/1.10.zip)","source":"_posts/10-使用控制流.md","raw":"title: 10.使用控制流\nauthor: 连思鑫\ntags:\n  - cmake\ncategories:\n  - ..\n  - cmake\n  - 第一章：从简单的可执行文件到库\ndate: 2023-03-02 19:27:00\n---\n### 10.使用控制流\n\n#### 使用控制流 （Linux 环境下正常）\n\n---\n\n本章前面的示例中，已经使用过 if-else-endif 。\n\nCMake还提供了创建循环的语言工具： foreach endforeach 和 while-endwhile 。两者都可以与 break 结合使用，以便尽早从循环中跳出。\n\n本示例将展示如何使用 foreach ，来循环源文件列表。我们将应用这样的循环，在引入新目标的前提下，来为一组源文件进行优化降级。\n\n#### 具体实施\n\n----\n\n1. 声明最低要求的 CMake 版本，项目名称和语言，并声明了库目标\n\n   ``` cmake\n   cmake_minimum_required(VERSION 3.5)\n   project(download LIANGUAGES CXX)\n   add_library(progressbar\n   \tSHARED\n   \tProgressBar.h\n   \tProgressBar.cpp\n   )\n   add_library(printer\n   \tSHARED\n   \tPrinter.h\n   \tPrinter.cpp\n   )\n   add_library(sleep\n   \tSHARED\n   \tSleep.h\n   \tSleep.cpp\n   )\n   ```\n\n2. 使用` -O3 `编译器优化级别编译库，对目标设置一个私有编译器选项\n\n   ``` cmake\n   target_compile_options(progressbar\n   \tPRIVATE\n   \t-O3\n   )\n   target_compile_options(Sleep\n   \tPRIVATE\n   \t-O3\n   )\n   target_compile_options(\n   \tPRIVATE\n   \t-O3\n   )\n   ```\n\n3. 然后，生成一个源文件列表，以较低的优化选项进行编译\n\n   ``` cmake\n   list(APPEND sources_list\n   \tProgressBar.h\n   \tProgressBar.cpp\n   \tSleep.h\n   \tSleep.cpp\n   \tPrinter.h\n   \tPrinter.cpp\n   )\n   ```\n\n4. 循环这些源文件，将它们的优化级别调到 -O2 。使用它们的源文件属性完成:\n\n   ``` cmake\nmessage(STATUS \"##### Setting source properties using IN LISTS syntax: \")\n   foreach(_source IN LISTS sources_list)\n   \tset_source_files_properties($(_source) PROPERTIES COMPILE_FLAGS -O2)\n   \tmessage(STATUS \"##### Appending -O2 flag for ${_source}\")\n   endforeach()\n   ```\n   \n5. 为了确保设置属性，再次循环并在打印每个源文件的 COMPILE_FLAGS 属性\n\n   ``` cmake \n   foreach(_source IN LISTS sources_list)\n   \tget_source_files_property(_flags ${_source} COMPILE_FLAGS)\n   \tmessage(STATUS \"##### Source ${_source} has the following extra COMPILE_FLAGS: ${_flags}\")\n   endforeach()\n   ```\n   \n6. 最后，添加 download 可执行目标，并将 progressbar、printer、sleep 库连接上去\n\n   ``` cmake\n   add_executable(download download.cpp)\n   target_link_libraries(download progressbar printer sleep)\n   ```\n\n#### 工作原理\n\n---\n\nforeach-endforeach 语法可用于在变量列表上，表示重复特定任务。\n\n本示例中，使用它来操作、设置和获取项目中特定文件的编译器标志。CMake代码片段中引入了另外两个新命令:\n\n- set_source_files_properties(file PROPERTIES property value) ，它将属性设置为给定文件的传递值。\n\n  与目标非常相似，文件在CMake中也有属性，允许对构建系统进行非常细粒度的控制。\n\n- get_source_file_property(VAR file property) ，检索给定文件所需属性的值，并将其存储在 CMake VAR 变量中。\n\n  ----\n\n- CMake中，列表是用分号分隔的字符串组。列表可以由 list 或 set 命令创建。\n\n  例如， set(var a b c d e) 和 list(APPEND a b c d e) 都创建了列表 a;b;c;d;e 。\n  \n  \n  \n#### 源码下载\n\n[使用控制流源码](/wikicode/download/cmake/1.10.zip)","slug":"10-使用控制流","published":1,"updated":"2023-03-02T11:48:04.118Z","_id":"clifr2v1g000314uo2sy96fyy","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"10-使用控制流\"><a href=\"#10-使用控制流\" class=\"headerlink\" title=\"10.使用控制流\"></a>10.使用控制流</h3><h4 id=\"使用控制流-（Linux-环境下正常）\"><a href=\"#使用控制流-（Linux-环境下正常）\" class=\"headerlink\" title=\"使用控制流 （Linux 环境下正常）\"></a>使用控制流 （Linux 环境下正常）</h4><hr>\n<p>本章前面的示例中，已经使用过 if-else-endif 。</p>\n<p>CMake还提供了创建循环的语言工具： foreach endforeach 和 while-endwhile 。两者都可以与 break 结合使用，以便尽早从循环中跳出。</p>\n<p>本示例将展示如何使用 foreach ，来循环源文件列表。我们将应用这样的循环，在引入新目标的前提下，来为一组源文件进行优化降级。</p>\n<h4 id=\"具体实施\"><a href=\"#具体实施\" class=\"headerlink\" title=\"具体实施\"></a>具体实施</h4><hr>\n<ol>\n<li><p>声明最低要求的 CMake 版本，项目名称和语言，并声明了库目标</p>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">cmake_minimum_required</span>(VERSION <span class=\"number\">3.5</span>)</span><br><span class=\"line\"><span class=\"keyword\">project</span>(download LIANGUAGES CXX)</span><br><span class=\"line\"><span class=\"keyword\">add_library</span>(progressbar</span><br><span class=\"line\">\tSHARED</span><br><span class=\"line\">\tProgressBar.h</span><br><span class=\"line\">\tProgressBar.cpp</span><br><span class=\"line\">)</span><br><span class=\"line\"><span class=\"keyword\">add_library</span>(printer</span><br><span class=\"line\">\tSHARED</span><br><span class=\"line\">\tPrinter.h</span><br><span class=\"line\">\tPrinter.cpp</span><br><span class=\"line\">)</span><br><span class=\"line\"><span class=\"keyword\">add_library</span>(sleep</span><br><span class=\"line\">\tSHARED</span><br><span class=\"line\">\tSleep.h</span><br><span class=\"line\">\tSleep.cpp</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure></li>\n<li><p>使用<code>-O3</code>编译器优化级别编译库，对目标设置一个私有编译器选项</p>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">target_compile_options</span>(progressbar</span><br><span class=\"line\">\tPRIVATE</span><br><span class=\"line\">\t-O3</span><br><span class=\"line\">)</span><br><span class=\"line\"><span class=\"keyword\">target_compile_options</span>(Sleep</span><br><span class=\"line\">\tPRIVATE</span><br><span class=\"line\">\t-O3</span><br><span class=\"line\">)</span><br><span class=\"line\"><span class=\"keyword\">target_compile_options</span>(</span><br><span class=\"line\">\tPRIVATE</span><br><span class=\"line\">\t-O3</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure></li>\n<li><p>然后，生成一个源文件列表，以较低的优化选项进行编译</p>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">list</span>(APPEND sources_list</span><br><span class=\"line\">\tProgressBar.h</span><br><span class=\"line\">\tProgressBar.cpp</span><br><span class=\"line\">\tSleep.h</span><br><span class=\"line\">\tSleep.cpp</span><br><span class=\"line\">\tPrinter.h</span><br><span class=\"line\">\tPrinter.cpp</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure></li>\n<li><p>循环这些源文件，将它们的优化级别调到 -O2 。使用它们的源文件属性完成:</p>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">message</span>(STATUS <span class=\"string\">&quot;##### Setting source properties using IN LISTS syntax: &quot;</span>)</span><br><span class=\"line\">   <span class=\"keyword\">foreach</span>(_source IN LISTS sources_list)</span><br><span class=\"line\">   \t<span class=\"keyword\">set_source_files_properties</span>($(_source) PROPERTIES COMPILE_FLAGS -O2)</span><br><span class=\"line\">   \t<span class=\"keyword\">message</span>(STATUS <span class=\"string\">&quot;##### Appending -O2 flag for $&#123;_source&#125;&quot;</span>)</span><br><span class=\"line\">   <span class=\"keyword\">endforeach</span>()</span><br></pre></td></tr></table></figure></li>\n<li><p>为了确保设置属性，再次循环并在打印每个源文件的 COMPILE_FLAGS 属性</p>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">foreach</span>(_source IN LISTS sources_list)</span><br><span class=\"line\">\tget_source_files_property(_flags <span class=\"variable\">$&#123;_source&#125;</span> COMPILE_FLAGS)</span><br><span class=\"line\">\t<span class=\"keyword\">message</span>(STATUS <span class=\"string\">&quot;##### Source $&#123;_source&#125; has the following extra COMPILE_FLAGS: $&#123;_flags&#125;&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">endforeach</span>()</span><br></pre></td></tr></table></figure></li>\n<li><p>最后，添加 download 可执行目标，并将 progressbar、printer、sleep 库连接上去</p>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">add_executable</span>(download download.cpp)</span><br><span class=\"line\"><span class=\"keyword\">target_link_libraries</span>(download progressbar printer sleep)</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h4 id=\"工作原理\"><a href=\"#工作原理\" class=\"headerlink\" title=\"工作原理\"></a>工作原理</h4><hr>\n<p>foreach-endforeach 语法可用于在变量列表上，表示重复特定任务。</p>\n<p>本示例中，使用它来操作、设置和获取项目中特定文件的编译器标志。CMake代码片段中引入了另外两个新命令:</p>\n<ul>\n<li><p>set_source_files_properties(file PROPERTIES property value) ，它将属性设置为给定文件的传递值。</p>\n<p>与目标非常相似，文件在CMake中也有属性，允许对构建系统进行非常细粒度的控制。</p>\n</li>\n<li><p>get_source_file_property(VAR file property) ，检索给定文件所需属性的值，并将其存储在 CMake VAR 变量中。</p>\n<hr>\n</li>\n<li><p>CMake中，列表是用分号分隔的字符串组。列表可以由 list 或 set 命令创建。</p>\n<p>例如， set(var a b c d e) 和 list(APPEND a b c d e) 都创建了列表 a;b;c;d;e 。</p>\n</li>\n</ul>\n<h4 id=\"源码下载\"><a href=\"#源码下载\" class=\"headerlink\" title=\"源码下载\"></a>源码下载</h4><p><a href=\"/wikicode/download/cmake/1.10.zip\">使用控制流源码</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"10-使用控制流\"><a href=\"#10-使用控制流\" class=\"headerlink\" title=\"10.使用控制流\"></a>10.使用控制流</h3><h4 id=\"使用控制流-（Linux-环境下正常）\"><a href=\"#使用控制流-（Linux-环境下正常）\" class=\"headerlink\" title=\"使用控制流 （Linux 环境下正常）\"></a>使用控制流 （Linux 环境下正常）</h4><hr>\n<p>本章前面的示例中，已经使用过 if-else-endif 。</p>\n<p>CMake还提供了创建循环的语言工具： foreach endforeach 和 while-endwhile 。两者都可以与 break 结合使用，以便尽早从循环中跳出。</p>\n<p>本示例将展示如何使用 foreach ，来循环源文件列表。我们将应用这样的循环，在引入新目标的前提下，来为一组源文件进行优化降级。</p>\n<h4 id=\"具体实施\"><a href=\"#具体实施\" class=\"headerlink\" title=\"具体实施\"></a>具体实施</h4><hr>\n<ol>\n<li><p>声明最低要求的 CMake 版本，项目名称和语言，并声明了库目标</p>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">cmake_minimum_required</span>(VERSION <span class=\"number\">3.5</span>)</span><br><span class=\"line\"><span class=\"keyword\">project</span>(download LIANGUAGES CXX)</span><br><span class=\"line\"><span class=\"keyword\">add_library</span>(progressbar</span><br><span class=\"line\">\tSHARED</span><br><span class=\"line\">\tProgressBar.h</span><br><span class=\"line\">\tProgressBar.cpp</span><br><span class=\"line\">)</span><br><span class=\"line\"><span class=\"keyword\">add_library</span>(printer</span><br><span class=\"line\">\tSHARED</span><br><span class=\"line\">\tPrinter.h</span><br><span class=\"line\">\tPrinter.cpp</span><br><span class=\"line\">)</span><br><span class=\"line\"><span class=\"keyword\">add_library</span>(sleep</span><br><span class=\"line\">\tSHARED</span><br><span class=\"line\">\tSleep.h</span><br><span class=\"line\">\tSleep.cpp</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure></li>\n<li><p>使用<code>-O3</code>编译器优化级别编译库，对目标设置一个私有编译器选项</p>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">target_compile_options</span>(progressbar</span><br><span class=\"line\">\tPRIVATE</span><br><span class=\"line\">\t-O3</span><br><span class=\"line\">)</span><br><span class=\"line\"><span class=\"keyword\">target_compile_options</span>(Sleep</span><br><span class=\"line\">\tPRIVATE</span><br><span class=\"line\">\t-O3</span><br><span class=\"line\">)</span><br><span class=\"line\"><span class=\"keyword\">target_compile_options</span>(</span><br><span class=\"line\">\tPRIVATE</span><br><span class=\"line\">\t-O3</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure></li>\n<li><p>然后，生成一个源文件列表，以较低的优化选项进行编译</p>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">list</span>(APPEND sources_list</span><br><span class=\"line\">\tProgressBar.h</span><br><span class=\"line\">\tProgressBar.cpp</span><br><span class=\"line\">\tSleep.h</span><br><span class=\"line\">\tSleep.cpp</span><br><span class=\"line\">\tPrinter.h</span><br><span class=\"line\">\tPrinter.cpp</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure></li>\n<li><p>循环这些源文件，将它们的优化级别调到 -O2 。使用它们的源文件属性完成:</p>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">message</span>(STATUS <span class=\"string\">&quot;##### Setting source properties using IN LISTS syntax: &quot;</span>)</span><br><span class=\"line\">   <span class=\"keyword\">foreach</span>(_source IN LISTS sources_list)</span><br><span class=\"line\">   \t<span class=\"keyword\">set_source_files_properties</span>($(_source) PROPERTIES COMPILE_FLAGS -O2)</span><br><span class=\"line\">   \t<span class=\"keyword\">message</span>(STATUS <span class=\"string\">&quot;##### Appending -O2 flag for $&#123;_source&#125;&quot;</span>)</span><br><span class=\"line\">   <span class=\"keyword\">endforeach</span>()</span><br></pre></td></tr></table></figure></li>\n<li><p>为了确保设置属性，再次循环并在打印每个源文件的 COMPILE_FLAGS 属性</p>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">foreach</span>(_source IN LISTS sources_list)</span><br><span class=\"line\">\tget_source_files_property(_flags <span class=\"variable\">$&#123;_source&#125;</span> COMPILE_FLAGS)</span><br><span class=\"line\">\t<span class=\"keyword\">message</span>(STATUS <span class=\"string\">&quot;##### Source $&#123;_source&#125; has the following extra COMPILE_FLAGS: $&#123;_flags&#125;&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">endforeach</span>()</span><br></pre></td></tr></table></figure></li>\n<li><p>最后，添加 download 可执行目标，并将 progressbar、printer、sleep 库连接上去</p>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">add_executable</span>(download download.cpp)</span><br><span class=\"line\"><span class=\"keyword\">target_link_libraries</span>(download progressbar printer sleep)</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h4 id=\"工作原理\"><a href=\"#工作原理\" class=\"headerlink\" title=\"工作原理\"></a>工作原理</h4><hr>\n<p>foreach-endforeach 语法可用于在变量列表上，表示重复特定任务。</p>\n<p>本示例中，使用它来操作、设置和获取项目中特定文件的编译器标志。CMake代码片段中引入了另外两个新命令:</p>\n<ul>\n<li><p>set_source_files_properties(file PROPERTIES property value) ，它将属性设置为给定文件的传递值。</p>\n<p>与目标非常相似，文件在CMake中也有属性，允许对构建系统进行非常细粒度的控制。</p>\n</li>\n<li><p>get_source_file_property(VAR file property) ，检索给定文件所需属性的值，并将其存储在 CMake VAR 变量中。</p>\n<hr>\n</li>\n<li><p>CMake中，列表是用分号分隔的字符串组。列表可以由 list 或 set 命令创建。</p>\n<p>例如， set(var a b c d e) 和 list(APPEND a b c d e) 都创建了列表 a;b;c;d;e 。</p>\n</li>\n</ul>\n<h4 id=\"源码下载\"><a href=\"#源码下载\" class=\"headerlink\" title=\"源码下载\"></a>源码下载</h4><p><a href=\"/wikicode/download/cmake/1.10.zip\">使用控制流源码</a></p>\n"},{"title":"1.什么是 Git","author":"连思鑫","date":"2023-03-01T14:42:00.000Z","_content":"# 什么是 Git\n\n\n到目前为止，Git 是世界上使用最为广泛的现代化版本控制系统。Git 最初由 Linux 系统内核的作者 Linus Torvalds 在 2005 年开始开发，目前已经是一个持续维护的成熟开源项目。如今，大量软件项目依赖 Git 进行版本管理，其中既有开源软件，也有商业软件。Git 在很多操作系统和集成开发环境（IDE）上都表现良好。绝大多数软件开发者或多或少都使用过 Git。\n\nGit 是分布式版本管理（DVCS）的一种。CVS 和 Subversion（SVN）等集中式的版本管理软件将完整的版本历史存放在同一个地方。而在 Git 中，每个开发者的代码仓库都包含了所有变更历史。\n\n除了分布式之外，Git 在设计之初也考虑了性能、安全性和灵活性。\n\n### 高性能\n\nGit 的底层性能相较于其他版本管理软件有强大的优势。提交修改、创建分支、合并分支和比较版本都针对性能进行了优化。Git 中实现的算法利用了现实中代码树的特点以及它们被修改和访问的常见模式。\n\n不同于某些版本管理软件，Git 在决定文件树的储存和版本历史时，不会被文件名的变化所愚弄——Git 关注的是文件的内容本身。毕竟，代码文件经常会被重命名、拆分和重新编排。Git 仓库中的文件对象通过差分编码（delta encoding，仅保存代码修改的差分）和压缩技术储存，并且直接保存文件夹中的内容和版本控制元数据。\n\n分布式架构也给 Git 带来了巨大的性能优势。\n\n比如说，有一名开发成员 Alice 修改了代码，添加了一些准备在 2.0 版本中发布的功能，然后提交了这些修改及其描述。随后，她又编写并提交了另一个新功能。很自然地，这两次修改是版本历史中两份独立的工作。Alice 又切换到了 1.3 版本的分支，修复了一个只影响这个旧版本的 bug。这次修复的目的是为了让团队在 2.0 版本还没有完成之前，发布一个 1.3.1 版本来解决旧版本中的一些 bug。Alice 可以立刻回到 2.0 版本分支，继续新功能开发。这一切都不需要网络连接，非常快速可靠，甚至可以在飞机中完成。当她准备好将这些单独提交的更改发送到远程仓库时，她只需要一个“推送”（push）命令。\n\n### 安全\n\nGit 设计时就把托管代码的完好性作为重中之重。文件内容以及文件、目录、版本、标签和提交的关联，都通过安全的加密哈希校验算法（SHA1）保护。这可以避免代码和修改历史被不小心或者恶意改变，并且保证修改历史完全可追迹。\n\n你可以相信在 Git 中源代码的修改历史是真实可靠的。\n\n有一些版本管理软件无法防止版本历史之后被篡改。这对于任何依赖软件开发的团队来说都是严重的安全漏洞。\n\n### 灵活\n\nGit 的关键设计目标之一就是灵活。Git 在很多方面都展现出了其灵活性：支持多种非线性的工作流，对不同规模的项目来说都很高效，并且兼容多个操作系统和协议。\n\nGit 在设计时最重要的功能便是分支和标签（不同于 SVN），因此所有影响分支和标签的操作也都会被保存到修改历史中。不是所有的版本管理软件关注的都是这个层面的版本追踪。\n\n### 使用 Git 进行版本管理\n\nGit 对于绝大多数软件开发团队来说都是最好的选择。虽然每个团队都需要考虑自身的情况，但我们依然可以列举一些 Git 比其他版本控制系统更好的理由：\n\n#### Git 很好用\n\nGit 兼具大多数团队和个人开发者需要的功能、性能，安全性和灵活性。我们已经具体讨论过了这些特点。对很多团队来说，它们发现 Git 在这几点上都表现的更优秀。\n\n#### Git 已经成为了事实上的行业标准\n\nGit 使用最广泛的版本管理软件。这使得 Git 在以下这些方面具有极大的吸引力。在 Atlassian（作者所在的公司），大多数代码都是通过 Git 管理的。\n\n大量开发者都有过 Git 的使用经历，很大一部分大学毕业生甚至只用过 Git 进行版本管理。虽然迁移到 Git 的过程中或许会经历比较陡峭的学习曲线，但是大多数员工以及未来的员工都已经具备了使用 Git 的基本技能，这意味着他们不需要额外的培训。\n\n除了拥有大量使用者之外，Git 的普及还意味着很多第三方的服务和 IDE 都已经集成了 Git。比如我们的 DVCS 桌面客户端 [Source Tree](https://www.atlassian.com/software/sourcetree)、项目开发管理软件 [JIRA](https://www.atlassian.com/software/jira) 和代码托管服务 [Bitbucket](https://www.atlassian.com/software/bitbucket)。\n\n如果你是一个想要积累软件开发工具使用技能的新人，Git 毫无疑问是你在版本管理方面的第一选择。\n\n#### Git 是一个高质量的开源项目\n\nGit 本身是一个经历多年良好支持和管理的开源软件项目。Git 的维护者很好地平衡了长远的用户需求，和改进可用性和功能性的例行更新。这个开源项目的质量久经考验，无数企业都极度依赖于此。\n\nGit 还拥有良好的社区支持和庞大的用户群体。你可以找到各种深入浅出的学习资料，包括书籍，教程，以及专题网站。你也可以找到相关的播客节目和视频教程。\n\n开源降低了业余开发者的成本，因为他们不需要花一分钱来使用 Git。对于开源项目来说，Git 无疑是 SVN 和 CVS 等上一代流行版本管理软件的接班人。\n\n#### 对 Git 的批评\n\n对于 Git 的一个常见批评是它学起来不那么容易。Git 中的某些术语对于新手或者是使用其他系统的朋友可能会比较陌生。比如说，`revert` 这个命令在 Git、SVN、CVS 中具有不同的含义。不过，Git 向用户提供了非常强大的功能。学习掌握这些功能也许会花一些时间，但是一旦你学会了这些技能，它们会帮助你大大提高团队的开发效率。\n\n对于曾经使用非分布式版本管理的团队来说，他们可能不想放弃中央服务器。不过，虽然 Git 被设计成分布式的架构，你依然可以建立一个“官方”的代码库来存放所有的修改。使用 Git 时，由于所有的开发者都拥有完整的代码库拷贝，所以他们的工作不会被中央服务器的状态和性能所影响。即使遇到故障，他们依然可以查看完整的项目历史。得益于 Git 的灵活性和分布式特点，你可以在保持原有工作方式的同时还可以得到 Git 带来的额外好处，而你以前甚至不会意识到这些好处。\n\n现在你已经明白了什么是版本管理，什么是 Git 以及为什么要使用 Git ，你可以选择继续阅读下一节，了解 Git 在整个组织层面带来的好处。\n\n\n> 本教程来源于[**「Git Recipes」**](https://github.com/geeeeeeeeek/git-recipes/)。","source":"_posts/1-什么是-Git.md","raw":"title: 1.什么是 Git\nauthor: 连思鑫\ntags:\n  - git\ncategories:\n  - ..\n  - git\n  - ''\ndate: 2023-03-01 22:42:00\n---\n# 什么是 Git\n\n\n到目前为止，Git 是世界上使用最为广泛的现代化版本控制系统。Git 最初由 Linux 系统内核的作者 Linus Torvalds 在 2005 年开始开发，目前已经是一个持续维护的成熟开源项目。如今，大量软件项目依赖 Git 进行版本管理，其中既有开源软件，也有商业软件。Git 在很多操作系统和集成开发环境（IDE）上都表现良好。绝大多数软件开发者或多或少都使用过 Git。\n\nGit 是分布式版本管理（DVCS）的一种。CVS 和 Subversion（SVN）等集中式的版本管理软件将完整的版本历史存放在同一个地方。而在 Git 中，每个开发者的代码仓库都包含了所有变更历史。\n\n除了分布式之外，Git 在设计之初也考虑了性能、安全性和灵活性。\n\n### 高性能\n\nGit 的底层性能相较于其他版本管理软件有强大的优势。提交修改、创建分支、合并分支和比较版本都针对性能进行了优化。Git 中实现的算法利用了现实中代码树的特点以及它们被修改和访问的常见模式。\n\n不同于某些版本管理软件，Git 在决定文件树的储存和版本历史时，不会被文件名的变化所愚弄——Git 关注的是文件的内容本身。毕竟，代码文件经常会被重命名、拆分和重新编排。Git 仓库中的文件对象通过差分编码（delta encoding，仅保存代码修改的差分）和压缩技术储存，并且直接保存文件夹中的内容和版本控制元数据。\n\n分布式架构也给 Git 带来了巨大的性能优势。\n\n比如说，有一名开发成员 Alice 修改了代码，添加了一些准备在 2.0 版本中发布的功能，然后提交了这些修改及其描述。随后，她又编写并提交了另一个新功能。很自然地，这两次修改是版本历史中两份独立的工作。Alice 又切换到了 1.3 版本的分支，修复了一个只影响这个旧版本的 bug。这次修复的目的是为了让团队在 2.0 版本还没有完成之前，发布一个 1.3.1 版本来解决旧版本中的一些 bug。Alice 可以立刻回到 2.0 版本分支，继续新功能开发。这一切都不需要网络连接，非常快速可靠，甚至可以在飞机中完成。当她准备好将这些单独提交的更改发送到远程仓库时，她只需要一个“推送”（push）命令。\n\n### 安全\n\nGit 设计时就把托管代码的完好性作为重中之重。文件内容以及文件、目录、版本、标签和提交的关联，都通过安全的加密哈希校验算法（SHA1）保护。这可以避免代码和修改历史被不小心或者恶意改变，并且保证修改历史完全可追迹。\n\n你可以相信在 Git 中源代码的修改历史是真实可靠的。\n\n有一些版本管理软件无法防止版本历史之后被篡改。这对于任何依赖软件开发的团队来说都是严重的安全漏洞。\n\n### 灵活\n\nGit 的关键设计目标之一就是灵活。Git 在很多方面都展现出了其灵活性：支持多种非线性的工作流，对不同规模的项目来说都很高效，并且兼容多个操作系统和协议。\n\nGit 在设计时最重要的功能便是分支和标签（不同于 SVN），因此所有影响分支和标签的操作也都会被保存到修改历史中。不是所有的版本管理软件关注的都是这个层面的版本追踪。\n\n### 使用 Git 进行版本管理\n\nGit 对于绝大多数软件开发团队来说都是最好的选择。虽然每个团队都需要考虑自身的情况，但我们依然可以列举一些 Git 比其他版本控制系统更好的理由：\n\n#### Git 很好用\n\nGit 兼具大多数团队和个人开发者需要的功能、性能，安全性和灵活性。我们已经具体讨论过了这些特点。对很多团队来说，它们发现 Git 在这几点上都表现的更优秀。\n\n#### Git 已经成为了事实上的行业标准\n\nGit 使用最广泛的版本管理软件。这使得 Git 在以下这些方面具有极大的吸引力。在 Atlassian（作者所在的公司），大多数代码都是通过 Git 管理的。\n\n大量开发者都有过 Git 的使用经历，很大一部分大学毕业生甚至只用过 Git 进行版本管理。虽然迁移到 Git 的过程中或许会经历比较陡峭的学习曲线，但是大多数员工以及未来的员工都已经具备了使用 Git 的基本技能，这意味着他们不需要额外的培训。\n\n除了拥有大量使用者之外，Git 的普及还意味着很多第三方的服务和 IDE 都已经集成了 Git。比如我们的 DVCS 桌面客户端 [Source Tree](https://www.atlassian.com/software/sourcetree)、项目开发管理软件 [JIRA](https://www.atlassian.com/software/jira) 和代码托管服务 [Bitbucket](https://www.atlassian.com/software/bitbucket)。\n\n如果你是一个想要积累软件开发工具使用技能的新人，Git 毫无疑问是你在版本管理方面的第一选择。\n\n#### Git 是一个高质量的开源项目\n\nGit 本身是一个经历多年良好支持和管理的开源软件项目。Git 的维护者很好地平衡了长远的用户需求，和改进可用性和功能性的例行更新。这个开源项目的质量久经考验，无数企业都极度依赖于此。\n\nGit 还拥有良好的社区支持和庞大的用户群体。你可以找到各种深入浅出的学习资料，包括书籍，教程，以及专题网站。你也可以找到相关的播客节目和视频教程。\n\n开源降低了业余开发者的成本，因为他们不需要花一分钱来使用 Git。对于开源项目来说，Git 无疑是 SVN 和 CVS 等上一代流行版本管理软件的接班人。\n\n#### 对 Git 的批评\n\n对于 Git 的一个常见批评是它学起来不那么容易。Git 中的某些术语对于新手或者是使用其他系统的朋友可能会比较陌生。比如说，`revert` 这个命令在 Git、SVN、CVS 中具有不同的含义。不过，Git 向用户提供了非常强大的功能。学习掌握这些功能也许会花一些时间，但是一旦你学会了这些技能，它们会帮助你大大提高团队的开发效率。\n\n对于曾经使用非分布式版本管理的团队来说，他们可能不想放弃中央服务器。不过，虽然 Git 被设计成分布式的架构，你依然可以建立一个“官方”的代码库来存放所有的修改。使用 Git 时，由于所有的开发者都拥有完整的代码库拷贝，所以他们的工作不会被中央服务器的状态和性能所影响。即使遇到故障，他们依然可以查看完整的项目历史。得益于 Git 的灵活性和分布式特点，你可以在保持原有工作方式的同时还可以得到 Git 带来的额外好处，而你以前甚至不会意识到这些好处。\n\n现在你已经明白了什么是版本管理，什么是 Git 以及为什么要使用 Git ，你可以选择继续阅读下一节，了解 Git 在整个组织层面带来的好处。\n\n\n> 本教程来源于[**「Git Recipes」**](https://github.com/geeeeeeeeek/git-recipes/)。","slug":"1-什么是-Git","published":1,"updated":"2023-03-01T14:45:05.605Z","_id":"clifr2v1j000714uo3ddx68mc","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"什么是-Git\"><a href=\"#什么是-Git\" class=\"headerlink\" title=\"什么是 Git\"></a>什么是 Git</h1><p>到目前为止，Git 是世界上使用最为广泛的现代化版本控制系统。Git 最初由 Linux 系统内核的作者 Linus Torvalds 在 2005 年开始开发，目前已经是一个持续维护的成熟开源项目。如今，大量软件项目依赖 Git 进行版本管理，其中既有开源软件，也有商业软件。Git 在很多操作系统和集成开发环境（IDE）上都表现良好。绝大多数软件开发者或多或少都使用过 Git。</p>\n<p>Git 是分布式版本管理（DVCS）的一种。CVS 和 Subversion（SVN）等集中式的版本管理软件将完整的版本历史存放在同一个地方。而在 Git 中，每个开发者的代码仓库都包含了所有变更历史。</p>\n<p>除了分布式之外，Git 在设计之初也考虑了性能、安全性和灵活性。</p>\n<h3 id=\"高性能\"><a href=\"#高性能\" class=\"headerlink\" title=\"高性能\"></a>高性能</h3><p>Git 的底层性能相较于其他版本管理软件有强大的优势。提交修改、创建分支、合并分支和比较版本都针对性能进行了优化。Git 中实现的算法利用了现实中代码树的特点以及它们被修改和访问的常见模式。</p>\n<p>不同于某些版本管理软件，Git 在决定文件树的储存和版本历史时，不会被文件名的变化所愚弄——Git 关注的是文件的内容本身。毕竟，代码文件经常会被重命名、拆分和重新编排。Git 仓库中的文件对象通过差分编码（delta encoding，仅保存代码修改的差分）和压缩技术储存，并且直接保存文件夹中的内容和版本控制元数据。</p>\n<p>分布式架构也给 Git 带来了巨大的性能优势。</p>\n<p>比如说，有一名开发成员 Alice 修改了代码，添加了一些准备在 2.0 版本中发布的功能，然后提交了这些修改及其描述。随后，她又编写并提交了另一个新功能。很自然地，这两次修改是版本历史中两份独立的工作。Alice 又切换到了 1.3 版本的分支，修复了一个只影响这个旧版本的 bug。这次修复的目的是为了让团队在 2.0 版本还没有完成之前，发布一个 1.3.1 版本来解决旧版本中的一些 bug。Alice 可以立刻回到 2.0 版本分支，继续新功能开发。这一切都不需要网络连接，非常快速可靠，甚至可以在飞机中完成。当她准备好将这些单独提交的更改发送到远程仓库时，她只需要一个“推送”（push）命令。</p>\n<h3 id=\"安全\"><a href=\"#安全\" class=\"headerlink\" title=\"安全\"></a>安全</h3><p>Git 设计时就把托管代码的完好性作为重中之重。文件内容以及文件、目录、版本、标签和提交的关联，都通过安全的加密哈希校验算法（SHA1）保护。这可以避免代码和修改历史被不小心或者恶意改变，并且保证修改历史完全可追迹。</p>\n<p>你可以相信在 Git 中源代码的修改历史是真实可靠的。</p>\n<p>有一些版本管理软件无法防止版本历史之后被篡改。这对于任何依赖软件开发的团队来说都是严重的安全漏洞。</p>\n<h3 id=\"灵活\"><a href=\"#灵活\" class=\"headerlink\" title=\"灵活\"></a>灵活</h3><p>Git 的关键设计目标之一就是灵活。Git 在很多方面都展现出了其灵活性：支持多种非线性的工作流，对不同规模的项目来说都很高效，并且兼容多个操作系统和协议。</p>\n<p>Git 在设计时最重要的功能便是分支和标签（不同于 SVN），因此所有影响分支和标签的操作也都会被保存到修改历史中。不是所有的版本管理软件关注的都是这个层面的版本追踪。</p>\n<h3 id=\"使用-Git-进行版本管理\"><a href=\"#使用-Git-进行版本管理\" class=\"headerlink\" title=\"使用 Git 进行版本管理\"></a>使用 Git 进行版本管理</h3><p>Git 对于绝大多数软件开发团队来说都是最好的选择。虽然每个团队都需要考虑自身的情况，但我们依然可以列举一些 Git 比其他版本控制系统更好的理由：</p>\n<h4 id=\"Git-很好用\"><a href=\"#Git-很好用\" class=\"headerlink\" title=\"Git 很好用\"></a>Git 很好用</h4><p>Git 兼具大多数团队和个人开发者需要的功能、性能，安全性和灵活性。我们已经具体讨论过了这些特点。对很多团队来说，它们发现 Git 在这几点上都表现的更优秀。</p>\n<h4 id=\"Git-已经成为了事实上的行业标准\"><a href=\"#Git-已经成为了事实上的行业标准\" class=\"headerlink\" title=\"Git 已经成为了事实上的行业标准\"></a>Git 已经成为了事实上的行业标准</h4><p>Git 使用最广泛的版本管理软件。这使得 Git 在以下这些方面具有极大的吸引力。在 Atlassian（作者所在的公司），大多数代码都是通过 Git 管理的。</p>\n<p>大量开发者都有过 Git 的使用经历，很大一部分大学毕业生甚至只用过 Git 进行版本管理。虽然迁移到 Git 的过程中或许会经历比较陡峭的学习曲线，但是大多数员工以及未来的员工都已经具备了使用 Git 的基本技能，这意味着他们不需要额外的培训。</p>\n<p>除了拥有大量使用者之外，Git 的普及还意味着很多第三方的服务和 IDE 都已经集成了 Git。比如我们的 DVCS 桌面客户端 <a href=\"https://www.atlassian.com/software/sourcetree\">Source Tree</a>、项目开发管理软件 <a href=\"https://www.atlassian.com/software/jira\">JIRA</a> 和代码托管服务 <a href=\"https://www.atlassian.com/software/bitbucket\">Bitbucket</a>。</p>\n<p>如果你是一个想要积累软件开发工具使用技能的新人，Git 毫无疑问是你在版本管理方面的第一选择。</p>\n<h4 id=\"Git-是一个高质量的开源项目\"><a href=\"#Git-是一个高质量的开源项目\" class=\"headerlink\" title=\"Git 是一个高质量的开源项目\"></a>Git 是一个高质量的开源项目</h4><p>Git 本身是一个经历多年良好支持和管理的开源软件项目。Git 的维护者很好地平衡了长远的用户需求，和改进可用性和功能性的例行更新。这个开源项目的质量久经考验，无数企业都极度依赖于此。</p>\n<p>Git 还拥有良好的社区支持和庞大的用户群体。你可以找到各种深入浅出的学习资料，包括书籍，教程，以及专题网站。你也可以找到相关的播客节目和视频教程。</p>\n<p>开源降低了业余开发者的成本，因为他们不需要花一分钱来使用 Git。对于开源项目来说，Git 无疑是 SVN 和 CVS 等上一代流行版本管理软件的接班人。</p>\n<h4 id=\"对-Git-的批评\"><a href=\"#对-Git-的批评\" class=\"headerlink\" title=\"对 Git 的批评\"></a>对 Git 的批评</h4><p>对于 Git 的一个常见批评是它学起来不那么容易。Git 中的某些术语对于新手或者是使用其他系统的朋友可能会比较陌生。比如说，<code>revert</code> 这个命令在 Git、SVN、CVS 中具有不同的含义。不过，Git 向用户提供了非常强大的功能。学习掌握这些功能也许会花一些时间，但是一旦你学会了这些技能，它们会帮助你大大提高团队的开发效率。</p>\n<p>对于曾经使用非分布式版本管理的团队来说，他们可能不想放弃中央服务器。不过，虽然 Git 被设计成分布式的架构，你依然可以建立一个“官方”的代码库来存放所有的修改。使用 Git 时，由于所有的开发者都拥有完整的代码库拷贝，所以他们的工作不会被中央服务器的状态和性能所影响。即使遇到故障，他们依然可以查看完整的项目历史。得益于 Git 的灵活性和分布式特点，你可以在保持原有工作方式的同时还可以得到 Git 带来的额外好处，而你以前甚至不会意识到这些好处。</p>\n<p>现在你已经明白了什么是版本管理，什么是 Git 以及为什么要使用 Git ，你可以选择继续阅读下一节，了解 Git 在整个组织层面带来的好处。</p>\n<blockquote>\n<p>本教程来源于<a href=\"https://github.com/geeeeeeeeek/git-recipes/\"><strong>「Git Recipes」</strong></a>。</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"什么是-Git\"><a href=\"#什么是-Git\" class=\"headerlink\" title=\"什么是 Git\"></a>什么是 Git</h1><p>到目前为止，Git 是世界上使用最为广泛的现代化版本控制系统。Git 最初由 Linux 系统内核的作者 Linus Torvalds 在 2005 年开始开发，目前已经是一个持续维护的成熟开源项目。如今，大量软件项目依赖 Git 进行版本管理，其中既有开源软件，也有商业软件。Git 在很多操作系统和集成开发环境（IDE）上都表现良好。绝大多数软件开发者或多或少都使用过 Git。</p>\n<p>Git 是分布式版本管理（DVCS）的一种。CVS 和 Subversion（SVN）等集中式的版本管理软件将完整的版本历史存放在同一个地方。而在 Git 中，每个开发者的代码仓库都包含了所有变更历史。</p>\n<p>除了分布式之外，Git 在设计之初也考虑了性能、安全性和灵活性。</p>\n<h3 id=\"高性能\"><a href=\"#高性能\" class=\"headerlink\" title=\"高性能\"></a>高性能</h3><p>Git 的底层性能相较于其他版本管理软件有强大的优势。提交修改、创建分支、合并分支和比较版本都针对性能进行了优化。Git 中实现的算法利用了现实中代码树的特点以及它们被修改和访问的常见模式。</p>\n<p>不同于某些版本管理软件，Git 在决定文件树的储存和版本历史时，不会被文件名的变化所愚弄——Git 关注的是文件的内容本身。毕竟，代码文件经常会被重命名、拆分和重新编排。Git 仓库中的文件对象通过差分编码（delta encoding，仅保存代码修改的差分）和压缩技术储存，并且直接保存文件夹中的内容和版本控制元数据。</p>\n<p>分布式架构也给 Git 带来了巨大的性能优势。</p>\n<p>比如说，有一名开发成员 Alice 修改了代码，添加了一些准备在 2.0 版本中发布的功能，然后提交了这些修改及其描述。随后，她又编写并提交了另一个新功能。很自然地，这两次修改是版本历史中两份独立的工作。Alice 又切换到了 1.3 版本的分支，修复了一个只影响这个旧版本的 bug。这次修复的目的是为了让团队在 2.0 版本还没有完成之前，发布一个 1.3.1 版本来解决旧版本中的一些 bug。Alice 可以立刻回到 2.0 版本分支，继续新功能开发。这一切都不需要网络连接，非常快速可靠，甚至可以在飞机中完成。当她准备好将这些单独提交的更改发送到远程仓库时，她只需要一个“推送”（push）命令。</p>\n<h3 id=\"安全\"><a href=\"#安全\" class=\"headerlink\" title=\"安全\"></a>安全</h3><p>Git 设计时就把托管代码的完好性作为重中之重。文件内容以及文件、目录、版本、标签和提交的关联，都通过安全的加密哈希校验算法（SHA1）保护。这可以避免代码和修改历史被不小心或者恶意改变，并且保证修改历史完全可追迹。</p>\n<p>你可以相信在 Git 中源代码的修改历史是真实可靠的。</p>\n<p>有一些版本管理软件无法防止版本历史之后被篡改。这对于任何依赖软件开发的团队来说都是严重的安全漏洞。</p>\n<h3 id=\"灵活\"><a href=\"#灵活\" class=\"headerlink\" title=\"灵活\"></a>灵活</h3><p>Git 的关键设计目标之一就是灵活。Git 在很多方面都展现出了其灵活性：支持多种非线性的工作流，对不同规模的项目来说都很高效，并且兼容多个操作系统和协议。</p>\n<p>Git 在设计时最重要的功能便是分支和标签（不同于 SVN），因此所有影响分支和标签的操作也都会被保存到修改历史中。不是所有的版本管理软件关注的都是这个层面的版本追踪。</p>\n<h3 id=\"使用-Git-进行版本管理\"><a href=\"#使用-Git-进行版本管理\" class=\"headerlink\" title=\"使用 Git 进行版本管理\"></a>使用 Git 进行版本管理</h3><p>Git 对于绝大多数软件开发团队来说都是最好的选择。虽然每个团队都需要考虑自身的情况，但我们依然可以列举一些 Git 比其他版本控制系统更好的理由：</p>\n<h4 id=\"Git-很好用\"><a href=\"#Git-很好用\" class=\"headerlink\" title=\"Git 很好用\"></a>Git 很好用</h4><p>Git 兼具大多数团队和个人开发者需要的功能、性能，安全性和灵活性。我们已经具体讨论过了这些特点。对很多团队来说，它们发现 Git 在这几点上都表现的更优秀。</p>\n<h4 id=\"Git-已经成为了事实上的行业标准\"><a href=\"#Git-已经成为了事实上的行业标准\" class=\"headerlink\" title=\"Git 已经成为了事实上的行业标准\"></a>Git 已经成为了事实上的行业标准</h4><p>Git 使用最广泛的版本管理软件。这使得 Git 在以下这些方面具有极大的吸引力。在 Atlassian（作者所在的公司），大多数代码都是通过 Git 管理的。</p>\n<p>大量开发者都有过 Git 的使用经历，很大一部分大学毕业生甚至只用过 Git 进行版本管理。虽然迁移到 Git 的过程中或许会经历比较陡峭的学习曲线，但是大多数员工以及未来的员工都已经具备了使用 Git 的基本技能，这意味着他们不需要额外的培训。</p>\n<p>除了拥有大量使用者之外，Git 的普及还意味着很多第三方的服务和 IDE 都已经集成了 Git。比如我们的 DVCS 桌面客户端 <a href=\"https://www.atlassian.com/software/sourcetree\">Source Tree</a>、项目开发管理软件 <a href=\"https://www.atlassian.com/software/jira\">JIRA</a> 和代码托管服务 <a href=\"https://www.atlassian.com/software/bitbucket\">Bitbucket</a>。</p>\n<p>如果你是一个想要积累软件开发工具使用技能的新人，Git 毫无疑问是你在版本管理方面的第一选择。</p>\n<h4 id=\"Git-是一个高质量的开源项目\"><a href=\"#Git-是一个高质量的开源项目\" class=\"headerlink\" title=\"Git 是一个高质量的开源项目\"></a>Git 是一个高质量的开源项目</h4><p>Git 本身是一个经历多年良好支持和管理的开源软件项目。Git 的维护者很好地平衡了长远的用户需求，和改进可用性和功能性的例行更新。这个开源项目的质量久经考验，无数企业都极度依赖于此。</p>\n<p>Git 还拥有良好的社区支持和庞大的用户群体。你可以找到各种深入浅出的学习资料，包括书籍，教程，以及专题网站。你也可以找到相关的播客节目和视频教程。</p>\n<p>开源降低了业余开发者的成本，因为他们不需要花一分钱来使用 Git。对于开源项目来说，Git 无疑是 SVN 和 CVS 等上一代流行版本管理软件的接班人。</p>\n<h4 id=\"对-Git-的批评\"><a href=\"#对-Git-的批评\" class=\"headerlink\" title=\"对 Git 的批评\"></a>对 Git 的批评</h4><p>对于 Git 的一个常见批评是它学起来不那么容易。Git 中的某些术语对于新手或者是使用其他系统的朋友可能会比较陌生。比如说，<code>revert</code> 这个命令在 Git、SVN、CVS 中具有不同的含义。不过，Git 向用户提供了非常强大的功能。学习掌握这些功能也许会花一些时间，但是一旦你学会了这些技能，它们会帮助你大大提高团队的开发效率。</p>\n<p>对于曾经使用非分布式版本管理的团队来说，他们可能不想放弃中央服务器。不过，虽然 Git 被设计成分布式的架构，你依然可以建立一个“官方”的代码库来存放所有的修改。使用 Git 时，由于所有的开发者都拥有完整的代码库拷贝，所以他们的工作不会被中央服务器的状态和性能所影响。即使遇到故障，他们依然可以查看完整的项目历史。得益于 Git 的灵活性和分布式特点，你可以在保持原有工作方式的同时还可以得到 Git 带来的额外好处，而你以前甚至不会意识到这些好处。</p>\n<p>现在你已经明白了什么是版本管理，什么是 Git 以及为什么要使用 Git ，你可以选择继续阅读下一节，了解 Git 在整个组织层面带来的好处。</p>\n<blockquote>\n<p>本教程来源于<a href=\"https://github.com/geeeeeeeeek/git-recipes/\"><strong>「Git Recipes」</strong></a>。</p>\n</blockquote>\n"},{"title":"2.切换生成器","author":"连思鑫","date":"2023-03-02T10:52:00.000Z","_content":"### 2.切换生成器\n\n#### 显示构建器 （cmake --help）\n\n``` bash\n$ cmake --help\n...\nGenerators\n\nThe following generators are available on this platform (* marks default):\n* Visual Studio 16 2019        = Generates Visual Studio 2019 project files.\n                                 Use -A option to specify architecture.\n  Visual Studio 15 2017 [arch] = Generates Visual Studio 2017 project files.\n                                 Optional [arch] can be \"Win64\" or \"ARM\".\n  Visual Studio 14 2015 [arch] = Generates Visual Studio 2015 project files.\n                                 Optional [arch] can be \"Win64\" or \"ARM\".\n  Visual Studio 12 2013 [arch] = Generates Visual Studio 2013 project files.\n                                 Optional [arch] can be \"Win64\" or \"ARM\".\n  Visual Studio 11 2012 [arch] = Generates Visual Studio 2012 project files.\n                                 Optional [arch] can be \"Win64\" or \"ARM\".\n  Visual Studio 10 2010 [arch] = Generates Visual Studio 2010 project files.\n                                 Optional [arch] can be \"Win64\" or \"IA64\".\n  Visual Studio 9 2008 [arch]  = Generates Visual Studio 2008 project files.\n                                 Optional [arch] can be \"Win64\" or \"IA64\".\n  Borland Makefiles            = Generates Borland makefiles.\n  NMake Makefiles              = Generates NMake makefiles.\n  NMake Makefiles JOM          = Generates JOM makefiles.\n  MSYS Makefiles               = Generates MSYS makefiles.\n  MinGW Makefiles              = Generates a make file for use with\n                                 mingw32-make.\n  Green Hills MULTI            = Generates Green Hills MULTI files\n                                 (experimental, work-in-progress).\n  Unix Makefiles               = Generates standard UNIX makefiles.\n  Ninja                        = Generates build.ninja files.\n  Ninja Multi-Config           = Generates build-<Config>.ninja files.\n  Watcom WMake                 = Generates Watcom WMake makefiles.\n  CodeBlocks - MinGW Makefiles = Generates CodeBlocks project files.\n  CodeBlocks - NMake Makefiles = Generates CodeBlocks project files.\n  CodeBlocks - NMake Makefiles JOM\n                               = Generates CodeBlocks project files.\n  CodeBlocks - Ninja           = Generates CodeBlocks project files.\n  CodeBlocks - Unix Makefiles  = Generates CodeBlocks project files.\n  CodeLite - MinGW Makefiles   = Generates CodeLite project files.\n  CodeLite - NMake Makefiles   = Generates CodeLite project files.\n  CodeLite - Ninja             = Generates CodeLite project files.\n  CodeLite - Unix Makefiles    = Generates CodeLite project files.\n  Eclipse CDT4 - NMake Makefiles\n                               = Generates Eclipse CDT 4.0 project files.\n  Eclipse CDT4 - MinGW Makefiles\n                               = Generates Eclipse CDT 4.0 project files.\n  Eclipse CDT4 - Ninja         = Generates Eclipse CDT 4.0 project files.\n  Eclipse CDT4 - Unix Makefiles= Generates Eclipse CDT 4.0 project files.\n  Kate - MinGW Makefiles       = Generates Kate project files.\n  Kate - NMake Makefiles       = Generates Kate project files.\n  Kate - Ninja                 = Generates Kate project files.\n  Kate - Unix Makefiles        = Generates Kate project files.\n  Sublime Text 2 - MinGW Makefiles\n                               = Generates Sublime Text 2 project files.\n  Sublime Text 2 - NMake Makefiles\n                               = Generates Sublime Text 2 project files.\n  Sublime Text 2 - Ninja       = Generates Sublime Text 2 project files.\n  Sublime Text 2 - Unix Makefiles\n                               = Generates Sublime Text 2 project files.\n\n```\n\n#### 具体实施（用 -G 切换生成器）\n\n1. 首先，使用以下步骤配置项目:\n\n   ``` shell\n   $ mkdir build\n   $ cd build\n   $ cmake -G \"CodeBlocks - Unix Makefiles\" ..\n   ```\n\n\n#### 如何工作\n\n与前一个配置相比，每一步的输出没什么变化。每个生成器都有自己的文件集，所以编译步骤的输出和\n构建目录的内容是不同的：\nbuild.ninja 和 rules.ninja ：包含 Ninja 的所有的构建语句和构建规则。\nCMakeCache.txt ：CMake 会在这个文件中进行缓存，与生成器无关。\nCMakeFiles ：包含由 CMake 在配置期间生成的临时文件。\ncmake_install.cmake ：CMake 脚本处理安装规则，并在安装时使用。\ncmake --build . 将 ninja 命令封装在一个跨平台的接口中。\n\n#### 测试代码\n\nC示例：\n\n```c\n// hello-world.c\n#include <stdio.h>\n#include <stdlib.h>\n\nchar *say_hello() { return \"Hello, CMake world!\"; }\n\nint main() {\n  printf(\"%s\\n\", say_hello());\n  return EXIT_SUCCESS;\n}\n```\n```cmake\n# CMakeLists.txt\n# 设置最低 cmake 版本\ncmake_minimum_required(VERSION 3.5 FATAL_ERROR)\n\n# 项目名称和语言\nproject(recipe-01 LANGUAGES C)\n\nadd_executable(hello-world hello-world.c)\n```\n\nC++示例：\n```c++\n//hello-world.cpp\n#include <cstdlib>\n#include <iostream>\n#include <string>\n\nstd::string say_hello() { return std::string(\"Hello, CMake world!\"); }\n\nint main() {\n  std::cout << say_hello() << std::endl;\n  return EXIT_SUCCESS;\n}\n```\n\n```cmake\n# CMakeLists.txt\n# 设置最低 cmake 版本\ncmake_minimum_required(VERSION 3.5 FATAL_ERROR)\n\n# 项目名称和语言\nproject(recipe-01 LANGUAGES CXX)\n\nadd_executable(hello-world hello-world.cpp)\n```\n","source":"_posts/2-切换生成器.md","raw":"title: 2.切换生成器\nauthor: 连思鑫\ntags:\n  - cmake\ncategories:\n  - ..\n  - cmake\n  - 第一章：从简单的可执行文件到库\ndate: 2023-03-02 18:52:00\n---\n### 2.切换生成器\n\n#### 显示构建器 （cmake --help）\n\n``` bash\n$ cmake --help\n...\nGenerators\n\nThe following generators are available on this platform (* marks default):\n* Visual Studio 16 2019        = Generates Visual Studio 2019 project files.\n                                 Use -A option to specify architecture.\n  Visual Studio 15 2017 [arch] = Generates Visual Studio 2017 project files.\n                                 Optional [arch] can be \"Win64\" or \"ARM\".\n  Visual Studio 14 2015 [arch] = Generates Visual Studio 2015 project files.\n                                 Optional [arch] can be \"Win64\" or \"ARM\".\n  Visual Studio 12 2013 [arch] = Generates Visual Studio 2013 project files.\n                                 Optional [arch] can be \"Win64\" or \"ARM\".\n  Visual Studio 11 2012 [arch] = Generates Visual Studio 2012 project files.\n                                 Optional [arch] can be \"Win64\" or \"ARM\".\n  Visual Studio 10 2010 [arch] = Generates Visual Studio 2010 project files.\n                                 Optional [arch] can be \"Win64\" or \"IA64\".\n  Visual Studio 9 2008 [arch]  = Generates Visual Studio 2008 project files.\n                                 Optional [arch] can be \"Win64\" or \"IA64\".\n  Borland Makefiles            = Generates Borland makefiles.\n  NMake Makefiles              = Generates NMake makefiles.\n  NMake Makefiles JOM          = Generates JOM makefiles.\n  MSYS Makefiles               = Generates MSYS makefiles.\n  MinGW Makefiles              = Generates a make file for use with\n                                 mingw32-make.\n  Green Hills MULTI            = Generates Green Hills MULTI files\n                                 (experimental, work-in-progress).\n  Unix Makefiles               = Generates standard UNIX makefiles.\n  Ninja                        = Generates build.ninja files.\n  Ninja Multi-Config           = Generates build-<Config>.ninja files.\n  Watcom WMake                 = Generates Watcom WMake makefiles.\n  CodeBlocks - MinGW Makefiles = Generates CodeBlocks project files.\n  CodeBlocks - NMake Makefiles = Generates CodeBlocks project files.\n  CodeBlocks - NMake Makefiles JOM\n                               = Generates CodeBlocks project files.\n  CodeBlocks - Ninja           = Generates CodeBlocks project files.\n  CodeBlocks - Unix Makefiles  = Generates CodeBlocks project files.\n  CodeLite - MinGW Makefiles   = Generates CodeLite project files.\n  CodeLite - NMake Makefiles   = Generates CodeLite project files.\n  CodeLite - Ninja             = Generates CodeLite project files.\n  CodeLite - Unix Makefiles    = Generates CodeLite project files.\n  Eclipse CDT4 - NMake Makefiles\n                               = Generates Eclipse CDT 4.0 project files.\n  Eclipse CDT4 - MinGW Makefiles\n                               = Generates Eclipse CDT 4.0 project files.\n  Eclipse CDT4 - Ninja         = Generates Eclipse CDT 4.0 project files.\n  Eclipse CDT4 - Unix Makefiles= Generates Eclipse CDT 4.0 project files.\n  Kate - MinGW Makefiles       = Generates Kate project files.\n  Kate - NMake Makefiles       = Generates Kate project files.\n  Kate - Ninja                 = Generates Kate project files.\n  Kate - Unix Makefiles        = Generates Kate project files.\n  Sublime Text 2 - MinGW Makefiles\n                               = Generates Sublime Text 2 project files.\n  Sublime Text 2 - NMake Makefiles\n                               = Generates Sublime Text 2 project files.\n  Sublime Text 2 - Ninja       = Generates Sublime Text 2 project files.\n  Sublime Text 2 - Unix Makefiles\n                               = Generates Sublime Text 2 project files.\n\n```\n\n#### 具体实施（用 -G 切换生成器）\n\n1. 首先，使用以下步骤配置项目:\n\n   ``` shell\n   $ mkdir build\n   $ cd build\n   $ cmake -G \"CodeBlocks - Unix Makefiles\" ..\n   ```\n\n\n#### 如何工作\n\n与前一个配置相比，每一步的输出没什么变化。每个生成器都有自己的文件集，所以编译步骤的输出和\n构建目录的内容是不同的：\nbuild.ninja 和 rules.ninja ：包含 Ninja 的所有的构建语句和构建规则。\nCMakeCache.txt ：CMake 会在这个文件中进行缓存，与生成器无关。\nCMakeFiles ：包含由 CMake 在配置期间生成的临时文件。\ncmake_install.cmake ：CMake 脚本处理安装规则，并在安装时使用。\ncmake --build . 将 ninja 命令封装在一个跨平台的接口中。\n\n#### 测试代码\n\nC示例：\n\n```c\n// hello-world.c\n#include <stdio.h>\n#include <stdlib.h>\n\nchar *say_hello() { return \"Hello, CMake world!\"; }\n\nint main() {\n  printf(\"%s\\n\", say_hello());\n  return EXIT_SUCCESS;\n}\n```\n```cmake\n# CMakeLists.txt\n# 设置最低 cmake 版本\ncmake_minimum_required(VERSION 3.5 FATAL_ERROR)\n\n# 项目名称和语言\nproject(recipe-01 LANGUAGES C)\n\nadd_executable(hello-world hello-world.c)\n```\n\nC++示例：\n```c++\n//hello-world.cpp\n#include <cstdlib>\n#include <iostream>\n#include <string>\n\nstd::string say_hello() { return std::string(\"Hello, CMake world!\"); }\n\nint main() {\n  std::cout << say_hello() << std::endl;\n  return EXIT_SUCCESS;\n}\n```\n\n```cmake\n# CMakeLists.txt\n# 设置最低 cmake 版本\ncmake_minimum_required(VERSION 3.5 FATAL_ERROR)\n\n# 项目名称和语言\nproject(recipe-01 LANGUAGES CXX)\n\nadd_executable(hello-world hello-world.cpp)\n```\n","slug":"2-切换生成器","published":1,"updated":"2023-03-02T11:00:01.866Z","_id":"clifr2v1j000814uo3h075t4u","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"2-切换生成器\"><a href=\"#2-切换生成器\" class=\"headerlink\" title=\"2.切换生成器\"></a>2.切换生成器</h3><h4 id=\"显示构建器-（cmake-–help）\"><a href=\"#显示构建器-（cmake-–help）\" class=\"headerlink\" title=\"显示构建器 （cmake –help）\"></a>显示构建器 （cmake –help）</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ cmake --<span class=\"built_in\">help</span></span><br><span class=\"line\">...</span><br><span class=\"line\">Generators</span><br><span class=\"line\"></span><br><span class=\"line\">The following generators are available on this platform (* marks default):</span><br><span class=\"line\">* Visual Studio 16 2019        = Generates Visual Studio 2019 project files.</span><br><span class=\"line\">                                 Use -A option to specify architecture.</span><br><span class=\"line\">  Visual Studio 15 2017 [<span class=\"built_in\">arch</span>] = Generates Visual Studio 2017 project files.</span><br><span class=\"line\">                                 Optional [<span class=\"built_in\">arch</span>] can be <span class=\"string\">&quot;Win64&quot;</span> or <span class=\"string\">&quot;ARM&quot;</span>.</span><br><span class=\"line\">  Visual Studio 14 2015 [<span class=\"built_in\">arch</span>] = Generates Visual Studio 2015 project files.</span><br><span class=\"line\">                                 Optional [<span class=\"built_in\">arch</span>] can be <span class=\"string\">&quot;Win64&quot;</span> or <span class=\"string\">&quot;ARM&quot;</span>.</span><br><span class=\"line\">  Visual Studio 12 2013 [<span class=\"built_in\">arch</span>] = Generates Visual Studio 2013 project files.</span><br><span class=\"line\">                                 Optional [<span class=\"built_in\">arch</span>] can be <span class=\"string\">&quot;Win64&quot;</span> or <span class=\"string\">&quot;ARM&quot;</span>.</span><br><span class=\"line\">  Visual Studio 11 2012 [<span class=\"built_in\">arch</span>] = Generates Visual Studio 2012 project files.</span><br><span class=\"line\">                                 Optional [<span class=\"built_in\">arch</span>] can be <span class=\"string\">&quot;Win64&quot;</span> or <span class=\"string\">&quot;ARM&quot;</span>.</span><br><span class=\"line\">  Visual Studio 10 2010 [<span class=\"built_in\">arch</span>] = Generates Visual Studio 2010 project files.</span><br><span class=\"line\">                                 Optional [<span class=\"built_in\">arch</span>] can be <span class=\"string\">&quot;Win64&quot;</span> or <span class=\"string\">&quot;IA64&quot;</span>.</span><br><span class=\"line\">  Visual Studio 9 2008 [<span class=\"built_in\">arch</span>]  = Generates Visual Studio 2008 project files.</span><br><span class=\"line\">                                 Optional [<span class=\"built_in\">arch</span>] can be <span class=\"string\">&quot;Win64&quot;</span> or <span class=\"string\">&quot;IA64&quot;</span>.</span><br><span class=\"line\">  Borland Makefiles            = Generates Borland makefiles.</span><br><span class=\"line\">  NMake Makefiles              = Generates NMake makefiles.</span><br><span class=\"line\">  NMake Makefiles JOM          = Generates JOM makefiles.</span><br><span class=\"line\">  MSYS Makefiles               = Generates MSYS makefiles.</span><br><span class=\"line\">  MinGW Makefiles              = Generates a make file <span class=\"keyword\">for</span> use with</span><br><span class=\"line\">                                 mingw32-make.</span><br><span class=\"line\">  Green Hills MULTI            = Generates Green Hills MULTI files</span><br><span class=\"line\">                                 (experimental, work-in-progress).</span><br><span class=\"line\">  Unix Makefiles               = Generates standard UNIX makefiles.</span><br><span class=\"line\">  Ninja                        = Generates build.ninja files.</span><br><span class=\"line\">  Ninja Multi-Config           = Generates build-&lt;Config&gt;.ninja files.</span><br><span class=\"line\">  Watcom WMake                 = Generates Watcom WMake makefiles.</span><br><span class=\"line\">  CodeBlocks - MinGW Makefiles = Generates CodeBlocks project files.</span><br><span class=\"line\">  CodeBlocks - NMake Makefiles = Generates CodeBlocks project files.</span><br><span class=\"line\">  CodeBlocks - NMake Makefiles JOM</span><br><span class=\"line\">                               = Generates CodeBlocks project files.</span><br><span class=\"line\">  CodeBlocks - Ninja           = Generates CodeBlocks project files.</span><br><span class=\"line\">  CodeBlocks - Unix Makefiles  = Generates CodeBlocks project files.</span><br><span class=\"line\">  CodeLite - MinGW Makefiles   = Generates CodeLite project files.</span><br><span class=\"line\">  CodeLite - NMake Makefiles   = Generates CodeLite project files.</span><br><span class=\"line\">  CodeLite - Ninja             = Generates CodeLite project files.</span><br><span class=\"line\">  CodeLite - Unix Makefiles    = Generates CodeLite project files.</span><br><span class=\"line\">  Eclipse CDT4 - NMake Makefiles</span><br><span class=\"line\">                               = Generates Eclipse CDT 4.0 project files.</span><br><span class=\"line\">  Eclipse CDT4 - MinGW Makefiles</span><br><span class=\"line\">                               = Generates Eclipse CDT 4.0 project files.</span><br><span class=\"line\">  Eclipse CDT4 - Ninja         = Generates Eclipse CDT 4.0 project files.</span><br><span class=\"line\">  Eclipse CDT4 - Unix Makefiles= Generates Eclipse CDT 4.0 project files.</span><br><span class=\"line\">  Kate - MinGW Makefiles       = Generates Kate project files.</span><br><span class=\"line\">  Kate - NMake Makefiles       = Generates Kate project files.</span><br><span class=\"line\">  Kate - Ninja                 = Generates Kate project files.</span><br><span class=\"line\">  Kate - Unix Makefiles        = Generates Kate project files.</span><br><span class=\"line\">  Sublime Text 2 - MinGW Makefiles</span><br><span class=\"line\">                               = Generates Sublime Text 2 project files.</span><br><span class=\"line\">  Sublime Text 2 - NMake Makefiles</span><br><span class=\"line\">                               = Generates Sublime Text 2 project files.</span><br><span class=\"line\">  Sublime Text 2 - Ninja       = Generates Sublime Text 2 project files.</span><br><span class=\"line\">  Sublime Text 2 - Unix Makefiles</span><br><span class=\"line\">                               = Generates Sublime Text 2 project files.</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"具体实施（用-G-切换生成器）\"><a href=\"#具体实施（用-G-切换生成器）\" class=\"headerlink\" title=\"具体实施（用 -G 切换生成器）\"></a>具体实施（用 -G 切换生成器）</h4><ol>\n<li><p>首先，使用以下步骤配置项目:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\"><span class=\"built_in\">mkdir</span> build</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\"><span class=\"built_in\">cd</span> build</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">cmake -G <span class=\"string\">&quot;CodeBlocks - Unix Makefiles&quot;</span> ..</span></span><br></pre></td></tr></table></figure></li>\n</ol>\n<h4 id=\"如何工作\"><a href=\"#如何工作\" class=\"headerlink\" title=\"如何工作\"></a>如何工作</h4><p>与前一个配置相比，每一步的输出没什么变化。每个生成器都有自己的文件集，所以编译步骤的输出和<br>构建目录的内容是不同的：<br>build.ninja 和 rules.ninja ：包含 Ninja 的所有的构建语句和构建规则。<br>CMakeCache.txt ：CMake 会在这个文件中进行缓存，与生成器无关。<br>CMakeFiles ：包含由 CMake 在配置期间生成的临时文件。<br>cmake_install.cmake ：CMake 脚本处理安装规则，并在安装时使用。<br>cmake –build . 将 ninja 命令封装在一个跨平台的接口中。</p>\n<h4 id=\"测试代码\"><a href=\"#测试代码\" class=\"headerlink\" title=\"测试代码\"></a>测试代码</h4><p>C示例：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// hello-world.c</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">char</span> *<span class=\"title function_\">say_hello</span><span class=\"params\">()</span> &#123; <span class=\"keyword\">return</span> <span class=\"string\">&quot;Hello, CMake world!&quot;</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%s\\n&quot;</span>, say_hello());</span><br><span class=\"line\">  <span class=\"keyword\">return</span> EXIT_SUCCESS;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># CMakeLists.txt</span></span><br><span class=\"line\"><span class=\"comment\"># 设置最低 cmake 版本</span></span><br><span class=\"line\"><span class=\"keyword\">cmake_minimum_required</span>(VERSION <span class=\"number\">3.5</span> FATAL_ERROR)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 项目名称和语言</span></span><br><span class=\"line\"><span class=\"keyword\">project</span>(recipe-<span class=\"number\">01</span> LANGUAGES C)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">add_executable</span>(hello-world hello-world.c)</span><br></pre></td></tr></table></figure>\n\n<p>C++示例：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//hello-world.cpp</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;cstdlib&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;string&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">std::string <span class=\"title\">say_hello</span><span class=\"params\">()</span> </span>&#123; <span class=\"keyword\">return</span> std::<span class=\"built_in\">string</span>(<span class=\"string\">&quot;Hello, CMake world!&quot;</span>); &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  std::cout &lt;&lt; <span class=\"built_in\">say_hello</span>() &lt;&lt; std::endl;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> EXIT_SUCCESS;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># CMakeLists.txt</span></span><br><span class=\"line\"><span class=\"comment\"># 设置最低 cmake 版本</span></span><br><span class=\"line\"><span class=\"keyword\">cmake_minimum_required</span>(VERSION <span class=\"number\">3.5</span> FATAL_ERROR)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 项目名称和语言</span></span><br><span class=\"line\"><span class=\"keyword\">project</span>(recipe-<span class=\"number\">01</span> LANGUAGES CXX)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">add_executable</span>(hello-world hello-world.cpp)</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"2-切换生成器\"><a href=\"#2-切换生成器\" class=\"headerlink\" title=\"2.切换生成器\"></a>2.切换生成器</h3><h4 id=\"显示构建器-（cmake-–help）\"><a href=\"#显示构建器-（cmake-–help）\" class=\"headerlink\" title=\"显示构建器 （cmake –help）\"></a>显示构建器 （cmake –help）</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ cmake --<span class=\"built_in\">help</span></span><br><span class=\"line\">...</span><br><span class=\"line\">Generators</span><br><span class=\"line\"></span><br><span class=\"line\">The following generators are available on this platform (* marks default):</span><br><span class=\"line\">* Visual Studio 16 2019        = Generates Visual Studio 2019 project files.</span><br><span class=\"line\">                                 Use -A option to specify architecture.</span><br><span class=\"line\">  Visual Studio 15 2017 [<span class=\"built_in\">arch</span>] = Generates Visual Studio 2017 project files.</span><br><span class=\"line\">                                 Optional [<span class=\"built_in\">arch</span>] can be <span class=\"string\">&quot;Win64&quot;</span> or <span class=\"string\">&quot;ARM&quot;</span>.</span><br><span class=\"line\">  Visual Studio 14 2015 [<span class=\"built_in\">arch</span>] = Generates Visual Studio 2015 project files.</span><br><span class=\"line\">                                 Optional [<span class=\"built_in\">arch</span>] can be <span class=\"string\">&quot;Win64&quot;</span> or <span class=\"string\">&quot;ARM&quot;</span>.</span><br><span class=\"line\">  Visual Studio 12 2013 [<span class=\"built_in\">arch</span>] = Generates Visual Studio 2013 project files.</span><br><span class=\"line\">                                 Optional [<span class=\"built_in\">arch</span>] can be <span class=\"string\">&quot;Win64&quot;</span> or <span class=\"string\">&quot;ARM&quot;</span>.</span><br><span class=\"line\">  Visual Studio 11 2012 [<span class=\"built_in\">arch</span>] = Generates Visual Studio 2012 project files.</span><br><span class=\"line\">                                 Optional [<span class=\"built_in\">arch</span>] can be <span class=\"string\">&quot;Win64&quot;</span> or <span class=\"string\">&quot;ARM&quot;</span>.</span><br><span class=\"line\">  Visual Studio 10 2010 [<span class=\"built_in\">arch</span>] = Generates Visual Studio 2010 project files.</span><br><span class=\"line\">                                 Optional [<span class=\"built_in\">arch</span>] can be <span class=\"string\">&quot;Win64&quot;</span> or <span class=\"string\">&quot;IA64&quot;</span>.</span><br><span class=\"line\">  Visual Studio 9 2008 [<span class=\"built_in\">arch</span>]  = Generates Visual Studio 2008 project files.</span><br><span class=\"line\">                                 Optional [<span class=\"built_in\">arch</span>] can be <span class=\"string\">&quot;Win64&quot;</span> or <span class=\"string\">&quot;IA64&quot;</span>.</span><br><span class=\"line\">  Borland Makefiles            = Generates Borland makefiles.</span><br><span class=\"line\">  NMake Makefiles              = Generates NMake makefiles.</span><br><span class=\"line\">  NMake Makefiles JOM          = Generates JOM makefiles.</span><br><span class=\"line\">  MSYS Makefiles               = Generates MSYS makefiles.</span><br><span class=\"line\">  MinGW Makefiles              = Generates a make file <span class=\"keyword\">for</span> use with</span><br><span class=\"line\">                                 mingw32-make.</span><br><span class=\"line\">  Green Hills MULTI            = Generates Green Hills MULTI files</span><br><span class=\"line\">                                 (experimental, work-in-progress).</span><br><span class=\"line\">  Unix Makefiles               = Generates standard UNIX makefiles.</span><br><span class=\"line\">  Ninja                        = Generates build.ninja files.</span><br><span class=\"line\">  Ninja Multi-Config           = Generates build-&lt;Config&gt;.ninja files.</span><br><span class=\"line\">  Watcom WMake                 = Generates Watcom WMake makefiles.</span><br><span class=\"line\">  CodeBlocks - MinGW Makefiles = Generates CodeBlocks project files.</span><br><span class=\"line\">  CodeBlocks - NMake Makefiles = Generates CodeBlocks project files.</span><br><span class=\"line\">  CodeBlocks - NMake Makefiles JOM</span><br><span class=\"line\">                               = Generates CodeBlocks project files.</span><br><span class=\"line\">  CodeBlocks - Ninja           = Generates CodeBlocks project files.</span><br><span class=\"line\">  CodeBlocks - Unix Makefiles  = Generates CodeBlocks project files.</span><br><span class=\"line\">  CodeLite - MinGW Makefiles   = Generates CodeLite project files.</span><br><span class=\"line\">  CodeLite - NMake Makefiles   = Generates CodeLite project files.</span><br><span class=\"line\">  CodeLite - Ninja             = Generates CodeLite project files.</span><br><span class=\"line\">  CodeLite - Unix Makefiles    = Generates CodeLite project files.</span><br><span class=\"line\">  Eclipse CDT4 - NMake Makefiles</span><br><span class=\"line\">                               = Generates Eclipse CDT 4.0 project files.</span><br><span class=\"line\">  Eclipse CDT4 - MinGW Makefiles</span><br><span class=\"line\">                               = Generates Eclipse CDT 4.0 project files.</span><br><span class=\"line\">  Eclipse CDT4 - Ninja         = Generates Eclipse CDT 4.0 project files.</span><br><span class=\"line\">  Eclipse CDT4 - Unix Makefiles= Generates Eclipse CDT 4.0 project files.</span><br><span class=\"line\">  Kate - MinGW Makefiles       = Generates Kate project files.</span><br><span class=\"line\">  Kate - NMake Makefiles       = Generates Kate project files.</span><br><span class=\"line\">  Kate - Ninja                 = Generates Kate project files.</span><br><span class=\"line\">  Kate - Unix Makefiles        = Generates Kate project files.</span><br><span class=\"line\">  Sublime Text 2 - MinGW Makefiles</span><br><span class=\"line\">                               = Generates Sublime Text 2 project files.</span><br><span class=\"line\">  Sublime Text 2 - NMake Makefiles</span><br><span class=\"line\">                               = Generates Sublime Text 2 project files.</span><br><span class=\"line\">  Sublime Text 2 - Ninja       = Generates Sublime Text 2 project files.</span><br><span class=\"line\">  Sublime Text 2 - Unix Makefiles</span><br><span class=\"line\">                               = Generates Sublime Text 2 project files.</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"具体实施（用-G-切换生成器）\"><a href=\"#具体实施（用-G-切换生成器）\" class=\"headerlink\" title=\"具体实施（用 -G 切换生成器）\"></a>具体实施（用 -G 切换生成器）</h4><ol>\n<li><p>首先，使用以下步骤配置项目:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\"><span class=\"built_in\">mkdir</span> build</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\"><span class=\"built_in\">cd</span> build</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">cmake -G <span class=\"string\">&quot;CodeBlocks - Unix Makefiles&quot;</span> ..</span></span><br></pre></td></tr></table></figure></li>\n</ol>\n<h4 id=\"如何工作\"><a href=\"#如何工作\" class=\"headerlink\" title=\"如何工作\"></a>如何工作</h4><p>与前一个配置相比，每一步的输出没什么变化。每个生成器都有自己的文件集，所以编译步骤的输出和<br>构建目录的内容是不同的：<br>build.ninja 和 rules.ninja ：包含 Ninja 的所有的构建语句和构建规则。<br>CMakeCache.txt ：CMake 会在这个文件中进行缓存，与生成器无关。<br>CMakeFiles ：包含由 CMake 在配置期间生成的临时文件。<br>cmake_install.cmake ：CMake 脚本处理安装规则，并在安装时使用。<br>cmake –build . 将 ninja 命令封装在一个跨平台的接口中。</p>\n<h4 id=\"测试代码\"><a href=\"#测试代码\" class=\"headerlink\" title=\"测试代码\"></a>测试代码</h4><p>C示例：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// hello-world.c</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">char</span> *<span class=\"title function_\">say_hello</span><span class=\"params\">()</span> &#123; <span class=\"keyword\">return</span> <span class=\"string\">&quot;Hello, CMake world!&quot;</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%s\\n&quot;</span>, say_hello());</span><br><span class=\"line\">  <span class=\"keyword\">return</span> EXIT_SUCCESS;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># CMakeLists.txt</span></span><br><span class=\"line\"><span class=\"comment\"># 设置最低 cmake 版本</span></span><br><span class=\"line\"><span class=\"keyword\">cmake_minimum_required</span>(VERSION <span class=\"number\">3.5</span> FATAL_ERROR)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 项目名称和语言</span></span><br><span class=\"line\"><span class=\"keyword\">project</span>(recipe-<span class=\"number\">01</span> LANGUAGES C)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">add_executable</span>(hello-world hello-world.c)</span><br></pre></td></tr></table></figure>\n\n<p>C++示例：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//hello-world.cpp</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;cstdlib&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;string&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">std::string <span class=\"title\">say_hello</span><span class=\"params\">()</span> </span>&#123; <span class=\"keyword\">return</span> std::<span class=\"built_in\">string</span>(<span class=\"string\">&quot;Hello, CMake world!&quot;</span>); &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  std::cout &lt;&lt; <span class=\"built_in\">say_hello</span>() &lt;&lt; std::endl;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> EXIT_SUCCESS;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># CMakeLists.txt</span></span><br><span class=\"line\"><span class=\"comment\"># 设置最低 cmake 版本</span></span><br><span class=\"line\"><span class=\"keyword\">cmake_minimum_required</span>(VERSION <span class=\"number\">3.5</span> FATAL_ERROR)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 项目名称和语言</span></span><br><span class=\"line\"><span class=\"keyword\">project</span>(recipe-<span class=\"number\">01</span> LANGUAGES CXX)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">add_executable</span>(hello-world hello-world.cpp)</span><br></pre></td></tr></table></figure>\n"},{"title":"3.创建代码仓库","author":"连思鑫","date":"2023-03-01T14:48:00.000Z","_content":"# 创建代码仓库\n\n\n这一章简要地带你了解一些最重要的 Git 命令。在这节中，我会向你介绍开始一个新的版本控制项目需要的所有工具，后面的几节包含了你每天都会用到的Git操作。\n\n在这节之后，你应该能够创建一个新的 Git 仓库，缓存你的项目以免丢失，以及查看你项目的历史。\n\n## git init\n\n`git init` 命令创建一个新的 Git 仓库。它用来将已存在但还没有版本控制的项目转换成一个 Git 仓库，或者创建一个空的新仓库。大多数Git命令在未初始化的仓库中都是无法使用的，所以这就是你运行新项目的第一个命令了。\n\n运行 `git init` 命令会在你项目的根目录下创建一个新的 `.git` 目录，其中包含了你项目必需的所有元数据。除了 `.git` 目录之外，已经存在的项目不会被改变（就像 SVN 一样，Git 不强制每个子目录中都有一个 `.git` 目录）。\n\n### 用法\n\n``` shell\ngit init\n```\n\n将当前的目录转换成一个 Git 仓库。它在当前的目录下增加了一个 `.git` 目录，于是就可以开始记录项目版本了。\n\n``` shell\ngit init <directory>\n```\n\n在指定目录创建一个空的 Git 仓库。运行这个命令会创建一个名为 `directory`，只包含 `.git` 子目录的空目录。\n\n``` shell\ngit init --bare <directory>\n```\n\n初始化一个裸的 Git 仓库，但是忽略工作目录。共享的仓库应该总是用 `--bare` 标记创建（见下面的讨论）。一般来说，用 `—bare` 标记初始化的仓库以 `.git` 结尾。比如，一个叫`my-project`的仓库，它的空版本应该保存在 `my-project.git` 目录下。\n\n### 讨论\n\n和 SVN 相比，`git init` 命令是一个创建新的版本控制项目非常简单的途径。Git 不需要你创建仓库，导入文件，检查正在修改的拷贝。你只需要 `cd` 到你的项目目录下，运行 `git init`，你就有了一个功能强大的 Git 仓库。\n\n但是，对大多数项目来说，`git init` 只需要在创建中央仓库时执行一次——开发者通常不会使用 `git init` 来创建他们的本地仓库。他们往往使用 `git clone` 来将已存在的仓库拷贝到他们的机器中去。\n\n#### 裸仓库\n\n`-—bare` 标记创建了一个没有工作目录的仓库，这样我们在仓库中更改文件并且提交了。中央仓库应该总是创建成裸仓库，因为向非裸仓库推送分支有可能会覆盖已有的代码变动。将`-—bare`看成是用来将仓库标记为储存设施，而不是一个开发环境。也就是说，对于所有的 Git 工作流，中央仓库是裸仓库，开发者的本地仓库是非裸仓库。\n\n![](https://www.atlassian.com/dam/jcr:88f08a3d-f34e-4c8e-974c-a01f25b2eca1/01.svg)\n\n### 例子\n\n因为 `git clone` 创建项目的本地拷贝更为方便，`git init` 最常见的使用情景就是用于创建中央仓库：\n\n``` shell\nssh <user>@<host>\n\ncd path/above/repo\n\ngit init --bare my-project.git\n```\n\n首先，你用SSH连入存放中央仓库的服务器。然后，来到任何你想存放项目的地方，最后，使用 `-—bare` 标记来创建一个中央存储仓库。开发者会将 `my-project.git` 克隆到本地的开发环境中。\n\n## git clone\n\n`git clone` 命令拷贝整个 Git 仓库。这个命令就像 `svn checkout` 一样，除了「工作副本」是一个完备的Git仓库——它包含自己的历史，管理自己的文件，以及环境和原仓库完全隔离。\n\n为了方便起见，`clone` 自动创建了一个名为 `origin` 的远程连接，指向原有仓库。这让和中央仓库之间的交互更加简单。\n\n### 用法\n\n``` shell\ngit clone <repo>\n```\n\n将位于 `<repo>` 的仓库克隆到本地机器。原仓库可以在本地文件系统中，或是通过 HTTP 或 SSH 连接的远程机器。\n\n``` shell\ngit clone <repo> <directory>\n```\n\n将位于 `<repo>` 的仓库克隆到本地机器上的 `<directory>` 目录。\n\n### 讨论\n\n如果项目在远程仓库已经设置完毕，`git clone` 是用户获取开发副本最常见的方式。和  `git init`相似，`clone` 通常也是一次性的操作——只要开发者获得了一份工作副本，所有版本控制操作和协作管理都是在本地仓库中完成的。\n\n#### 仓库间协作\n\n这一点很重要，你要理解 Git 中「工作副本」的概念和 SVN 仓库 check out 下来的「工作副本」是很不一样的。和 SVN 不同的是，Git 不会区分工作副本和中央仓库——它们都是功能完备的 Git 仓库。\n\n这就使得 Git 的协作和 SVN 截然不同。SVN 依赖于中央仓库和工作副本之间的关系，而 Git 协作模型是基于仓库和仓库之间的交互的。相对于 SVN 的提交流程，你可以在 Git 仓库之间 `push` 或 `pull` 提交。\n\n![](https://www.atlassian.com/dam/jcr:e5228129-76b1-4b2c-8f10-af789f2ea6c0/03.svg)\n\n![](https://www.atlassian.com/dam/jcr:5d68ce55-59a7-4840-a896-eb2014a9f17b/02.svg)\n\n当然，你也完全可以给予某个特定的仓库一些特殊的含义。比如，指定某个 Git 仓库为中央仓库，你就可以用 Git 进行中央化的工作流。重点是，这是通过约定实现的，而不是写死在版本控制系统本身。\n\n### 例子\n\n下面这个例子演示用 SSH 用户名 john 连接到 example.com，获取远程服务器上中央仓库的本地副本：\n\n``` shell\ngit clone ssh://john@example.com/path/to/my-project.git\n\ncd my-project\n\n# 开始工作\n```\n\n第一行命令在本地机器的 `my-project` 目录下初始化了一个新的 Git 仓库，并且导入了中央仓库中的文件。接下来，你 `cd` 到项目目录，开始编辑文件、缓存提交、和其它仓库交互。同时注意 `.git` 拓展名克隆时会被去除。它表明了本地副本的非裸状态。\n\n``` shell\ngit config\n```\n\n`git config` 命令允许你在命令行中配置你的 Git 安装（或是一个独立仓库）。这个命令定义了所有配置，从用户信息到仓库行为等等。一些常见的配置命令如下所列。\n\n### 用法\n\n``` shell\ngit config user.name <name>\n```\n\n定义当前仓库所有提交使用的作者姓名。通常来说，你希望使用 `--global` 标记设置当前用户的配置项。\n\n``` sh\ngit config --global user.name <name>\n```\n\n定义当前用户所有提交使用的作者姓名。\n\n``` sh\ngit config --global user.email <email>\n```\n\n定义当前用户所有提交使用的作者邮箱。\n\n``` sh\ngit config --global alias.<alias-name> <git-command>\n```\n\n为Git命令创建一个快捷方式（别名）。\n\n``` sh\ngit config --system core.editor <editor>\n```\n\n定义当前机器所有用户使用命令时用到的文本编辑器，如 `git commit`。`<editor>` 参数用编辑器的启动命令（如 vi）替代。\n\n``` sh\ngit config --global --edit\n```\n\n用文本编辑器打开全局配置文件，手动编辑。\n\n### 讨论\n\n所有配置项都储存在纯文本文件中，所以 `git config` 命令其实只是一个提供便捷的命令行接口。通常，你只需要在新机器上配置一次 Git 安装，以及，你通常会想要使用 `--global` 标记。\n\nGit 将配置项保存在三个单独的文件中，允许你分别对单个仓库、用户和整个系统设置。\n\n- <repo>/.git/config – 特定仓库的设置。\n\n\n- ~/.gitconfig – 特定用户的设置。这也是 `--global` 标记的设置项存放的位置。\n\n\n- $(prefix)/etc/gitconfig – 系统层面的设置。\n\n当这些文件中的配置项冲突时，本地仓库设置覆盖用户设置，用户设置覆盖系统设置。如果你打开期中一份文件，你会看到下面这些：\n\n``` sh\n[user]\n\nname = John Smith\n\nemail = john@example.com\n\n[alias]\n\nst = status\n\nco = checkout\n\nbr = branch\n\nup = rebase\n\nci = commit\n\n[core]\n\neditor = vim\n```\n\n你可以用 `git config` 手动编辑这些值。\n\n### 例子\n\n你在安装 Git 之后想要做的第一件事是告诉它你的名字和邮箱，个性化一些默认设置。一般初始的设置过程看上去是这样的：\n\n``` sh\n# 告诉Git你是谁\n\ngit config --global user.name \"John Smith\"\n\ngit config --global user.email john@example.com\n\n# 选择你喜欢的文本编辑器\n\ngit config --global core.editor vim\n\n# 添加一些快捷方式(别名)\n\ngit config --global alias.st status\n\ngit config --global alias.co checkout\n\ngit config --global alias.br branch\n\ngit config --global alias.up rebase\n\ngit config --global alias.ci commit\n```\n\n它会生成上一节中所说的 `~/.gitconfig` 文件。\n\n> 这篇教程来源于[**「git-recipes」**](https://github.com/geeeeeeeeek/git-recipes/)","source":"_posts/3-创建代码仓库.md","raw":"title: 3.创建代码仓库\nauthor: 连思鑫\ntags:\n  - git\ncategories:\n  - ..\n  - git\n  - ''\ndate: 2023-03-01 22:48:00\n---\n# 创建代码仓库\n\n\n这一章简要地带你了解一些最重要的 Git 命令。在这节中，我会向你介绍开始一个新的版本控制项目需要的所有工具，后面的几节包含了你每天都会用到的Git操作。\n\n在这节之后，你应该能够创建一个新的 Git 仓库，缓存你的项目以免丢失，以及查看你项目的历史。\n\n## git init\n\n`git init` 命令创建一个新的 Git 仓库。它用来将已存在但还没有版本控制的项目转换成一个 Git 仓库，或者创建一个空的新仓库。大多数Git命令在未初始化的仓库中都是无法使用的，所以这就是你运行新项目的第一个命令了。\n\n运行 `git init` 命令会在你项目的根目录下创建一个新的 `.git` 目录，其中包含了你项目必需的所有元数据。除了 `.git` 目录之外，已经存在的项目不会被改变（就像 SVN 一样，Git 不强制每个子目录中都有一个 `.git` 目录）。\n\n### 用法\n\n``` shell\ngit init\n```\n\n将当前的目录转换成一个 Git 仓库。它在当前的目录下增加了一个 `.git` 目录，于是就可以开始记录项目版本了。\n\n``` shell\ngit init <directory>\n```\n\n在指定目录创建一个空的 Git 仓库。运行这个命令会创建一个名为 `directory`，只包含 `.git` 子目录的空目录。\n\n``` shell\ngit init --bare <directory>\n```\n\n初始化一个裸的 Git 仓库，但是忽略工作目录。共享的仓库应该总是用 `--bare` 标记创建（见下面的讨论）。一般来说，用 `—bare` 标记初始化的仓库以 `.git` 结尾。比如，一个叫`my-project`的仓库，它的空版本应该保存在 `my-project.git` 目录下。\n\n### 讨论\n\n和 SVN 相比，`git init` 命令是一个创建新的版本控制项目非常简单的途径。Git 不需要你创建仓库，导入文件，检查正在修改的拷贝。你只需要 `cd` 到你的项目目录下，运行 `git init`，你就有了一个功能强大的 Git 仓库。\n\n但是，对大多数项目来说，`git init` 只需要在创建中央仓库时执行一次——开发者通常不会使用 `git init` 来创建他们的本地仓库。他们往往使用 `git clone` 来将已存在的仓库拷贝到他们的机器中去。\n\n#### 裸仓库\n\n`-—bare` 标记创建了一个没有工作目录的仓库，这样我们在仓库中更改文件并且提交了。中央仓库应该总是创建成裸仓库，因为向非裸仓库推送分支有可能会覆盖已有的代码变动。将`-—bare`看成是用来将仓库标记为储存设施，而不是一个开发环境。也就是说，对于所有的 Git 工作流，中央仓库是裸仓库，开发者的本地仓库是非裸仓库。\n\n![](https://www.atlassian.com/dam/jcr:88f08a3d-f34e-4c8e-974c-a01f25b2eca1/01.svg)\n\n### 例子\n\n因为 `git clone` 创建项目的本地拷贝更为方便，`git init` 最常见的使用情景就是用于创建中央仓库：\n\n``` shell\nssh <user>@<host>\n\ncd path/above/repo\n\ngit init --bare my-project.git\n```\n\n首先，你用SSH连入存放中央仓库的服务器。然后，来到任何你想存放项目的地方，最后，使用 `-—bare` 标记来创建一个中央存储仓库。开发者会将 `my-project.git` 克隆到本地的开发环境中。\n\n## git clone\n\n`git clone` 命令拷贝整个 Git 仓库。这个命令就像 `svn checkout` 一样，除了「工作副本」是一个完备的Git仓库——它包含自己的历史，管理自己的文件，以及环境和原仓库完全隔离。\n\n为了方便起见，`clone` 自动创建了一个名为 `origin` 的远程连接，指向原有仓库。这让和中央仓库之间的交互更加简单。\n\n### 用法\n\n``` shell\ngit clone <repo>\n```\n\n将位于 `<repo>` 的仓库克隆到本地机器。原仓库可以在本地文件系统中，或是通过 HTTP 或 SSH 连接的远程机器。\n\n``` shell\ngit clone <repo> <directory>\n```\n\n将位于 `<repo>` 的仓库克隆到本地机器上的 `<directory>` 目录。\n\n### 讨论\n\n如果项目在远程仓库已经设置完毕，`git clone` 是用户获取开发副本最常见的方式。和  `git init`相似，`clone` 通常也是一次性的操作——只要开发者获得了一份工作副本，所有版本控制操作和协作管理都是在本地仓库中完成的。\n\n#### 仓库间协作\n\n这一点很重要，你要理解 Git 中「工作副本」的概念和 SVN 仓库 check out 下来的「工作副本」是很不一样的。和 SVN 不同的是，Git 不会区分工作副本和中央仓库——它们都是功能完备的 Git 仓库。\n\n这就使得 Git 的协作和 SVN 截然不同。SVN 依赖于中央仓库和工作副本之间的关系，而 Git 协作模型是基于仓库和仓库之间的交互的。相对于 SVN 的提交流程，你可以在 Git 仓库之间 `push` 或 `pull` 提交。\n\n![](https://www.atlassian.com/dam/jcr:e5228129-76b1-4b2c-8f10-af789f2ea6c0/03.svg)\n\n![](https://www.atlassian.com/dam/jcr:5d68ce55-59a7-4840-a896-eb2014a9f17b/02.svg)\n\n当然，你也完全可以给予某个特定的仓库一些特殊的含义。比如，指定某个 Git 仓库为中央仓库，你就可以用 Git 进行中央化的工作流。重点是，这是通过约定实现的，而不是写死在版本控制系统本身。\n\n### 例子\n\n下面这个例子演示用 SSH 用户名 john 连接到 example.com，获取远程服务器上中央仓库的本地副本：\n\n``` shell\ngit clone ssh://john@example.com/path/to/my-project.git\n\ncd my-project\n\n# 开始工作\n```\n\n第一行命令在本地机器的 `my-project` 目录下初始化了一个新的 Git 仓库，并且导入了中央仓库中的文件。接下来，你 `cd` 到项目目录，开始编辑文件、缓存提交、和其它仓库交互。同时注意 `.git` 拓展名克隆时会被去除。它表明了本地副本的非裸状态。\n\n``` shell\ngit config\n```\n\n`git config` 命令允许你在命令行中配置你的 Git 安装（或是一个独立仓库）。这个命令定义了所有配置，从用户信息到仓库行为等等。一些常见的配置命令如下所列。\n\n### 用法\n\n``` shell\ngit config user.name <name>\n```\n\n定义当前仓库所有提交使用的作者姓名。通常来说，你希望使用 `--global` 标记设置当前用户的配置项。\n\n``` sh\ngit config --global user.name <name>\n```\n\n定义当前用户所有提交使用的作者姓名。\n\n``` sh\ngit config --global user.email <email>\n```\n\n定义当前用户所有提交使用的作者邮箱。\n\n``` sh\ngit config --global alias.<alias-name> <git-command>\n```\n\n为Git命令创建一个快捷方式（别名）。\n\n``` sh\ngit config --system core.editor <editor>\n```\n\n定义当前机器所有用户使用命令时用到的文本编辑器，如 `git commit`。`<editor>` 参数用编辑器的启动命令（如 vi）替代。\n\n``` sh\ngit config --global --edit\n```\n\n用文本编辑器打开全局配置文件，手动编辑。\n\n### 讨论\n\n所有配置项都储存在纯文本文件中，所以 `git config` 命令其实只是一个提供便捷的命令行接口。通常，你只需要在新机器上配置一次 Git 安装，以及，你通常会想要使用 `--global` 标记。\n\nGit 将配置项保存在三个单独的文件中，允许你分别对单个仓库、用户和整个系统设置。\n\n- <repo>/.git/config – 特定仓库的设置。\n\n\n- ~/.gitconfig – 特定用户的设置。这也是 `--global` 标记的设置项存放的位置。\n\n\n- $(prefix)/etc/gitconfig – 系统层面的设置。\n\n当这些文件中的配置项冲突时，本地仓库设置覆盖用户设置，用户设置覆盖系统设置。如果你打开期中一份文件，你会看到下面这些：\n\n``` sh\n[user]\n\nname = John Smith\n\nemail = john@example.com\n\n[alias]\n\nst = status\n\nco = checkout\n\nbr = branch\n\nup = rebase\n\nci = commit\n\n[core]\n\neditor = vim\n```\n\n你可以用 `git config` 手动编辑这些值。\n\n### 例子\n\n你在安装 Git 之后想要做的第一件事是告诉它你的名字和邮箱，个性化一些默认设置。一般初始的设置过程看上去是这样的：\n\n``` sh\n# 告诉Git你是谁\n\ngit config --global user.name \"John Smith\"\n\ngit config --global user.email john@example.com\n\n# 选择你喜欢的文本编辑器\n\ngit config --global core.editor vim\n\n# 添加一些快捷方式(别名)\n\ngit config --global alias.st status\n\ngit config --global alias.co checkout\n\ngit config --global alias.br branch\n\ngit config --global alias.up rebase\n\ngit config --global alias.ci commit\n```\n\n它会生成上一节中所说的 `~/.gitconfig` 文件。\n\n> 这篇教程来源于[**「git-recipes」**](https://github.com/geeeeeeeeek/git-recipes/)","slug":"3-创建代码仓库","published":1,"updated":"2023-03-01T14:50:01.147Z","_id":"clifr2v1k000914uog6848zo1","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"创建代码仓库\"><a href=\"#创建代码仓库\" class=\"headerlink\" title=\"创建代码仓库\"></a>创建代码仓库</h1><p>这一章简要地带你了解一些最重要的 Git 命令。在这节中，我会向你介绍开始一个新的版本控制项目需要的所有工具，后面的几节包含了你每天都会用到的Git操作。</p>\n<p>在这节之后，你应该能够创建一个新的 Git 仓库，缓存你的项目以免丢失，以及查看你项目的历史。</p>\n<h2 id=\"git-init\"><a href=\"#git-init\" class=\"headerlink\" title=\"git init\"></a>git init</h2><p><code>git init</code> 命令创建一个新的 Git 仓库。它用来将已存在但还没有版本控制的项目转换成一个 Git 仓库，或者创建一个空的新仓库。大多数Git命令在未初始化的仓库中都是无法使用的，所以这就是你运行新项目的第一个命令了。</p>\n<p>运行 <code>git init</code> 命令会在你项目的根目录下创建一个新的 <code>.git</code> 目录，其中包含了你项目必需的所有元数据。除了 <code>.git</code> 目录之外，已经存在的项目不会被改变（就像 SVN 一样，Git 不强制每个子目录中都有一个 <code>.git</code> 目录）。</p>\n<h3 id=\"用法\"><a href=\"#用法\" class=\"headerlink\" title=\"用法\"></a>用法</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git init</span><br></pre></td></tr></table></figure>\n\n<p>将当前的目录转换成一个 Git 仓库。它在当前的目录下增加了一个 <code>.git</code> 目录，于是就可以开始记录项目版本了。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git init &lt;directory&gt;</span><br></pre></td></tr></table></figure>\n\n<p>在指定目录创建一个空的 Git 仓库。运行这个命令会创建一个名为 <code>directory</code>，只包含 <code>.git</code> 子目录的空目录。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git init --bare &lt;directory&gt;</span><br></pre></td></tr></table></figure>\n\n<p>初始化一个裸的 Git 仓库，但是忽略工作目录。共享的仓库应该总是用 <code>--bare</code> 标记创建（见下面的讨论）。一般来说，用 <code>—bare</code> 标记初始化的仓库以 <code>.git</code> 结尾。比如，一个叫<code>my-project</code>的仓库，它的空版本应该保存在 <code>my-project.git</code> 目录下。</p>\n<h3 id=\"讨论\"><a href=\"#讨论\" class=\"headerlink\" title=\"讨论\"></a>讨论</h3><p>和 SVN 相比，<code>git init</code> 命令是一个创建新的版本控制项目非常简单的途径。Git 不需要你创建仓库，导入文件，检查正在修改的拷贝。你只需要 <code>cd</code> 到你的项目目录下，运行 <code>git init</code>，你就有了一个功能强大的 Git 仓库。</p>\n<p>但是，对大多数项目来说，<code>git init</code> 只需要在创建中央仓库时执行一次——开发者通常不会使用 <code>git init</code> 来创建他们的本地仓库。他们往往使用 <code>git clone</code> 来将已存在的仓库拷贝到他们的机器中去。</p>\n<h4 id=\"裸仓库\"><a href=\"#裸仓库\" class=\"headerlink\" title=\"裸仓库\"></a>裸仓库</h4><p><code>-—bare</code> 标记创建了一个没有工作目录的仓库，这样我们在仓库中更改文件并且提交了。中央仓库应该总是创建成裸仓库，因为向非裸仓库推送分支有可能会覆盖已有的代码变动。将<code>-—bare</code>看成是用来将仓库标记为储存设施，而不是一个开发环境。也就是说，对于所有的 Git 工作流，中央仓库是裸仓库，开发者的本地仓库是非裸仓库。</p>\n<p><img src=\"https://www.atlassian.com/dam/jcr:88f08a3d-f34e-4c8e-974c-a01f25b2eca1/01.svg\"></p>\n<h3 id=\"例子\"><a href=\"#例子\" class=\"headerlink\" title=\"例子\"></a>例子</h3><p>因为 <code>git clone</code> 创建项目的本地拷贝更为方便，<code>git init</code> 最常见的使用情景就是用于创建中央仓库：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh &lt;user&gt;@&lt;host&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">cd path/above/repo</span><br><span class=\"line\"></span><br><span class=\"line\">git init --bare my-project.git</span><br></pre></td></tr></table></figure>\n\n<p>首先，你用SSH连入存放中央仓库的服务器。然后，来到任何你想存放项目的地方，最后，使用 <code>-—bare</code> 标记来创建一个中央存储仓库。开发者会将 <code>my-project.git</code> 克隆到本地的开发环境中。</p>\n<h2 id=\"git-clone\"><a href=\"#git-clone\" class=\"headerlink\" title=\"git clone\"></a>git clone</h2><p><code>git clone</code> 命令拷贝整个 Git 仓库。这个命令就像 <code>svn checkout</code> 一样，除了「工作副本」是一个完备的Git仓库——它包含自己的历史，管理自己的文件，以及环境和原仓库完全隔离。</p>\n<p>为了方便起见，<code>clone</code> 自动创建了一个名为 <code>origin</code> 的远程连接，指向原有仓库。这让和中央仓库之间的交互更加简单。</p>\n<h3 id=\"用法-1\"><a href=\"#用法-1\" class=\"headerlink\" title=\"用法\"></a>用法</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone &lt;repo&gt;</span><br></pre></td></tr></table></figure>\n\n<p>将位于 <code>&lt;repo&gt;</code> 的仓库克隆到本地机器。原仓库可以在本地文件系统中，或是通过 HTTP 或 SSH 连接的远程机器。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone &lt;repo&gt; &lt;directory&gt;</span><br></pre></td></tr></table></figure>\n\n<p>将位于 <code>&lt;repo&gt;</code> 的仓库克隆到本地机器上的 <code>&lt;directory&gt;</code> 目录。</p>\n<h3 id=\"讨论-1\"><a href=\"#讨论-1\" class=\"headerlink\" title=\"讨论\"></a>讨论</h3><p>如果项目在远程仓库已经设置完毕，<code>git clone</code> 是用户获取开发副本最常见的方式。和  <code>git init</code>相似，<code>clone</code> 通常也是一次性的操作——只要开发者获得了一份工作副本，所有版本控制操作和协作管理都是在本地仓库中完成的。</p>\n<h4 id=\"仓库间协作\"><a href=\"#仓库间协作\" class=\"headerlink\" title=\"仓库间协作\"></a>仓库间协作</h4><p>这一点很重要，你要理解 Git 中「工作副本」的概念和 SVN 仓库 check out 下来的「工作副本」是很不一样的。和 SVN 不同的是，Git 不会区分工作副本和中央仓库——它们都是功能完备的 Git 仓库。</p>\n<p>这就使得 Git 的协作和 SVN 截然不同。SVN 依赖于中央仓库和工作副本之间的关系，而 Git 协作模型是基于仓库和仓库之间的交互的。相对于 SVN 的提交流程，你可以在 Git 仓库之间 <code>push</code> 或 <code>pull</code> 提交。</p>\n<p><img src=\"https://www.atlassian.com/dam/jcr:e5228129-76b1-4b2c-8f10-af789f2ea6c0/03.svg\"></p>\n<p><img src=\"https://www.atlassian.com/dam/jcr:5d68ce55-59a7-4840-a896-eb2014a9f17b/02.svg\"></p>\n<p>当然，你也完全可以给予某个特定的仓库一些特殊的含义。比如，指定某个 Git 仓库为中央仓库，你就可以用 Git 进行中央化的工作流。重点是，这是通过约定实现的，而不是写死在版本控制系统本身。</p>\n<h3 id=\"例子-1\"><a href=\"#例子-1\" class=\"headerlink\" title=\"例子\"></a>例子</h3><p>下面这个例子演示用 SSH 用户名 john 连接到 example.com，获取远程服务器上中央仓库的本地副本：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone ssh://john@example.com/path/to/my-project.git</span><br><span class=\"line\"></span><br><span class=\"line\">cd my-project</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">开始工作</span></span><br></pre></td></tr></table></figure>\n\n<p>第一行命令在本地机器的 <code>my-project</code> 目录下初始化了一个新的 Git 仓库，并且导入了中央仓库中的文件。接下来，你 <code>cd</code> 到项目目录，开始编辑文件、缓存提交、和其它仓库交互。同时注意 <code>.git</code> 拓展名克隆时会被去除。它表明了本地副本的非裸状态。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config</span><br></pre></td></tr></table></figure>\n\n<p><code>git config</code> 命令允许你在命令行中配置你的 Git 安装（或是一个独立仓库）。这个命令定义了所有配置，从用户信息到仓库行为等等。一些常见的配置命令如下所列。</p>\n<h3 id=\"用法-2\"><a href=\"#用法-2\" class=\"headerlink\" title=\"用法\"></a>用法</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config user.name &lt;name&gt;</span><br></pre></td></tr></table></figure>\n\n<p>定义当前仓库所有提交使用的作者姓名。通常来说，你希望使用 <code>--global</code> 标记设置当前用户的配置项。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global user.name &lt;name&gt;</span><br></pre></td></tr></table></figure>\n\n<p>定义当前用户所有提交使用的作者姓名。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global user.email &lt;email&gt;</span><br></pre></td></tr></table></figure>\n\n<p>定义当前用户所有提交使用的作者邮箱。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global <span class=\"built_in\">alias</span>.&lt;alias-name&gt; &lt;git-command&gt;</span><br></pre></td></tr></table></figure>\n\n<p>为Git命令创建一个快捷方式（别名）。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --system core.editor &lt;editor&gt;</span><br></pre></td></tr></table></figure>\n\n<p>定义当前机器所有用户使用命令时用到的文本编辑器，如 <code>git commit</code>。<code>&lt;editor&gt;</code> 参数用编辑器的启动命令（如 vi）替代。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global --edit</span><br></pre></td></tr></table></figure>\n\n<p>用文本编辑器打开全局配置文件，手动编辑。</p>\n<h3 id=\"讨论-2\"><a href=\"#讨论-2\" class=\"headerlink\" title=\"讨论\"></a>讨论</h3><p>所有配置项都储存在纯文本文件中，所以 <code>git config</code> 命令其实只是一个提供便捷的命令行接口。通常，你只需要在新机器上配置一次 Git 安装，以及，你通常会想要使用 <code>--global</code> 标记。</p>\n<p>Git 将配置项保存在三个单独的文件中，允许你分别对单个仓库、用户和整个系统设置。</p>\n<ul>\n<li><repo>/.git/config – 特定仓库的设置。</li>\n</ul>\n<ul>\n<li>~/.gitconfig – 特定用户的设置。这也是 <code>--global</code> 标记的设置项存放的位置。</li>\n</ul>\n<ul>\n<li>$(prefix)/etc/gitconfig – 系统层面的设置。</li>\n</ul>\n<p>当这些文件中的配置项冲突时，本地仓库设置覆盖用户设置，用户设置覆盖系统设置。如果你打开期中一份文件，你会看到下面这些：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[user]</span><br><span class=\"line\"></span><br><span class=\"line\">name = John Smith</span><br><span class=\"line\"></span><br><span class=\"line\">email = john@example.com</span><br><span class=\"line\"></span><br><span class=\"line\">[<span class=\"built_in\">alias</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">st = status</span><br><span class=\"line\"></span><br><span class=\"line\">co = checkout</span><br><span class=\"line\"></span><br><span class=\"line\">br = branch</span><br><span class=\"line\"></span><br><span class=\"line\">up = rebase</span><br><span class=\"line\"></span><br><span class=\"line\">ci = commit</span><br><span class=\"line\"></span><br><span class=\"line\">[core]</span><br><span class=\"line\"></span><br><span class=\"line\">editor = vim</span><br></pre></td></tr></table></figure>\n\n<p>你可以用 <code>git config</code> 手动编辑这些值。</p>\n<h3 id=\"例子-2\"><a href=\"#例子-2\" class=\"headerlink\" title=\"例子\"></a>例子</h3><p>你在安装 Git 之后想要做的第一件事是告诉它你的名字和邮箱，个性化一些默认设置。一般初始的设置过程看上去是这样的：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 告诉Git你是谁</span></span><br><span class=\"line\"></span><br><span class=\"line\">git config --global user.name <span class=\"string\">&quot;John Smith&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">git config --global user.email john@example.com</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 选择你喜欢的文本编辑器</span></span><br><span class=\"line\"></span><br><span class=\"line\">git config --global core.editor vim</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 添加一些快捷方式(别名)</span></span><br><span class=\"line\"></span><br><span class=\"line\">git config --global alias.st status</span><br><span class=\"line\"></span><br><span class=\"line\">git config --global alias.co checkout</span><br><span class=\"line\"></span><br><span class=\"line\">git config --global alias.br branch</span><br><span class=\"line\"></span><br><span class=\"line\">git config --global alias.up rebase</span><br><span class=\"line\"></span><br><span class=\"line\">git config --global alias.ci commit</span><br></pre></td></tr></table></figure>\n\n<p>它会生成上一节中所说的 <code>~/.gitconfig</code> 文件。</p>\n<blockquote>\n<p>这篇教程来源于<a href=\"https://github.com/geeeeeeeeek/git-recipes/\"><strong>「git-recipes」</strong></a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"创建代码仓库\"><a href=\"#创建代码仓库\" class=\"headerlink\" title=\"创建代码仓库\"></a>创建代码仓库</h1><p>这一章简要地带你了解一些最重要的 Git 命令。在这节中，我会向你介绍开始一个新的版本控制项目需要的所有工具，后面的几节包含了你每天都会用到的Git操作。</p>\n<p>在这节之后，你应该能够创建一个新的 Git 仓库，缓存你的项目以免丢失，以及查看你项目的历史。</p>\n<h2 id=\"git-init\"><a href=\"#git-init\" class=\"headerlink\" title=\"git init\"></a>git init</h2><p><code>git init</code> 命令创建一个新的 Git 仓库。它用来将已存在但还没有版本控制的项目转换成一个 Git 仓库，或者创建一个空的新仓库。大多数Git命令在未初始化的仓库中都是无法使用的，所以这就是你运行新项目的第一个命令了。</p>\n<p>运行 <code>git init</code> 命令会在你项目的根目录下创建一个新的 <code>.git</code> 目录，其中包含了你项目必需的所有元数据。除了 <code>.git</code> 目录之外，已经存在的项目不会被改变（就像 SVN 一样，Git 不强制每个子目录中都有一个 <code>.git</code> 目录）。</p>\n<h3 id=\"用法\"><a href=\"#用法\" class=\"headerlink\" title=\"用法\"></a>用法</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git init</span><br></pre></td></tr></table></figure>\n\n<p>将当前的目录转换成一个 Git 仓库。它在当前的目录下增加了一个 <code>.git</code> 目录，于是就可以开始记录项目版本了。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git init &lt;directory&gt;</span><br></pre></td></tr></table></figure>\n\n<p>在指定目录创建一个空的 Git 仓库。运行这个命令会创建一个名为 <code>directory</code>，只包含 <code>.git</code> 子目录的空目录。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git init --bare &lt;directory&gt;</span><br></pre></td></tr></table></figure>\n\n<p>初始化一个裸的 Git 仓库，但是忽略工作目录。共享的仓库应该总是用 <code>--bare</code> 标记创建（见下面的讨论）。一般来说，用 <code>—bare</code> 标记初始化的仓库以 <code>.git</code> 结尾。比如，一个叫<code>my-project</code>的仓库，它的空版本应该保存在 <code>my-project.git</code> 目录下。</p>\n<h3 id=\"讨论\"><a href=\"#讨论\" class=\"headerlink\" title=\"讨论\"></a>讨论</h3><p>和 SVN 相比，<code>git init</code> 命令是一个创建新的版本控制项目非常简单的途径。Git 不需要你创建仓库，导入文件，检查正在修改的拷贝。你只需要 <code>cd</code> 到你的项目目录下，运行 <code>git init</code>，你就有了一个功能强大的 Git 仓库。</p>\n<p>但是，对大多数项目来说，<code>git init</code> 只需要在创建中央仓库时执行一次——开发者通常不会使用 <code>git init</code> 来创建他们的本地仓库。他们往往使用 <code>git clone</code> 来将已存在的仓库拷贝到他们的机器中去。</p>\n<h4 id=\"裸仓库\"><a href=\"#裸仓库\" class=\"headerlink\" title=\"裸仓库\"></a>裸仓库</h4><p><code>-—bare</code> 标记创建了一个没有工作目录的仓库，这样我们在仓库中更改文件并且提交了。中央仓库应该总是创建成裸仓库，因为向非裸仓库推送分支有可能会覆盖已有的代码变动。将<code>-—bare</code>看成是用来将仓库标记为储存设施，而不是一个开发环境。也就是说，对于所有的 Git 工作流，中央仓库是裸仓库，开发者的本地仓库是非裸仓库。</p>\n<p><img src=\"https://www.atlassian.com/dam/jcr:88f08a3d-f34e-4c8e-974c-a01f25b2eca1/01.svg\"></p>\n<h3 id=\"例子\"><a href=\"#例子\" class=\"headerlink\" title=\"例子\"></a>例子</h3><p>因为 <code>git clone</code> 创建项目的本地拷贝更为方便，<code>git init</code> 最常见的使用情景就是用于创建中央仓库：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh &lt;user&gt;@&lt;host&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">cd path/above/repo</span><br><span class=\"line\"></span><br><span class=\"line\">git init --bare my-project.git</span><br></pre></td></tr></table></figure>\n\n<p>首先，你用SSH连入存放中央仓库的服务器。然后，来到任何你想存放项目的地方，最后，使用 <code>-—bare</code> 标记来创建一个中央存储仓库。开发者会将 <code>my-project.git</code> 克隆到本地的开发环境中。</p>\n<h2 id=\"git-clone\"><a href=\"#git-clone\" class=\"headerlink\" title=\"git clone\"></a>git clone</h2><p><code>git clone</code> 命令拷贝整个 Git 仓库。这个命令就像 <code>svn checkout</code> 一样，除了「工作副本」是一个完备的Git仓库——它包含自己的历史，管理自己的文件，以及环境和原仓库完全隔离。</p>\n<p>为了方便起见，<code>clone</code> 自动创建了一个名为 <code>origin</code> 的远程连接，指向原有仓库。这让和中央仓库之间的交互更加简单。</p>\n<h3 id=\"用法-1\"><a href=\"#用法-1\" class=\"headerlink\" title=\"用法\"></a>用法</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone &lt;repo&gt;</span><br></pre></td></tr></table></figure>\n\n<p>将位于 <code>&lt;repo&gt;</code> 的仓库克隆到本地机器。原仓库可以在本地文件系统中，或是通过 HTTP 或 SSH 连接的远程机器。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone &lt;repo&gt; &lt;directory&gt;</span><br></pre></td></tr></table></figure>\n\n<p>将位于 <code>&lt;repo&gt;</code> 的仓库克隆到本地机器上的 <code>&lt;directory&gt;</code> 目录。</p>\n<h3 id=\"讨论-1\"><a href=\"#讨论-1\" class=\"headerlink\" title=\"讨论\"></a>讨论</h3><p>如果项目在远程仓库已经设置完毕，<code>git clone</code> 是用户获取开发副本最常见的方式。和  <code>git init</code>相似，<code>clone</code> 通常也是一次性的操作——只要开发者获得了一份工作副本，所有版本控制操作和协作管理都是在本地仓库中完成的。</p>\n<h4 id=\"仓库间协作\"><a href=\"#仓库间协作\" class=\"headerlink\" title=\"仓库间协作\"></a>仓库间协作</h4><p>这一点很重要，你要理解 Git 中「工作副本」的概念和 SVN 仓库 check out 下来的「工作副本」是很不一样的。和 SVN 不同的是，Git 不会区分工作副本和中央仓库——它们都是功能完备的 Git 仓库。</p>\n<p>这就使得 Git 的协作和 SVN 截然不同。SVN 依赖于中央仓库和工作副本之间的关系，而 Git 协作模型是基于仓库和仓库之间的交互的。相对于 SVN 的提交流程，你可以在 Git 仓库之间 <code>push</code> 或 <code>pull</code> 提交。</p>\n<p><img src=\"https://www.atlassian.com/dam/jcr:e5228129-76b1-4b2c-8f10-af789f2ea6c0/03.svg\"></p>\n<p><img src=\"https://www.atlassian.com/dam/jcr:5d68ce55-59a7-4840-a896-eb2014a9f17b/02.svg\"></p>\n<p>当然，你也完全可以给予某个特定的仓库一些特殊的含义。比如，指定某个 Git 仓库为中央仓库，你就可以用 Git 进行中央化的工作流。重点是，这是通过约定实现的，而不是写死在版本控制系统本身。</p>\n<h3 id=\"例子-1\"><a href=\"#例子-1\" class=\"headerlink\" title=\"例子\"></a>例子</h3><p>下面这个例子演示用 SSH 用户名 john 连接到 example.com，获取远程服务器上中央仓库的本地副本：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone ssh://john@example.com/path/to/my-project.git</span><br><span class=\"line\"></span><br><span class=\"line\">cd my-project</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">开始工作</span></span><br></pre></td></tr></table></figure>\n\n<p>第一行命令在本地机器的 <code>my-project</code> 目录下初始化了一个新的 Git 仓库，并且导入了中央仓库中的文件。接下来，你 <code>cd</code> 到项目目录，开始编辑文件、缓存提交、和其它仓库交互。同时注意 <code>.git</code> 拓展名克隆时会被去除。它表明了本地副本的非裸状态。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config</span><br></pre></td></tr></table></figure>\n\n<p><code>git config</code> 命令允许你在命令行中配置你的 Git 安装（或是一个独立仓库）。这个命令定义了所有配置，从用户信息到仓库行为等等。一些常见的配置命令如下所列。</p>\n<h3 id=\"用法-2\"><a href=\"#用法-2\" class=\"headerlink\" title=\"用法\"></a>用法</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config user.name &lt;name&gt;</span><br></pre></td></tr></table></figure>\n\n<p>定义当前仓库所有提交使用的作者姓名。通常来说，你希望使用 <code>--global</code> 标记设置当前用户的配置项。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global user.name &lt;name&gt;</span><br></pre></td></tr></table></figure>\n\n<p>定义当前用户所有提交使用的作者姓名。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global user.email &lt;email&gt;</span><br></pre></td></tr></table></figure>\n\n<p>定义当前用户所有提交使用的作者邮箱。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global <span class=\"built_in\">alias</span>.&lt;alias-name&gt; &lt;git-command&gt;</span><br></pre></td></tr></table></figure>\n\n<p>为Git命令创建一个快捷方式（别名）。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --system core.editor &lt;editor&gt;</span><br></pre></td></tr></table></figure>\n\n<p>定义当前机器所有用户使用命令时用到的文本编辑器，如 <code>git commit</code>。<code>&lt;editor&gt;</code> 参数用编辑器的启动命令（如 vi）替代。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global --edit</span><br></pre></td></tr></table></figure>\n\n<p>用文本编辑器打开全局配置文件，手动编辑。</p>\n<h3 id=\"讨论-2\"><a href=\"#讨论-2\" class=\"headerlink\" title=\"讨论\"></a>讨论</h3><p>所有配置项都储存在纯文本文件中，所以 <code>git config</code> 命令其实只是一个提供便捷的命令行接口。通常，你只需要在新机器上配置一次 Git 安装，以及，你通常会想要使用 <code>--global</code> 标记。</p>\n<p>Git 将配置项保存在三个单独的文件中，允许你分别对单个仓库、用户和整个系统设置。</p>\n<ul>\n<li><repo>/.git/config – 特定仓库的设置。</li>\n</ul>\n<ul>\n<li>~/.gitconfig – 特定用户的设置。这也是 <code>--global</code> 标记的设置项存放的位置。</li>\n</ul>\n<ul>\n<li>$(prefix)/etc/gitconfig – 系统层面的设置。</li>\n</ul>\n<p>当这些文件中的配置项冲突时，本地仓库设置覆盖用户设置，用户设置覆盖系统设置。如果你打开期中一份文件，你会看到下面这些：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[user]</span><br><span class=\"line\"></span><br><span class=\"line\">name = John Smith</span><br><span class=\"line\"></span><br><span class=\"line\">email = john@example.com</span><br><span class=\"line\"></span><br><span class=\"line\">[<span class=\"built_in\">alias</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">st = status</span><br><span class=\"line\"></span><br><span class=\"line\">co = checkout</span><br><span class=\"line\"></span><br><span class=\"line\">br = branch</span><br><span class=\"line\"></span><br><span class=\"line\">up = rebase</span><br><span class=\"line\"></span><br><span class=\"line\">ci = commit</span><br><span class=\"line\"></span><br><span class=\"line\">[core]</span><br><span class=\"line\"></span><br><span class=\"line\">editor = vim</span><br></pre></td></tr></table></figure>\n\n<p>你可以用 <code>git config</code> 手动编辑这些值。</p>\n<h3 id=\"例子-2\"><a href=\"#例子-2\" class=\"headerlink\" title=\"例子\"></a>例子</h3><p>你在安装 Git 之后想要做的第一件事是告诉它你的名字和邮箱，个性化一些默认设置。一般初始的设置过程看上去是这样的：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 告诉Git你是谁</span></span><br><span class=\"line\"></span><br><span class=\"line\">git config --global user.name <span class=\"string\">&quot;John Smith&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">git config --global user.email john@example.com</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 选择你喜欢的文本编辑器</span></span><br><span class=\"line\"></span><br><span class=\"line\">git config --global core.editor vim</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 添加一些快捷方式(别名)</span></span><br><span class=\"line\"></span><br><span class=\"line\">git config --global alias.st status</span><br><span class=\"line\"></span><br><span class=\"line\">git config --global alias.co checkout</span><br><span class=\"line\"></span><br><span class=\"line\">git config --global alias.br branch</span><br><span class=\"line\"></span><br><span class=\"line\">git config --global alias.up rebase</span><br><span class=\"line\"></span><br><span class=\"line\">git config --global alias.ci commit</span><br></pre></td></tr></table></figure>\n\n<p>它会生成上一节中所说的 <code>~/.gitconfig</code> 文件。</p>\n<blockquote>\n<p>这篇教程来源于<a href=\"https://github.com/geeeeeeeeek/git-recipes/\"><strong>「git-recipes」</strong></a></p>\n</blockquote>\n"},{"title":"2.git安装与初体验","author":"连思鑫","date":"2023-03-01T14:45:00.000Z","_content":"# Git 简易指南\n\n\n这节是完全面向入门者的，我假设你从零开始创建一个项目并且想用 Git 来进行版本控制，因此本文会避开分支这些相对复杂的概念。\n\n在这节中，我会介绍如何在你的个人项目中使用 Git，我们会讨论 Git 最基本的操作——如何初始化你的项目，如何管理新的或者已有的文件，如何在远端仓库中储存你的代码。\n\n## 安装 Git\n\n- Mac 用户：Xcode Command Line Tools 自带 Git（`xcode-select --install`）\n\n- Linux 用户：`sudo apt-get install git`\n\n- Windows 用户：下载 [Git SCM](git-for-windows.github.io)\n\n  ```\n  - 对于 Windows 用户，安装后如果希望在全局的 cmd 中使用 Git，需要把 git.exe 加入 PATH 环境变量中，或在 Git Bash 中使用 Git。\n  ```\n\n## 检出仓库\n\n执行如下命令以创建一个本地仓库的克隆版本：\n\n`git clone /path/to/repository`\n\n如果是远端服务器上的仓库，你的命令会是这个样子：\n\n`git clone username@host:/path/to/repository` （通过 SSH）\n\n或者：\n\n`git clone https:/path/to/repository.git` （通过 https）\n\n比如说 `git clone https://github.com/geeeeeeeeek/git-recipes.git` 可以将 git 教程 clone 到你指定的目录。\n\n## 创建新仓库\n\n创建新文件夹，打开，然后执行 `git init` 以创建新的 git 仓库。\n\n> 下面每一步中，你都可以通过 `git status` 来查看你的git仓库状态。\n\n## 工作流\n\n你的本地仓库由 Git 维护的三棵「树」组成。第一个是你的 `工作目录`，它持有实际文件；第二个是 `缓存区（Index）`，它像个缓存区域，临时保存你的改动；最后是 `HEAD`，指向你最近一次提交后的结果。\n\n![enter image description here](http://www.bootcss.com/p/git-guide/img/trees.png)\n\n> 事实上，第三个阶段是 commit history 的图。HEAD 一般是指向最新一次 commit 的引用。现在暂时不必究其细节。\n\n## 添加与提交\n\n你可以计划改动（把它们添加到缓存区），使用如下命令：\n\n```\ngit add < filename >\ngit add *\n```\n\n这是 Git 基本工作流程的第一步。使用如下命令以实际提交改动：\n\n```\ngit commit -m \"代码提交信息\"\n```\n\n现在，你的改动已经提交到了 HEAD，但是还没到你的远端仓库。\n\n> 在开发时，良好的习惯是根据工作进度及时 commit，并务必注意附上有意义的 commit message。创建完项目目录后，第一次提交的 commit message 一般为「Initial commit」。\n\n## 推送改动\n\n你的改动现在已经在本地仓库的 HEAD 中了。执行如下命令以将这些改动提交到远端仓库：\n\n```\ngit push origin master\n```\n\n可以把 master 换成你想要推送的任何分支。\n\n如果你还没有克隆现有仓库，并欲将你的仓库连接到某个远程服务器，你可以使用如下命令添加：\n\n```\ngit remote add origin <server>\n```\n\n如此你就能够将你的改动推送到所添加的服务器上去了。\n\n> - 这里 origin 是 &lt;server&gt; 的别名，取什么名字都可以，你也可以在 push 时将 &lt;jserver&gt; 替换为 origin。但为了以后 push 方便，我们第一次一般都会先 remote add。\n> - 如果你还没有 Git 仓库，可以在 Github 等代码托管平台上创建一个空（不要自动生成 README.md）的仓库，然后将代码 push 到远端仓库。\n\n##### 至此，你应该可以顺利地提交你的项目了。在下一节中，我们将涉及更多的命令，来完成更有用的操作。比如从远端的仓库拉取更新并且合并到你的本地，如何通过分支多人协作，如何处理不同分支的冲突等等。\n\n> 本教程来源于[**「Git Recipes」**](https://github.com/geeeeeeeeek/git-recipes/)。","source":"_posts/2-git安装与初体验.md","raw":"title: 2.git安装与初体验\nauthor: 连思鑫\ntags:\n  - git\ncategories:\n  - ..\n  - git\n  - ''\ndate: 2023-03-01 22:45:00\n---\n# Git 简易指南\n\n\n这节是完全面向入门者的，我假设你从零开始创建一个项目并且想用 Git 来进行版本控制，因此本文会避开分支这些相对复杂的概念。\n\n在这节中，我会介绍如何在你的个人项目中使用 Git，我们会讨论 Git 最基本的操作——如何初始化你的项目，如何管理新的或者已有的文件，如何在远端仓库中储存你的代码。\n\n## 安装 Git\n\n- Mac 用户：Xcode Command Line Tools 自带 Git（`xcode-select --install`）\n\n- Linux 用户：`sudo apt-get install git`\n\n- Windows 用户：下载 [Git SCM](git-for-windows.github.io)\n\n  ```\n  - 对于 Windows 用户，安装后如果希望在全局的 cmd 中使用 Git，需要把 git.exe 加入 PATH 环境变量中，或在 Git Bash 中使用 Git。\n  ```\n\n## 检出仓库\n\n执行如下命令以创建一个本地仓库的克隆版本：\n\n`git clone /path/to/repository`\n\n如果是远端服务器上的仓库，你的命令会是这个样子：\n\n`git clone username@host:/path/to/repository` （通过 SSH）\n\n或者：\n\n`git clone https:/path/to/repository.git` （通过 https）\n\n比如说 `git clone https://github.com/geeeeeeeeek/git-recipes.git` 可以将 git 教程 clone 到你指定的目录。\n\n## 创建新仓库\n\n创建新文件夹，打开，然后执行 `git init` 以创建新的 git 仓库。\n\n> 下面每一步中，你都可以通过 `git status` 来查看你的git仓库状态。\n\n## 工作流\n\n你的本地仓库由 Git 维护的三棵「树」组成。第一个是你的 `工作目录`，它持有实际文件；第二个是 `缓存区（Index）`，它像个缓存区域，临时保存你的改动；最后是 `HEAD`，指向你最近一次提交后的结果。\n\n![enter image description here](http://www.bootcss.com/p/git-guide/img/trees.png)\n\n> 事实上，第三个阶段是 commit history 的图。HEAD 一般是指向最新一次 commit 的引用。现在暂时不必究其细节。\n\n## 添加与提交\n\n你可以计划改动（把它们添加到缓存区），使用如下命令：\n\n```\ngit add < filename >\ngit add *\n```\n\n这是 Git 基本工作流程的第一步。使用如下命令以实际提交改动：\n\n```\ngit commit -m \"代码提交信息\"\n```\n\n现在，你的改动已经提交到了 HEAD，但是还没到你的远端仓库。\n\n> 在开发时，良好的习惯是根据工作进度及时 commit，并务必注意附上有意义的 commit message。创建完项目目录后，第一次提交的 commit message 一般为「Initial commit」。\n\n## 推送改动\n\n你的改动现在已经在本地仓库的 HEAD 中了。执行如下命令以将这些改动提交到远端仓库：\n\n```\ngit push origin master\n```\n\n可以把 master 换成你想要推送的任何分支。\n\n如果你还没有克隆现有仓库，并欲将你的仓库连接到某个远程服务器，你可以使用如下命令添加：\n\n```\ngit remote add origin <server>\n```\n\n如此你就能够将你的改动推送到所添加的服务器上去了。\n\n> - 这里 origin 是 &lt;server&gt; 的别名，取什么名字都可以，你也可以在 push 时将 &lt;jserver&gt; 替换为 origin。但为了以后 push 方便，我们第一次一般都会先 remote add。\n> - 如果你还没有 Git 仓库，可以在 Github 等代码托管平台上创建一个空（不要自动生成 README.md）的仓库，然后将代码 push 到远端仓库。\n\n##### 至此，你应该可以顺利地提交你的项目了。在下一节中，我们将涉及更多的命令，来完成更有用的操作。比如从远端的仓库拉取更新并且合并到你的本地，如何通过分支多人协作，如何处理不同分支的冲突等等。\n\n> 本教程来源于[**「Git Recipes」**](https://github.com/geeeeeeeeek/git-recipes/)。","slug":"2-git安装与初体验","published":1,"updated":"2023-03-01T14:47:23.420Z","_id":"clifr2v1m000d14uo1q7nb9t7","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"Git-简易指南\"><a href=\"#Git-简易指南\" class=\"headerlink\" title=\"Git 简易指南\"></a>Git 简易指南</h1><p>这节是完全面向入门者的，我假设你从零开始创建一个项目并且想用 Git 来进行版本控制，因此本文会避开分支这些相对复杂的概念。</p>\n<p>在这节中，我会介绍如何在你的个人项目中使用 Git，我们会讨论 Git 最基本的操作——如何初始化你的项目，如何管理新的或者已有的文件，如何在远端仓库中储存你的代码。</p>\n<h2 id=\"安装-Git\"><a href=\"#安装-Git\" class=\"headerlink\" title=\"安装 Git\"></a>安装 Git</h2><ul>\n<li><p>Mac 用户：Xcode Command Line Tools 自带 Git（<code>xcode-select --install</code>）</p>\n</li>\n<li><p>Linux 用户：<code>sudo apt-get install git</code></p>\n</li>\n<li><p>Windows 用户：下载 <a href=\"git-for-windows.github.io\">Git SCM</a></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- 对于 Windows 用户，安装后如果希望在全局的 cmd 中使用 Git，需要把 git.exe 加入 PATH 环境变量中，或在 Git Bash 中使用 Git。</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"检出仓库\"><a href=\"#检出仓库\" class=\"headerlink\" title=\"检出仓库\"></a>检出仓库</h2><p>执行如下命令以创建一个本地仓库的克隆版本：</p>\n<p><code>git clone /path/to/repository</code></p>\n<p>如果是远端服务器上的仓库，你的命令会是这个样子：</p>\n<p><code>git clone username@host:/path/to/repository</code> （通过 SSH）</p>\n<p>或者：</p>\n<p><code>git clone https:/path/to/repository.git</code> （通过 https）</p>\n<p>比如说 <code>git clone https://github.com/geeeeeeeeek/git-recipes.git</code> 可以将 git 教程 clone 到你指定的目录。</p>\n<h2 id=\"创建新仓库\"><a href=\"#创建新仓库\" class=\"headerlink\" title=\"创建新仓库\"></a>创建新仓库</h2><p>创建新文件夹，打开，然后执行 <code>git init</code> 以创建新的 git 仓库。</p>\n<blockquote>\n<p>下面每一步中，你都可以通过 <code>git status</code> 来查看你的git仓库状态。</p>\n</blockquote>\n<h2 id=\"工作流\"><a href=\"#工作流\" class=\"headerlink\" title=\"工作流\"></a>工作流</h2><p>你的本地仓库由 Git 维护的三棵「树」组成。第一个是你的 <code>工作目录</code>，它持有实际文件；第二个是 <code>缓存区（Index）</code>，它像个缓存区域，临时保存你的改动；最后是 <code>HEAD</code>，指向你最近一次提交后的结果。</p>\n<p><img src=\"http://www.bootcss.com/p/git-guide/img/trees.png\" alt=\"enter image description here\"></p>\n<blockquote>\n<p>事实上，第三个阶段是 commit history 的图。HEAD 一般是指向最新一次 commit 的引用。现在暂时不必究其细节。</p>\n</blockquote>\n<h2 id=\"添加与提交\"><a href=\"#添加与提交\" class=\"headerlink\" title=\"添加与提交\"></a>添加与提交</h2><p>你可以计划改动（把它们添加到缓存区），使用如下命令：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add &lt; filename &gt;</span><br><span class=\"line\">git add *</span><br></pre></td></tr></table></figure>\n\n<p>这是 Git 基本工作流程的第一步。使用如下命令以实际提交改动：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git commit -m &quot;代码提交信息&quot;</span><br></pre></td></tr></table></figure>\n\n<p>现在，你的改动已经提交到了 HEAD，但是还没到你的远端仓库。</p>\n<blockquote>\n<p>在开发时，良好的习惯是根据工作进度及时 commit，并务必注意附上有意义的 commit message。创建完项目目录后，第一次提交的 commit message 一般为「Initial commit」。</p>\n</blockquote>\n<h2 id=\"推送改动\"><a href=\"#推送改动\" class=\"headerlink\" title=\"推送改动\"></a>推送改动</h2><p>你的改动现在已经在本地仓库的 HEAD 中了。执行如下命令以将这些改动提交到远端仓库：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push origin master</span><br></pre></td></tr></table></figure>\n\n<p>可以把 master 换成你想要推送的任何分支。</p>\n<p>如果你还没有克隆现有仓库，并欲将你的仓库连接到某个远程服务器，你可以使用如下命令添加：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote add origin &lt;server&gt;</span><br></pre></td></tr></table></figure>\n\n<p>如此你就能够将你的改动推送到所添加的服务器上去了。</p>\n<blockquote>\n<ul>\n<li>这里 origin 是 &lt;server&gt; 的别名，取什么名字都可以，你也可以在 push 时将 &lt;jserver&gt; 替换为 origin。但为了以后 push 方便，我们第一次一般都会先 remote add。</li>\n<li>如果你还没有 Git 仓库，可以在 Github 等代码托管平台上创建一个空（不要自动生成 README.md）的仓库，然后将代码 push 到远端仓库。</li>\n</ul>\n</blockquote>\n<h5 id=\"至此，你应该可以顺利地提交你的项目了。在下一节中，我们将涉及更多的命令，来完成更有用的操作。比如从远端的仓库拉取更新并且合并到你的本地，如何通过分支多人协作，如何处理不同分支的冲突等等。\"><a href=\"#至此，你应该可以顺利地提交你的项目了。在下一节中，我们将涉及更多的命令，来完成更有用的操作。比如从远端的仓库拉取更新并且合并到你的本地，如何通过分支多人协作，如何处理不同分支的冲突等等。\" class=\"headerlink\" title=\"至此，你应该可以顺利地提交你的项目了。在下一节中，我们将涉及更多的命令，来完成更有用的操作。比如从远端的仓库拉取更新并且合并到你的本地，如何通过分支多人协作，如何处理不同分支的冲突等等。\"></a>至此，你应该可以顺利地提交你的项目了。在下一节中，我们将涉及更多的命令，来完成更有用的操作。比如从远端的仓库拉取更新并且合并到你的本地，如何通过分支多人协作，如何处理不同分支的冲突等等。</h5><blockquote>\n<p>本教程来源于<a href=\"https://github.com/geeeeeeeeek/git-recipes/\"><strong>「Git Recipes」</strong></a>。</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Git-简易指南\"><a href=\"#Git-简易指南\" class=\"headerlink\" title=\"Git 简易指南\"></a>Git 简易指南</h1><p>这节是完全面向入门者的，我假设你从零开始创建一个项目并且想用 Git 来进行版本控制，因此本文会避开分支这些相对复杂的概念。</p>\n<p>在这节中，我会介绍如何在你的个人项目中使用 Git，我们会讨论 Git 最基本的操作——如何初始化你的项目，如何管理新的或者已有的文件，如何在远端仓库中储存你的代码。</p>\n<h2 id=\"安装-Git\"><a href=\"#安装-Git\" class=\"headerlink\" title=\"安装 Git\"></a>安装 Git</h2><ul>\n<li><p>Mac 用户：Xcode Command Line Tools 自带 Git（<code>xcode-select --install</code>）</p>\n</li>\n<li><p>Linux 用户：<code>sudo apt-get install git</code></p>\n</li>\n<li><p>Windows 用户：下载 <a href=\"git-for-windows.github.io\">Git SCM</a></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- 对于 Windows 用户，安装后如果希望在全局的 cmd 中使用 Git，需要把 git.exe 加入 PATH 环境变量中，或在 Git Bash 中使用 Git。</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"检出仓库\"><a href=\"#检出仓库\" class=\"headerlink\" title=\"检出仓库\"></a>检出仓库</h2><p>执行如下命令以创建一个本地仓库的克隆版本：</p>\n<p><code>git clone /path/to/repository</code></p>\n<p>如果是远端服务器上的仓库，你的命令会是这个样子：</p>\n<p><code>git clone username@host:/path/to/repository</code> （通过 SSH）</p>\n<p>或者：</p>\n<p><code>git clone https:/path/to/repository.git</code> （通过 https）</p>\n<p>比如说 <code>git clone https://github.com/geeeeeeeeek/git-recipes.git</code> 可以将 git 教程 clone 到你指定的目录。</p>\n<h2 id=\"创建新仓库\"><a href=\"#创建新仓库\" class=\"headerlink\" title=\"创建新仓库\"></a>创建新仓库</h2><p>创建新文件夹，打开，然后执行 <code>git init</code> 以创建新的 git 仓库。</p>\n<blockquote>\n<p>下面每一步中，你都可以通过 <code>git status</code> 来查看你的git仓库状态。</p>\n</blockquote>\n<h2 id=\"工作流\"><a href=\"#工作流\" class=\"headerlink\" title=\"工作流\"></a>工作流</h2><p>你的本地仓库由 Git 维护的三棵「树」组成。第一个是你的 <code>工作目录</code>，它持有实际文件；第二个是 <code>缓存区（Index）</code>，它像个缓存区域，临时保存你的改动；最后是 <code>HEAD</code>，指向你最近一次提交后的结果。</p>\n<p><img src=\"http://www.bootcss.com/p/git-guide/img/trees.png\" alt=\"enter image description here\"></p>\n<blockquote>\n<p>事实上，第三个阶段是 commit history 的图。HEAD 一般是指向最新一次 commit 的引用。现在暂时不必究其细节。</p>\n</blockquote>\n<h2 id=\"添加与提交\"><a href=\"#添加与提交\" class=\"headerlink\" title=\"添加与提交\"></a>添加与提交</h2><p>你可以计划改动（把它们添加到缓存区），使用如下命令：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add &lt; filename &gt;</span><br><span class=\"line\">git add *</span><br></pre></td></tr></table></figure>\n\n<p>这是 Git 基本工作流程的第一步。使用如下命令以实际提交改动：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git commit -m &quot;代码提交信息&quot;</span><br></pre></td></tr></table></figure>\n\n<p>现在，你的改动已经提交到了 HEAD，但是还没到你的远端仓库。</p>\n<blockquote>\n<p>在开发时，良好的习惯是根据工作进度及时 commit，并务必注意附上有意义的 commit message。创建完项目目录后，第一次提交的 commit message 一般为「Initial commit」。</p>\n</blockquote>\n<h2 id=\"推送改动\"><a href=\"#推送改动\" class=\"headerlink\" title=\"推送改动\"></a>推送改动</h2><p>你的改动现在已经在本地仓库的 HEAD 中了。执行如下命令以将这些改动提交到远端仓库：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push origin master</span><br></pre></td></tr></table></figure>\n\n<p>可以把 master 换成你想要推送的任何分支。</p>\n<p>如果你还没有克隆现有仓库，并欲将你的仓库连接到某个远程服务器，你可以使用如下命令添加：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote add origin &lt;server&gt;</span><br></pre></td></tr></table></figure>\n\n<p>如此你就能够将你的改动推送到所添加的服务器上去了。</p>\n<blockquote>\n<ul>\n<li>这里 origin 是 &lt;server&gt; 的别名，取什么名字都可以，你也可以在 push 时将 &lt;jserver&gt; 替换为 origin。但为了以后 push 方便，我们第一次一般都会先 remote add。</li>\n<li>如果你还没有 Git 仓库，可以在 Github 等代码托管平台上创建一个空（不要自动生成 README.md）的仓库，然后将代码 push 到远端仓库。</li>\n</ul>\n</blockquote>\n<h5 id=\"至此，你应该可以顺利地提交你的项目了。在下一节中，我们将涉及更多的命令，来完成更有用的操作。比如从远端的仓库拉取更新并且合并到你的本地，如何通过分支多人协作，如何处理不同分支的冲突等等。\"><a href=\"#至此，你应该可以顺利地提交你的项目了。在下一节中，我们将涉及更多的命令，来完成更有用的操作。比如从远端的仓库拉取更新并且合并到你的本地，如何通过分支多人协作，如何处理不同分支的冲突等等。\" class=\"headerlink\" title=\"至此，你应该可以顺利地提交你的项目了。在下一节中，我们将涉及更多的命令，来完成更有用的操作。比如从远端的仓库拉取更新并且合并到你的本地，如何通过分支多人协作，如何处理不同分支的冲突等等。\"></a>至此，你应该可以顺利地提交你的项目了。在下一节中，我们将涉及更多的命令，来完成更有用的操作。比如从远端的仓库拉取更新并且合并到你的本地，如何通过分支多人协作，如何处理不同分支的冲突等等。</h5><blockquote>\n<p>本教程来源于<a href=\"https://github.com/geeeeeeeeek/git-recipes/\"><strong>「Git Recipes」</strong></a>。</p>\n</blockquote>\n"},{"title":"3.构建和链接静态库和动态库","author":"连思鑫","date":"2023-03-02T11:02:00.000Z","_content":"#### 3. 构建和链接静态库和动态库\n\n------\n\n> 项目中会有单个源文件构建的多个可执行文件的可能。项目中有多个源文件，通常分布在不同子目录\n> 中。这种实践有助于项目的源代码结构，而且支持模块化、代码重用和关注点分离。同时，这种分离可\n> 以简化并加速项目的重新编译。本示例中，我们将展示如何将源代码编译到库中，以及如何链接这些\n> 库。\n\n#### 具体实施\n\n------\n\n1. 创建目标——静态库。库的名称和源码文件名相同，具体代码如下：\n\n```cmake\nadd_libraries(message\n\tSTATIC\n\tMessage.h\n\tMessage.cpp\n)\n```\n\n2. 创建 hello-world 可执行文件的目标部分不需要修改：\n\n   ```cmake\n   add_executable(hello-world hello-world.cpp)\n   ```\n\n3. 最后，将目标库链接到可执行目标：\n\n   ```cmake\n   target_link_libraries(hello-world messgae)\n   ```\n\n#### 编译\n\n------\n\n``` shell\n$ mkdir build && cd build\n$ cmake ..\n$ cmake --build .\n\n[ 50%] Built target message\nScanning dependencies of target hello-world\n[ 75%] Building CXX object CMakeFiles/hello-world.dir/hello-world.cpp.o\n[100%] Linking CXX executable hello-world\n[100%] Built target hello-world\n\n$ ls\t# 可以看到生成了 libmessage.a 静态库和可执行文件 hello-world\nCMakeCache.txt  CMakeFiles  cmake_install.cmake  hello-world  libmessage.a  Makefile\n\n$ ./hello-world\nThis is my very nice message:\nhello, CMake World!\nThis is my very nice message:\nGoodbye, CMake World!\n```\n\n#### 工作原理\n\n------\n\n**add_library(message STATIC Message.h Message.cpp) **：生成必要的构建指令，将指定\n的源码编译到库中。 \n\nadd_library 的第**一个参数是目标名**。整个 CMakeLists.txt 中，可使用相同的名称来引用库。\n\n生成的库的实际名称将由 CMake 通过在前面添加前缀 lib 和适当的扩展名作为后缀来形成。\n\n生成库是根据第二个参数( **STATIC 或 SHARED** )和操作系统确定的。\n\n-------\n\n**target_link_libraries(hello-world message) **: 将库链接到可执行文件。\n\n此命令还确保 hello-world 可执行文件可以正确地依赖于消息库。\n\n因此，在消息库链接到 hello-world 可执行文件之前，需要完成消息库的构建。\n\n编译成功后，构建目录包含 libmessage.a 一个静态库(在GNU/Linux上)和 hello-world 可执行文件。\n\n#### add_library 其他参数\n\n-------\n\n- **STATIC**：用于创建**静态库**，即编译文件的打包存档，以便在链接其他目标时使用，例如：可执行文件。\n- **SHARED**：用于创建**动态库**，即可以动态链接，并在运行时加载的库。可以在 CMakeLists.txt 中使用 add_library(message SHARED Message.h Message.cpp) 从静态库切换到动态共享对象(DSO)。\n- **OBJECT**：可将给定 add_library 的列表中的源码编译到目标文件，不将它们归档到静态库中，也不能将它们链接到共享对象中。如果需要**一次性创建静态库和动态库**，那么使用对象库尤其有用。\n- **MODULE**：又为 DSO 组。与 SHARED 库不同，它们不链接到项目中的任何目标，不过可以进行动态加载。该参数可以用于构建**运行时插件**。\n\n#### CMake 源代码\n\n------\n\n``` cmake\ncmake_minimum_required(VERSION 3.5)\n\nproject(hello-world LANGUAGES CXX)\n\n# 创建目标——静态库。库的名称和源码文件名相同，具体代码如下：\nadd_library(message\n\t# 生成静态库\n\tSTATIC\n\t\t# 包含库文件\n\t\tMessage.h\n\t\tMessage.cpp\n)\n\n# 生成可执行文件\nadd_executable(hello-world hello-world.cpp)\n\n# 链接目标库到可执行文件\ntarget_link_libraries(hello-world message)\n```\n\n","source":"_posts/3-构建和链接静态库和动态库.md","raw":"title: 3.构建和链接静态库和动态库\nauthor: 连思鑫\ntags:\n  - cmake\ncategories:\n  - ..\n  - cmake\n  - 第一章：从简单的可执行文件到库\ndate: 2023-03-02 19:02:00\n---\n#### 3. 构建和链接静态库和动态库\n\n------\n\n> 项目中会有单个源文件构建的多个可执行文件的可能。项目中有多个源文件，通常分布在不同子目录\n> 中。这种实践有助于项目的源代码结构，而且支持模块化、代码重用和关注点分离。同时，这种分离可\n> 以简化并加速项目的重新编译。本示例中，我们将展示如何将源代码编译到库中，以及如何链接这些\n> 库。\n\n#### 具体实施\n\n------\n\n1. 创建目标——静态库。库的名称和源码文件名相同，具体代码如下：\n\n```cmake\nadd_libraries(message\n\tSTATIC\n\tMessage.h\n\tMessage.cpp\n)\n```\n\n2. 创建 hello-world 可执行文件的目标部分不需要修改：\n\n   ```cmake\n   add_executable(hello-world hello-world.cpp)\n   ```\n\n3. 最后，将目标库链接到可执行目标：\n\n   ```cmake\n   target_link_libraries(hello-world messgae)\n   ```\n\n#### 编译\n\n------\n\n``` shell\n$ mkdir build && cd build\n$ cmake ..\n$ cmake --build .\n\n[ 50%] Built target message\nScanning dependencies of target hello-world\n[ 75%] Building CXX object CMakeFiles/hello-world.dir/hello-world.cpp.o\n[100%] Linking CXX executable hello-world\n[100%] Built target hello-world\n\n$ ls\t# 可以看到生成了 libmessage.a 静态库和可执行文件 hello-world\nCMakeCache.txt  CMakeFiles  cmake_install.cmake  hello-world  libmessage.a  Makefile\n\n$ ./hello-world\nThis is my very nice message:\nhello, CMake World!\nThis is my very nice message:\nGoodbye, CMake World!\n```\n\n#### 工作原理\n\n------\n\n**add_library(message STATIC Message.h Message.cpp) **：生成必要的构建指令，将指定\n的源码编译到库中。 \n\nadd_library 的第**一个参数是目标名**。整个 CMakeLists.txt 中，可使用相同的名称来引用库。\n\n生成的库的实际名称将由 CMake 通过在前面添加前缀 lib 和适当的扩展名作为后缀来形成。\n\n生成库是根据第二个参数( **STATIC 或 SHARED** )和操作系统确定的。\n\n-------\n\n**target_link_libraries(hello-world message) **: 将库链接到可执行文件。\n\n此命令还确保 hello-world 可执行文件可以正确地依赖于消息库。\n\n因此，在消息库链接到 hello-world 可执行文件之前，需要完成消息库的构建。\n\n编译成功后，构建目录包含 libmessage.a 一个静态库(在GNU/Linux上)和 hello-world 可执行文件。\n\n#### add_library 其他参数\n\n-------\n\n- **STATIC**：用于创建**静态库**，即编译文件的打包存档，以便在链接其他目标时使用，例如：可执行文件。\n- **SHARED**：用于创建**动态库**，即可以动态链接，并在运行时加载的库。可以在 CMakeLists.txt 中使用 add_library(message SHARED Message.h Message.cpp) 从静态库切换到动态共享对象(DSO)。\n- **OBJECT**：可将给定 add_library 的列表中的源码编译到目标文件，不将它们归档到静态库中，也不能将它们链接到共享对象中。如果需要**一次性创建静态库和动态库**，那么使用对象库尤其有用。\n- **MODULE**：又为 DSO 组。与 SHARED 库不同，它们不链接到项目中的任何目标，不过可以进行动态加载。该参数可以用于构建**运行时插件**。\n\n#### CMake 源代码\n\n------\n\n``` cmake\ncmake_minimum_required(VERSION 3.5)\n\nproject(hello-world LANGUAGES CXX)\n\n# 创建目标——静态库。库的名称和源码文件名相同，具体代码如下：\nadd_library(message\n\t# 生成静态库\n\tSTATIC\n\t\t# 包含库文件\n\t\tMessage.h\n\t\tMessage.cpp\n)\n\n# 生成可执行文件\nadd_executable(hello-world hello-world.cpp)\n\n# 链接目标库到可执行文件\ntarget_link_libraries(hello-world message)\n```\n\n","slug":"3-构建和链接静态库和动态库","published":1,"updated":"2023-03-02T11:04:48.538Z","_id":"clifr2v1m000f14uo2invbtaf","comments":1,"layout":"post","photos":[],"link":"","content":"<h4 id=\"3-构建和链接静态库和动态库\"><a href=\"#3-构建和链接静态库和动态库\" class=\"headerlink\" title=\"3. 构建和链接静态库和动态库\"></a>3. 构建和链接静态库和动态库</h4><hr>\n<blockquote>\n<p>项目中会有单个源文件构建的多个可执行文件的可能。项目中有多个源文件，通常分布在不同子目录<br>中。这种实践有助于项目的源代码结构，而且支持模块化、代码重用和关注点分离。同时，这种分离可<br>以简化并加速项目的重新编译。本示例中，我们将展示如何将源代码编译到库中，以及如何链接这些<br>库。</p>\n</blockquote>\n<h4 id=\"具体实施\"><a href=\"#具体实施\" class=\"headerlink\" title=\"具体实施\"></a>具体实施</h4><hr>\n<ol>\n<li>创建目标——静态库。库的名称和源码文件名相同，具体代码如下：</li>\n</ol>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">add_libraries(<span class=\"keyword\">message</span></span><br><span class=\"line\">\tSTATIC</span><br><span class=\"line\">\t<span class=\"keyword\">Message</span>.h</span><br><span class=\"line\">\t<span class=\"keyword\">Message</span>.cpp</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li><p>创建 hello-world 可执行文件的目标部分不需要修改：</p>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">add_executable</span>(hello-world hello-world.cpp)</span><br></pre></td></tr></table></figure></li>\n<li><p>最后，将目标库链接到可执行目标：</p>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">target_link_libraries</span>(hello-world messgae)</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h4 id=\"编译\"><a href=\"#编译\" class=\"headerlink\" title=\"编译\"></a>编译</h4><hr>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\"><span class=\"built_in\">mkdir</span> build &amp;&amp; <span class=\"built_in\">cd</span> build</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">cmake ..</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">cmake --build .</span></span><br><span class=\"line\"></span><br><span class=\"line\">[ 50%] Built target message</span><br><span class=\"line\">Scanning dependencies of target hello-world</span><br><span class=\"line\">[ 75%] Building CXX object CMakeFiles/hello-world.dir/hello-world.cpp.o</span><br><span class=\"line\"><span class=\"meta prompt_\">[100%</span><span class=\"language-bash\">] Linking CXX executable hello-world</span></span><br><span class=\"line\"><span class=\"meta prompt_\">[100%</span><span class=\"language-bash\">] Built target hello-world</span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\"><span class=\"built_in\">ls</span>\t<span class=\"comment\"># 可以看到生成了 libmessage.a 静态库和可执行文件 hello-world</span></span></span><br><span class=\"line\">CMakeCache.txt  CMakeFiles  cmake_install.cmake  hello-world  libmessage.a  Makefile</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">./hello-world</span></span><br><span class=\"line\">This is my very nice message:</span><br><span class=\"line\">hello, CMake World!</span><br><span class=\"line\">This is my very nice message:</span><br><span class=\"line\">Goodbye, CMake World!</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"工作原理\"><a href=\"#工作原理\" class=\"headerlink\" title=\"工作原理\"></a>工作原理</h4><hr>\n<p>**add_library(message STATIC Message.h Message.cpp) **：生成必要的构建指令，将指定<br>的源码编译到库中。 </p>\n<p>add_library 的第<strong>一个参数是目标名</strong>。整个 CMakeLists.txt 中，可使用相同的名称来引用库。</p>\n<p>生成的库的实际名称将由 CMake 通过在前面添加前缀 lib 和适当的扩展名作为后缀来形成。</p>\n<p>生成库是根据第二个参数( <strong>STATIC 或 SHARED</strong> )和操作系统确定的。</p>\n<hr>\n<p>**target_link_libraries(hello-world message) **: 将库链接到可执行文件。</p>\n<p>此命令还确保 hello-world 可执行文件可以正确地依赖于消息库。</p>\n<p>因此，在消息库链接到 hello-world 可执行文件之前，需要完成消息库的构建。</p>\n<p>编译成功后，构建目录包含 libmessage.a 一个静态库(在GNU/Linux上)和 hello-world 可执行文件。</p>\n<h4 id=\"add-library-其他参数\"><a href=\"#add-library-其他参数\" class=\"headerlink\" title=\"add_library 其他参数\"></a>add_library 其他参数</h4><hr>\n<ul>\n<li><strong>STATIC</strong>：用于创建<strong>静态库</strong>，即编译文件的打包存档，以便在链接其他目标时使用，例如：可执行文件。</li>\n<li><strong>SHARED</strong>：用于创建<strong>动态库</strong>，即可以动态链接，并在运行时加载的库。可以在 CMakeLists.txt 中使用 add_library(message SHARED Message.h Message.cpp) 从静态库切换到动态共享对象(DSO)。</li>\n<li><strong>OBJECT</strong>：可将给定 add_library 的列表中的源码编译到目标文件，不将它们归档到静态库中，也不能将它们链接到共享对象中。如果需要<strong>一次性创建静态库和动态库</strong>，那么使用对象库尤其有用。</li>\n<li><strong>MODULE</strong>：又为 DSO 组。与 SHARED 库不同，它们不链接到项目中的任何目标，不过可以进行动态加载。该参数可以用于构建<strong>运行时插件</strong>。</li>\n</ul>\n<h4 id=\"CMake-源代码\"><a href=\"#CMake-源代码\" class=\"headerlink\" title=\"CMake 源代码\"></a>CMake 源代码</h4><hr>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">cmake_minimum_required</span>(VERSION <span class=\"number\">3.5</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">project</span>(hello-world LANGUAGES CXX)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 创建目标——静态库。库的名称和源码文件名相同，具体代码如下：</span></span><br><span class=\"line\"><span class=\"keyword\">add_library</span>(<span class=\"keyword\">message</span></span><br><span class=\"line\">\t<span class=\"comment\"># 生成静态库</span></span><br><span class=\"line\">\tSTATIC</span><br><span class=\"line\">\t\t<span class=\"comment\"># 包含库文件</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">Message</span>.h</span><br><span class=\"line\">\t\t<span class=\"keyword\">Message</span>.cpp</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 生成可执行文件</span></span><br><span class=\"line\"><span class=\"keyword\">add_executable</span>(hello-world hello-world.cpp)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 链接目标库到可执行文件</span></span><br><span class=\"line\"><span class=\"keyword\">target_link_libraries</span>(hello-world <span class=\"keyword\">message</span>)</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"3-构建和链接静态库和动态库\"><a href=\"#3-构建和链接静态库和动态库\" class=\"headerlink\" title=\"3. 构建和链接静态库和动态库\"></a>3. 构建和链接静态库和动态库</h4><hr>\n<blockquote>\n<p>项目中会有单个源文件构建的多个可执行文件的可能。项目中有多个源文件，通常分布在不同子目录<br>中。这种实践有助于项目的源代码结构，而且支持模块化、代码重用和关注点分离。同时，这种分离可<br>以简化并加速项目的重新编译。本示例中，我们将展示如何将源代码编译到库中，以及如何链接这些<br>库。</p>\n</blockquote>\n<h4 id=\"具体实施\"><a href=\"#具体实施\" class=\"headerlink\" title=\"具体实施\"></a>具体实施</h4><hr>\n<ol>\n<li>创建目标——静态库。库的名称和源码文件名相同，具体代码如下：</li>\n</ol>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">add_libraries(<span class=\"keyword\">message</span></span><br><span class=\"line\">\tSTATIC</span><br><span class=\"line\">\t<span class=\"keyword\">Message</span>.h</span><br><span class=\"line\">\t<span class=\"keyword\">Message</span>.cpp</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li><p>创建 hello-world 可执行文件的目标部分不需要修改：</p>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">add_executable</span>(hello-world hello-world.cpp)</span><br></pre></td></tr></table></figure></li>\n<li><p>最后，将目标库链接到可执行目标：</p>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">target_link_libraries</span>(hello-world messgae)</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h4 id=\"编译\"><a href=\"#编译\" class=\"headerlink\" title=\"编译\"></a>编译</h4><hr>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\"><span class=\"built_in\">mkdir</span> build &amp;&amp; <span class=\"built_in\">cd</span> build</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">cmake ..</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">cmake --build .</span></span><br><span class=\"line\"></span><br><span class=\"line\">[ 50%] Built target message</span><br><span class=\"line\">Scanning dependencies of target hello-world</span><br><span class=\"line\">[ 75%] Building CXX object CMakeFiles/hello-world.dir/hello-world.cpp.o</span><br><span class=\"line\"><span class=\"meta prompt_\">[100%</span><span class=\"language-bash\">] Linking CXX executable hello-world</span></span><br><span class=\"line\"><span class=\"meta prompt_\">[100%</span><span class=\"language-bash\">] Built target hello-world</span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\"><span class=\"built_in\">ls</span>\t<span class=\"comment\"># 可以看到生成了 libmessage.a 静态库和可执行文件 hello-world</span></span></span><br><span class=\"line\">CMakeCache.txt  CMakeFiles  cmake_install.cmake  hello-world  libmessage.a  Makefile</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">./hello-world</span></span><br><span class=\"line\">This is my very nice message:</span><br><span class=\"line\">hello, CMake World!</span><br><span class=\"line\">This is my very nice message:</span><br><span class=\"line\">Goodbye, CMake World!</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"工作原理\"><a href=\"#工作原理\" class=\"headerlink\" title=\"工作原理\"></a>工作原理</h4><hr>\n<p>**add_library(message STATIC Message.h Message.cpp) **：生成必要的构建指令，将指定<br>的源码编译到库中。 </p>\n<p>add_library 的第<strong>一个参数是目标名</strong>。整个 CMakeLists.txt 中，可使用相同的名称来引用库。</p>\n<p>生成的库的实际名称将由 CMake 通过在前面添加前缀 lib 和适当的扩展名作为后缀来形成。</p>\n<p>生成库是根据第二个参数( <strong>STATIC 或 SHARED</strong> )和操作系统确定的。</p>\n<hr>\n<p>**target_link_libraries(hello-world message) **: 将库链接到可执行文件。</p>\n<p>此命令还确保 hello-world 可执行文件可以正确地依赖于消息库。</p>\n<p>因此，在消息库链接到 hello-world 可执行文件之前，需要完成消息库的构建。</p>\n<p>编译成功后，构建目录包含 libmessage.a 一个静态库(在GNU/Linux上)和 hello-world 可执行文件。</p>\n<h4 id=\"add-library-其他参数\"><a href=\"#add-library-其他参数\" class=\"headerlink\" title=\"add_library 其他参数\"></a>add_library 其他参数</h4><hr>\n<ul>\n<li><strong>STATIC</strong>：用于创建<strong>静态库</strong>，即编译文件的打包存档，以便在链接其他目标时使用，例如：可执行文件。</li>\n<li><strong>SHARED</strong>：用于创建<strong>动态库</strong>，即可以动态链接，并在运行时加载的库。可以在 CMakeLists.txt 中使用 add_library(message SHARED Message.h Message.cpp) 从静态库切换到动态共享对象(DSO)。</li>\n<li><strong>OBJECT</strong>：可将给定 add_library 的列表中的源码编译到目标文件，不将它们归档到静态库中，也不能将它们链接到共享对象中。如果需要<strong>一次性创建静态库和动态库</strong>，那么使用对象库尤其有用。</li>\n<li><strong>MODULE</strong>：又为 DSO 组。与 SHARED 库不同，它们不链接到项目中的任何目标，不过可以进行动态加载。该参数可以用于构建<strong>运行时插件</strong>。</li>\n</ul>\n<h4 id=\"CMake-源代码\"><a href=\"#CMake-源代码\" class=\"headerlink\" title=\"CMake 源代码\"></a>CMake 源代码</h4><hr>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">cmake_minimum_required</span>(VERSION <span class=\"number\">3.5</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">project</span>(hello-world LANGUAGES CXX)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 创建目标——静态库。库的名称和源码文件名相同，具体代码如下：</span></span><br><span class=\"line\"><span class=\"keyword\">add_library</span>(<span class=\"keyword\">message</span></span><br><span class=\"line\">\t<span class=\"comment\"># 生成静态库</span></span><br><span class=\"line\">\tSTATIC</span><br><span class=\"line\">\t\t<span class=\"comment\"># 包含库文件</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">Message</span>.h</span><br><span class=\"line\">\t\t<span class=\"keyword\">Message</span>.cpp</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 生成可执行文件</span></span><br><span class=\"line\"><span class=\"keyword\">add_executable</span>(hello-world hello-world.cpp)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 链接目标库到可执行文件</span></span><br><span class=\"line\"><span class=\"keyword\">target_link_libraries</span>(hello-world <span class=\"keyword\">message</span>)</span><br></pre></td></tr></table></figure>\n\n"},{"title":"4.用条件句控制编译","author":"连思鑫","date":"2023-03-02T11:08:00.000Z","_content":"### 4.用条件句控制编译\n\n\n#### 实现效果\n------\n\n1. 将 Message.hpp 和 Message.cpp 构建成一个库(静态或动态)，然后将生成库链接到 hello-\nworld 可执行文件中。\n2. 将 Message.hpp ， Message.cpp 和 hello-world.cpp 构建成一个可执行文件，但不生成任\n何一个库。\n\n#### 实现方法\n\n------\n\n1. ```cmake\n   # 首先，定义最低CMake版本、项目名称和支持的语言：\n   cmake_minimum_required(VERSION 3.5)\n   \n   project(hello-world LANGUAGES CXX)\n   ```\n\n2. ``` cmake\n   # 我们引入了一个新变量 USE_LIBRARY ，这是一个逻辑变量，值为 OFF 。我们还打印了它的值：\n   set(USE_LIBRARY OFF)\n   message(STATUS \"Compile sources into a library? ${USE_LIBRARY}\")\n   ```\n\n3. ``` cmake\n   # CMake中定义 BUILD_SHARED_LIBS 全局变量，并设置为 OFF 。调用 add_library 并省略第二个参数，将构建一个静态库\n   set(BUILD_SHARED_LIBS OFF)\n   ```\n\n4. ``` cmake\n   # 然后，引入一个变量 _sources，包含所有源文件和头文件：\n   list(APPEND _sources Message.h Message.cpp)\n   ```\n\n5.  ``` cmake\n   # 然后，引入一个基于 USE_LIBRARY 值的 if-else 语句。如果逻辑为真，则 Message.hpp 和 Message.cpp 将打包成一个库：\n   if (USE_LIBRARY)\n   \tadd_library(message ${_source})\n   \tadd_executable(hello-world hello-world.cpp)\n   \ttarget_link_libraries(hello-world message)\n   else()\n   \tadd_executable(hello-world hello-world.cpp ${_sources})\n   endif()\n    ```\n\n#### 工作原理\n\n------\n\n> 我们介绍了两个变量： USE_LIBRARY 和 BUILD_SHARED_LIBS 。这两个变量都设置为 OFF 。\n>\n> 如CMake语言文档中描述，逻辑真或假可以用多种方式表示：\n> 如果将逻辑变量设置为以下任意一种： 1 、 ON 、 YES 、 true 、 Y 或非零数，则逻辑变量为 true 。\n> 如果将逻辑变量设置为以下任意一种： 0 、 OFF 、 NO 、 false 、 N 、 IGNORE、\n> NOTFOUND 、空字符串，或者以 -NOTFOUND 为后缀，则逻辑变量为 false 。\n> USE_LIBRARY 变量将在第一个和第二个行为之间切换。 BUILD_SHARED_LIBS 是CMake的一个全局标志。因为CMake内部要查询 BUILD_SHARED_LIBS 全局变量，所以 add_library 命令可以在不传递 STATIC/SHARED/OBJECT 参数的情况下调用；如果为 false 或未定义，将生成一个静态库。\n>\n> 这个例子说明，可以引入条件来控制CMake中的执行流。但是，当前的设置不允许从外部切换，不需要\n> 手动修改 CMakeLists.txt 。原则上，我们希望能够向用户开放所有设置，这样就可以在不修改构建\n> 代码的情况下调整配置，稍后将展示如何做到这一点。","source":"_posts/4-用条件句控制编译.md","raw":"title: 4.用条件句控制编译\nauthor: 连思鑫\ntags:\n  - cmake\ncategories:\n  - ..\n  - cmake\n  - 第一章：从简单的可执行文件到库\ndate: 2023-03-02 19:08:00\n---\n### 4.用条件句控制编译\n\n\n#### 实现效果\n------\n\n1. 将 Message.hpp 和 Message.cpp 构建成一个库(静态或动态)，然后将生成库链接到 hello-\nworld 可执行文件中。\n2. 将 Message.hpp ， Message.cpp 和 hello-world.cpp 构建成一个可执行文件，但不生成任\n何一个库。\n\n#### 实现方法\n\n------\n\n1. ```cmake\n   # 首先，定义最低CMake版本、项目名称和支持的语言：\n   cmake_minimum_required(VERSION 3.5)\n   \n   project(hello-world LANGUAGES CXX)\n   ```\n\n2. ``` cmake\n   # 我们引入了一个新变量 USE_LIBRARY ，这是一个逻辑变量，值为 OFF 。我们还打印了它的值：\n   set(USE_LIBRARY OFF)\n   message(STATUS \"Compile sources into a library? ${USE_LIBRARY}\")\n   ```\n\n3. ``` cmake\n   # CMake中定义 BUILD_SHARED_LIBS 全局变量，并设置为 OFF 。调用 add_library 并省略第二个参数，将构建一个静态库\n   set(BUILD_SHARED_LIBS OFF)\n   ```\n\n4. ``` cmake\n   # 然后，引入一个变量 _sources，包含所有源文件和头文件：\n   list(APPEND _sources Message.h Message.cpp)\n   ```\n\n5.  ``` cmake\n   # 然后，引入一个基于 USE_LIBRARY 值的 if-else 语句。如果逻辑为真，则 Message.hpp 和 Message.cpp 将打包成一个库：\n   if (USE_LIBRARY)\n   \tadd_library(message ${_source})\n   \tadd_executable(hello-world hello-world.cpp)\n   \ttarget_link_libraries(hello-world message)\n   else()\n   \tadd_executable(hello-world hello-world.cpp ${_sources})\n   endif()\n    ```\n\n#### 工作原理\n\n------\n\n> 我们介绍了两个变量： USE_LIBRARY 和 BUILD_SHARED_LIBS 。这两个变量都设置为 OFF 。\n>\n> 如CMake语言文档中描述，逻辑真或假可以用多种方式表示：\n> 如果将逻辑变量设置为以下任意一种： 1 、 ON 、 YES 、 true 、 Y 或非零数，则逻辑变量为 true 。\n> 如果将逻辑变量设置为以下任意一种： 0 、 OFF 、 NO 、 false 、 N 、 IGNORE、\n> NOTFOUND 、空字符串，或者以 -NOTFOUND 为后缀，则逻辑变量为 false 。\n> USE_LIBRARY 变量将在第一个和第二个行为之间切换。 BUILD_SHARED_LIBS 是CMake的一个全局标志。因为CMake内部要查询 BUILD_SHARED_LIBS 全局变量，所以 add_library 命令可以在不传递 STATIC/SHARED/OBJECT 参数的情况下调用；如果为 false 或未定义，将生成一个静态库。\n>\n> 这个例子说明，可以引入条件来控制CMake中的执行流。但是，当前的设置不允许从外部切换，不需要\n> 手动修改 CMakeLists.txt 。原则上，我们希望能够向用户开放所有设置，这样就可以在不修改构建\n> 代码的情况下调整配置，稍后将展示如何做到这一点。","slug":"4-用条件句控制编译","published":1,"updated":"2023-03-02T11:09:55.381Z","_id":"clifr2v1n000j14uo5yb33xfr","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"4-用条件句控制编译\"><a href=\"#4-用条件句控制编译\" class=\"headerlink\" title=\"4.用条件句控制编译\"></a>4.用条件句控制编译</h3><h4 id=\"实现效果\"><a href=\"#实现效果\" class=\"headerlink\" title=\"实现效果\"></a>实现效果</h4><hr>\n<ol>\n<li>将 Message.hpp 和 Message.cpp 构建成一个库(静态或动态)，然后将生成库链接到 hello-<br>world 可执行文件中。</li>\n<li>将 Message.hpp ， Message.cpp 和 hello-world.cpp 构建成一个可执行文件，但不生成任<br>何一个库。</li>\n</ol>\n<h4 id=\"实现方法\"><a href=\"#实现方法\" class=\"headerlink\" title=\"实现方法\"></a>实现方法</h4><hr>\n<ol>\n<li><p>```cmake</p>\n<h1 id=\"首先，定义最低CMake版本、项目名称和支持的语言：\"><a href=\"#首先，定义最低CMake版本、项目名称和支持的语言：\" class=\"headerlink\" title=\"首先，定义最低CMake版本、项目名称和支持的语言：\"></a>首先，定义最低CMake版本、项目名称和支持的语言：</h1><p>cmake_minimum_required(VERSION 3.5)</p>\n<p>project(hello-world LANGUAGES CXX)</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">2. ``` cmake</span><br><span class=\"line\">   # 我们引入了一个新变量 USE_LIBRARY ，这是一个逻辑变量，值为 OFF 。我们还打印了它的值：</span><br><span class=\"line\">   set(USE_LIBRARY OFF)</span><br><span class=\"line\">   message(STATUS &quot;Compile sources into a library? $&#123;USE_LIBRARY&#125;&quot;)</span><br></pre></td></tr></table></figure></li>\n<li><p>``` cmake</p>\n<h1 id=\"CMake中定义-BUILD-SHARED-LIBS-全局变量，并设置为-OFF-。调用-add-library-并省略第二个参数，将构建一个静态库\"><a href=\"#CMake中定义-BUILD-SHARED-LIBS-全局变量，并设置为-OFF-。调用-add-library-并省略第二个参数，将构建一个静态库\" class=\"headerlink\" title=\"CMake中定义 BUILD_SHARED_LIBS 全局变量，并设置为 OFF 。调用 add_library 并省略第二个参数，将构建一个静态库\"></a>CMake中定义 BUILD_SHARED_LIBS 全局变量，并设置为 OFF 。调用 add_library 并省略第二个参数，将构建一个静态库</h1><p>set(BUILD_SHARED_LIBS OFF)</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">4. ``` cmake</span><br><span class=\"line\">   # 然后，引入一个变量 _sources，包含所有源文件和头文件：</span><br><span class=\"line\">   list(APPEND _sources Message.h Message.cpp)</span><br></pre></td></tr></table></figure></li>\n<li><pre><code class=\"cmake\"># 然后，引入一个基于 USE_LIBRARY 值的 if-else 语句。如果逻辑为真，则 Message.hpp 和 Message.cpp 将打包成一个库：\nif (USE_LIBRARY)\n    add_library(message $&#123;_source&#125;)\n    add_executable(hello-world hello-world.cpp)\n    target_link_libraries(hello-world message)\nelse()\n    add_executable(hello-world hello-world.cpp $&#123;_sources&#125;)\nendif()\n</code></pre>\n</li>\n</ol>\n<h4 id=\"工作原理\"><a href=\"#工作原理\" class=\"headerlink\" title=\"工作原理\"></a>工作原理</h4><hr>\n<blockquote>\n<p>我们介绍了两个变量： USE_LIBRARY 和 BUILD_SHARED_LIBS 。这两个变量都设置为 OFF 。</p>\n<p>如CMake语言文档中描述，逻辑真或假可以用多种方式表示：<br>如果将逻辑变量设置为以下任意一种： 1 、 ON 、 YES 、 true 、 Y 或非零数，则逻辑变量为 true 。<br>如果将逻辑变量设置为以下任意一种： 0 、 OFF 、 NO 、 false 、 N 、 IGNORE、<br>NOTFOUND 、空字符串，或者以 -NOTFOUND 为后缀，则逻辑变量为 false 。<br>USE_LIBRARY 变量将在第一个和第二个行为之间切换。 BUILD_SHARED_LIBS 是CMake的一个全局标志。因为CMake内部要查询 BUILD_SHARED_LIBS 全局变量，所以 add_library 命令可以在不传递 STATIC/SHARED/OBJECT 参数的情况下调用；如果为 false 或未定义，将生成一个静态库。</p>\n<p>这个例子说明，可以引入条件来控制CMake中的执行流。但是，当前的设置不允许从外部切换，不需要<br>手动修改 CMakeLists.txt 。原则上，我们希望能够向用户开放所有设置，这样就可以在不修改构建<br>代码的情况下调整配置，稍后将展示如何做到这一点。</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"4-用条件句控制编译\"><a href=\"#4-用条件句控制编译\" class=\"headerlink\" title=\"4.用条件句控制编译\"></a>4.用条件句控制编译</h3><h4 id=\"实现效果\"><a href=\"#实现效果\" class=\"headerlink\" title=\"实现效果\"></a>实现效果</h4><hr>\n<ol>\n<li>将 Message.hpp 和 Message.cpp 构建成一个库(静态或动态)，然后将生成库链接到 hello-<br>world 可执行文件中。</li>\n<li>将 Message.hpp ， Message.cpp 和 hello-world.cpp 构建成一个可执行文件，但不生成任<br>何一个库。</li>\n</ol>\n<h4 id=\"实现方法\"><a href=\"#实现方法\" class=\"headerlink\" title=\"实现方法\"></a>实现方法</h4><hr>\n<ol>\n<li><p>```cmake</p>\n<h1 id=\"首先，定义最低CMake版本、项目名称和支持的语言：\"><a href=\"#首先，定义最低CMake版本、项目名称和支持的语言：\" class=\"headerlink\" title=\"首先，定义最低CMake版本、项目名称和支持的语言：\"></a>首先，定义最低CMake版本、项目名称和支持的语言：</h1><p>cmake_minimum_required(VERSION 3.5)</p>\n<p>project(hello-world LANGUAGES CXX)</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">2. ``` cmake</span><br><span class=\"line\">   # 我们引入了一个新变量 USE_LIBRARY ，这是一个逻辑变量，值为 OFF 。我们还打印了它的值：</span><br><span class=\"line\">   set(USE_LIBRARY OFF)</span><br><span class=\"line\">   message(STATUS &quot;Compile sources into a library? $&#123;USE_LIBRARY&#125;&quot;)</span><br></pre></td></tr></table></figure></li>\n<li><p>``` cmake</p>\n<h1 id=\"CMake中定义-BUILD-SHARED-LIBS-全局变量，并设置为-OFF-。调用-add-library-并省略第二个参数，将构建一个静态库\"><a href=\"#CMake中定义-BUILD-SHARED-LIBS-全局变量，并设置为-OFF-。调用-add-library-并省略第二个参数，将构建一个静态库\" class=\"headerlink\" title=\"CMake中定义 BUILD_SHARED_LIBS 全局变量，并设置为 OFF 。调用 add_library 并省略第二个参数，将构建一个静态库\"></a>CMake中定义 BUILD_SHARED_LIBS 全局变量，并设置为 OFF 。调用 add_library 并省略第二个参数，将构建一个静态库</h1><p>set(BUILD_SHARED_LIBS OFF)</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">4. ``` cmake</span><br><span class=\"line\">   # 然后，引入一个变量 _sources，包含所有源文件和头文件：</span><br><span class=\"line\">   list(APPEND _sources Message.h Message.cpp)</span><br></pre></td></tr></table></figure></li>\n<li><pre><code class=\"cmake\"># 然后，引入一个基于 USE_LIBRARY 值的 if-else 语句。如果逻辑为真，则 Message.hpp 和 Message.cpp 将打包成一个库：\nif (USE_LIBRARY)\n    add_library(message $&#123;_source&#125;)\n    add_executable(hello-world hello-world.cpp)\n    target_link_libraries(hello-world message)\nelse()\n    add_executable(hello-world hello-world.cpp $&#123;_sources&#125;)\nendif()\n</code></pre>\n</li>\n</ol>\n<h4 id=\"工作原理\"><a href=\"#工作原理\" class=\"headerlink\" title=\"工作原理\"></a>工作原理</h4><hr>\n<blockquote>\n<p>我们介绍了两个变量： USE_LIBRARY 和 BUILD_SHARED_LIBS 。这两个变量都设置为 OFF 。</p>\n<p>如CMake语言文档中描述，逻辑真或假可以用多种方式表示：<br>如果将逻辑变量设置为以下任意一种： 1 、 ON 、 YES 、 true 、 Y 或非零数，则逻辑变量为 true 。<br>如果将逻辑变量设置为以下任意一种： 0 、 OFF 、 NO 、 false 、 N 、 IGNORE、<br>NOTFOUND 、空字符串，或者以 -NOTFOUND 为后缀，则逻辑变量为 false 。<br>USE_LIBRARY 变量将在第一个和第二个行为之间切换。 BUILD_SHARED_LIBS 是CMake的一个全局标志。因为CMake内部要查询 BUILD_SHARED_LIBS 全局变量，所以 add_library 命令可以在不传递 STATIC/SHARED/OBJECT 参数的情况下调用；如果为 false 或未定义，将生成一个静态库。</p>\n<p>这个例子说明，可以引入条件来控制CMake中的执行流。但是，当前的设置不允许从外部切换，不需要<br>手动修改 CMakeLists.txt 。原则上，我们希望能够向用户开放所有设置，这样就可以在不修改构建<br>代码的情况下调整配置，稍后将展示如何做到这一点。</p>\n</blockquote>\n"},{"title":"4.保存更改","author":"连思鑫","date":"2023-03-01T14:50:00.000Z","_content":"\n\n![Saving changes](https://wac-cdn.atlassian.com/dam/jcr:75f75cb6-a6ab-4f0b-ab29-e366914f513c/hero.svg?cdnVersion=kg)\n\n***git add / git commit / git diff / git stash / .gitignore***\n\n\n“保存”这个概念在 Git 等版本控制系统和 Word 等文本编辑应用中不太一样。传统软件里的“保存”在 Git 里被叫做“提交”（commit）。 我们常说的的保存可以理解成在文件系统中覆盖一个已有的文件或者创建一个新的文件。而在 Git 中，提交这个操作作用于若干个文件和目录。\n\n在 Git 和 SVN 里保存更改也不一样。SVN 提交或检入（check-in）将会推送到远端的中央服务器。也就是说 SVN 的提交需要联网才能完全“保存”项目更改。Git 提交可以在本地完成，然后再使用`git push -u origin master`命令推送到远端服务器。这两种方法的区别体现了两种架构设计的本质区别。Git 是一个分布式的应用，而 SVN 是一个中心化的应用。分布式应用一般来说更可靠，因为它们不存在中央服务器这样的单点故障。\n\n`git add`、`git status`和`git commit`这三个命令通常一起使用，将 Git 项目当前的状态保存成一份快照。\n\nGit 还有另一个保存机制：“储藏”（stash）。储藏是一个临时的储存区域，保存还没准备好提交的更改。储藏操作作用于工作目录，三个文件树中的第一棵。它有很多用法，访问 git stash 页面了解更多。\n\nGit 仓库可以通过设置忽略一些文件或目录。Git 将不会保存这些文件的任何更改。Git 有多种方式管理忽略文件列表。访问 git ignore 页面了解更多 Git 忽略文件设置。\n\n## git add\n\n`git add` 命令将工作目录中的变化添加到暂存区。它告诉 Git 你想要在下一次提交时包含这个文件的更新。但是，`git add` 不会实质上地影响你的仓库——在你运行 `git commit` 前更改都还没有真正被记录。\n\n使用这些命令的同时，你还需要 `git status` 来查看工作目录和暂存区的状态。\n\n### 用法\n\n```\ngit add <file>\n```\n\n将 `<file>` 中的更改加入下次提交的缓存。\n\n```\ngit add <directory>\n```\n\n将 `<directory>` 下的更改加入下次提交的缓存。\n\n```\ngit add -i\n```\n\n开始交互式的缓存，你可以选择文件的一部分加入到下次提交缓存。它会向你展示一堆更改，等待你输入一个命令。`y` 将这块更改加入缓存，`n` 忽略这块更改，`s` 将它分割成更小的块，`e` 手动编辑这块更改，以及 `q` 退出。\n\n### 讨论\n\n`git add` 和 `git commit` 这两个命令组成了最基本的 Git 工作流。每一个 Git 用户都需要理解这两个命令，不管他们团队的协作模型是如何的。我有一千种方式可以将项目版本记录在仓库的历史中。\n\n在一个只有编辑、缓存、提交这样基本流程的项目上开发。首先，你要在工作目录中编辑你的文件。当你准备备份项目的当前状态时，你通过 `git add` 来缓存更改。当你对缓存的快照满意之后，你通过 `git commit` 将它提交到你的项目历史中去。\n\n![Git Tutorial: git add Snapshot](https://wac-cdn.atlassian.com/dam/jcr:0f27e004-f2f5-4890-921d-65fa77ba2774/01.svg)\n\n`git add` 命令不能和 `svn add` 混在一起理解，后者将文件添加到仓库中。而 `git add` 发生于更抽象的 *更改* 层面。也就是说，`git add` 在每次你修改一个文件时都需要被调用，而 `svn add` 只需要每个文件调用一次。这听上去很多余，但这样的工作流使得一个项目更容易组织。\n\n#### 缓存区\n\n缓存区是 Git 更为独特的地方之一，如果你是从 SVN（甚至是 Mercurial）迁移而来，那你可得花点时间理解了。你可以简单地把它想成是工作目录和项目历史之间的缓冲区。\n\n缓存允许你在实际提交到项目历史之前，将相关的更改组合成一份高度专注的快照，而不是将你上次提交以后产生的所有更改一并提交。也就是说你可以更改各种不相关的文件，然后回过去将它们按逻辑切分，将相关的更改添加到缓存，一份一份提交。在任何修改控制系统中，很重要的一点是提交必须是原子性的，以便于追踪 bug，并用最小的代价回滚更改。\n\n### 例子\n\n当你开始新项目的时候，`git add` 和 `svn import` 类似。为了创建当前目录的初始提交，使用下面两个命令：\n\n```\ngit add .\ngit commit\n```\n\n当你项目设置好之后，新的文件可以通过路径传递给 `git add` 来添加：\n\n```\ngit add hello.py\ngit commit\n```\n\n上面的命令同样可以用于记录已有文件的更改。重复一次，Git 不会区分缓存的更改来自新文件，还是仓库中已有的文件。\n\n## git commit\n\n`git commit`命令将缓存的快照提交到项目历史。提交的快照可以认为是项目安全的版本，Git 永远不会改变它们，除非你这么要求。和 `git add` 一样，这是最重要的 Git 命令之一。\n\n尽管和它和 `svn commit` 名字一样，但实际上它们毫无关联。快照被提交到本地仓库，不会和其他 Git 仓库有任何交互。\n\n### 用法\n\n```\ngit commit\n```\n\n提交已经缓存的快照。它会运行文本编辑器，等待你输入提交信息。当你输入信息之后，保存文件，关闭编辑器，创建实际的提交。\n\n```\ngit commit -m \"<message>\"\n```\n\n提交已经缓存的快照。但将 `<message>` 作为提交信息，而不是运行文本编辑器。\n\n```\ngit commit -a\n```\n\n提交一份包含工作目录所有更改的快照。它只包含跟踪过的文件的更改（那些之前已经通过 `git add` 添加过的文件）。\n\n### 讨论\n\n快照总是提交到 *本地* 仓库。这一点和 SVN 截然不同，后者的工作拷贝提交到中央仓库。而 Git 不会强制你和中央仓库进行交互，直到你准备好了。就像缓存区是工作目录和项目历史之间的缓冲地带，每个开发者的本地仓库是他们贡献的代码和中央仓库之间的缓冲地带。\n\n这一点改变了 Git 用户基本的开发模型。Git 开发者可以在本地仓库中积累一些提交，而不是一发生更改就直接提交到中央仓库。这对于 SVN 风格的协作有着诸多优点：更容易将功能切分成原子性的提交，让相关的提交组合在一起，发布到中央仓库之前整理好本地的历史。开发者得以在一个隔离的环境中工作，直到他们方便的时候再整合代码。\n\n#### 记录快照，而不是记录差异\n\nSVN 和 Git 除了使用上存在巨大差异，它们底层的实现同样遵循截然不同的设计哲学。SVN 追踪文件的 *变化* ，而 Git 的版本控制模型基于 *快照* 。比如说，一个 SVN 提交由仓库中原文件相比的差异（diff）组成。而 Git 在每次提交中记录文件的 *完整内容* 。\n\n![Git Tutorial: Snapshots, Not Differences](https://www.atlassian.com/dam/jcr:7406fe56-d36d-44cf-92e3-b28e4bae36f8/02.svg)\n\n这让很多 Git 操作比 SVN 来的快得多，因为文件的某个版本不需要通过版本间的差异组装得到——每个文件完整的修改能立刻从 Git 的内部数据库中得到。\n\nGit 的快照模型对它版本控制模型的方方面面都有着深远的影响，从分支到合并工具，再到协作工作流，以至于影响了所有特性。\n\n### 例子\n\n下面这个栗子假设你编辑了 `hello.py` 文件的一些内容，并且准备好将它提交到项目历史。首先，你需要用 `git add` 缓存文件，然后提交缓存的快照。\n\n```\ngit add hello.py\ngit commit\n```\n\n它会打开一个文件编辑器（可以通过 `git config` 设置) 询问提交信息，同时列出将被提交的文件。\n\n```\n# Please enter the commit message for your changes. Lines starting\n# with '#' will be ignored, and an empty message aborts the commit.\n# On branch master\n# Changes to be committed:\n# (use \"git reset HEAD <file>...\" to unstage)\n#\n#modified: hello.py\n```\n\nGit 对提交信息没有特定的格式限制，但约定俗成的格式是：在第一行用 50 个以内的字符总结这个提交，留一空行，然后详细阐述具体的更改。比如：\n\n```\nChange the message displayed by hello.py\n\n- Update the sayHello() function to output the user's name\n- Change the sayGoodbye() function to a friendlier message\n```\n\n注意，很多开发者倾向于在提交信息中使用一般现在时态。这样看起来更像是对仓库进行的操作，让很多改写历史的操作更加符合直觉。\n\n> 这篇教程来源于[**「git-recipes」**](https://github.com/geeeeeeeeek/git-recipes/)","source":"_posts/4-保存更改.md","raw":"title: 4.保存更改\nauthor: 连思鑫\ntags:\n  - git\ncategories:\n  - ..\n  - git\n  - ''\ndate: 2023-03-01 22:50:00\n---\n\n\n![Saving changes](https://wac-cdn.atlassian.com/dam/jcr:75f75cb6-a6ab-4f0b-ab29-e366914f513c/hero.svg?cdnVersion=kg)\n\n***git add / git commit / git diff / git stash / .gitignore***\n\n\n“保存”这个概念在 Git 等版本控制系统和 Word 等文本编辑应用中不太一样。传统软件里的“保存”在 Git 里被叫做“提交”（commit）。 我们常说的的保存可以理解成在文件系统中覆盖一个已有的文件或者创建一个新的文件。而在 Git 中，提交这个操作作用于若干个文件和目录。\n\n在 Git 和 SVN 里保存更改也不一样。SVN 提交或检入（check-in）将会推送到远端的中央服务器。也就是说 SVN 的提交需要联网才能完全“保存”项目更改。Git 提交可以在本地完成，然后再使用`git push -u origin master`命令推送到远端服务器。这两种方法的区别体现了两种架构设计的本质区别。Git 是一个分布式的应用，而 SVN 是一个中心化的应用。分布式应用一般来说更可靠，因为它们不存在中央服务器这样的单点故障。\n\n`git add`、`git status`和`git commit`这三个命令通常一起使用，将 Git 项目当前的状态保存成一份快照。\n\nGit 还有另一个保存机制：“储藏”（stash）。储藏是一个临时的储存区域，保存还没准备好提交的更改。储藏操作作用于工作目录，三个文件树中的第一棵。它有很多用法，访问 git stash 页面了解更多。\n\nGit 仓库可以通过设置忽略一些文件或目录。Git 将不会保存这些文件的任何更改。Git 有多种方式管理忽略文件列表。访问 git ignore 页面了解更多 Git 忽略文件设置。\n\n## git add\n\n`git add` 命令将工作目录中的变化添加到暂存区。它告诉 Git 你想要在下一次提交时包含这个文件的更新。但是，`git add` 不会实质上地影响你的仓库——在你运行 `git commit` 前更改都还没有真正被记录。\n\n使用这些命令的同时，你还需要 `git status` 来查看工作目录和暂存区的状态。\n\n### 用法\n\n```\ngit add <file>\n```\n\n将 `<file>` 中的更改加入下次提交的缓存。\n\n```\ngit add <directory>\n```\n\n将 `<directory>` 下的更改加入下次提交的缓存。\n\n```\ngit add -i\n```\n\n开始交互式的缓存，你可以选择文件的一部分加入到下次提交缓存。它会向你展示一堆更改，等待你输入一个命令。`y` 将这块更改加入缓存，`n` 忽略这块更改，`s` 将它分割成更小的块，`e` 手动编辑这块更改，以及 `q` 退出。\n\n### 讨论\n\n`git add` 和 `git commit` 这两个命令组成了最基本的 Git 工作流。每一个 Git 用户都需要理解这两个命令，不管他们团队的协作模型是如何的。我有一千种方式可以将项目版本记录在仓库的历史中。\n\n在一个只有编辑、缓存、提交这样基本流程的项目上开发。首先，你要在工作目录中编辑你的文件。当你准备备份项目的当前状态时，你通过 `git add` 来缓存更改。当你对缓存的快照满意之后，你通过 `git commit` 将它提交到你的项目历史中去。\n\n![Git Tutorial: git add Snapshot](https://wac-cdn.atlassian.com/dam/jcr:0f27e004-f2f5-4890-921d-65fa77ba2774/01.svg)\n\n`git add` 命令不能和 `svn add` 混在一起理解，后者将文件添加到仓库中。而 `git add` 发生于更抽象的 *更改* 层面。也就是说，`git add` 在每次你修改一个文件时都需要被调用，而 `svn add` 只需要每个文件调用一次。这听上去很多余，但这样的工作流使得一个项目更容易组织。\n\n#### 缓存区\n\n缓存区是 Git 更为独特的地方之一，如果你是从 SVN（甚至是 Mercurial）迁移而来，那你可得花点时间理解了。你可以简单地把它想成是工作目录和项目历史之间的缓冲区。\n\n缓存允许你在实际提交到项目历史之前，将相关的更改组合成一份高度专注的快照，而不是将你上次提交以后产生的所有更改一并提交。也就是说你可以更改各种不相关的文件，然后回过去将它们按逻辑切分，将相关的更改添加到缓存，一份一份提交。在任何修改控制系统中，很重要的一点是提交必须是原子性的，以便于追踪 bug，并用最小的代价回滚更改。\n\n### 例子\n\n当你开始新项目的时候，`git add` 和 `svn import` 类似。为了创建当前目录的初始提交，使用下面两个命令：\n\n```\ngit add .\ngit commit\n```\n\n当你项目设置好之后，新的文件可以通过路径传递给 `git add` 来添加：\n\n```\ngit add hello.py\ngit commit\n```\n\n上面的命令同样可以用于记录已有文件的更改。重复一次，Git 不会区分缓存的更改来自新文件，还是仓库中已有的文件。\n\n## git commit\n\n`git commit`命令将缓存的快照提交到项目历史。提交的快照可以认为是项目安全的版本，Git 永远不会改变它们，除非你这么要求。和 `git add` 一样，这是最重要的 Git 命令之一。\n\n尽管和它和 `svn commit` 名字一样，但实际上它们毫无关联。快照被提交到本地仓库，不会和其他 Git 仓库有任何交互。\n\n### 用法\n\n```\ngit commit\n```\n\n提交已经缓存的快照。它会运行文本编辑器，等待你输入提交信息。当你输入信息之后，保存文件，关闭编辑器，创建实际的提交。\n\n```\ngit commit -m \"<message>\"\n```\n\n提交已经缓存的快照。但将 `<message>` 作为提交信息，而不是运行文本编辑器。\n\n```\ngit commit -a\n```\n\n提交一份包含工作目录所有更改的快照。它只包含跟踪过的文件的更改（那些之前已经通过 `git add` 添加过的文件）。\n\n### 讨论\n\n快照总是提交到 *本地* 仓库。这一点和 SVN 截然不同，后者的工作拷贝提交到中央仓库。而 Git 不会强制你和中央仓库进行交互，直到你准备好了。就像缓存区是工作目录和项目历史之间的缓冲地带，每个开发者的本地仓库是他们贡献的代码和中央仓库之间的缓冲地带。\n\n这一点改变了 Git 用户基本的开发模型。Git 开发者可以在本地仓库中积累一些提交，而不是一发生更改就直接提交到中央仓库。这对于 SVN 风格的协作有着诸多优点：更容易将功能切分成原子性的提交，让相关的提交组合在一起，发布到中央仓库之前整理好本地的历史。开发者得以在一个隔离的环境中工作，直到他们方便的时候再整合代码。\n\n#### 记录快照，而不是记录差异\n\nSVN 和 Git 除了使用上存在巨大差异，它们底层的实现同样遵循截然不同的设计哲学。SVN 追踪文件的 *变化* ，而 Git 的版本控制模型基于 *快照* 。比如说，一个 SVN 提交由仓库中原文件相比的差异（diff）组成。而 Git 在每次提交中记录文件的 *完整内容* 。\n\n![Git Tutorial: Snapshots, Not Differences](https://www.atlassian.com/dam/jcr:7406fe56-d36d-44cf-92e3-b28e4bae36f8/02.svg)\n\n这让很多 Git 操作比 SVN 来的快得多，因为文件的某个版本不需要通过版本间的差异组装得到——每个文件完整的修改能立刻从 Git 的内部数据库中得到。\n\nGit 的快照模型对它版本控制模型的方方面面都有着深远的影响，从分支到合并工具，再到协作工作流，以至于影响了所有特性。\n\n### 例子\n\n下面这个栗子假设你编辑了 `hello.py` 文件的一些内容，并且准备好将它提交到项目历史。首先，你需要用 `git add` 缓存文件，然后提交缓存的快照。\n\n```\ngit add hello.py\ngit commit\n```\n\n它会打开一个文件编辑器（可以通过 `git config` 设置) 询问提交信息，同时列出将被提交的文件。\n\n```\n# Please enter the commit message for your changes. Lines starting\n# with '#' will be ignored, and an empty message aborts the commit.\n# On branch master\n# Changes to be committed:\n# (use \"git reset HEAD <file>...\" to unstage)\n#\n#modified: hello.py\n```\n\nGit 对提交信息没有特定的格式限制，但约定俗成的格式是：在第一行用 50 个以内的字符总结这个提交，留一空行，然后详细阐述具体的更改。比如：\n\n```\nChange the message displayed by hello.py\n\n- Update the sayHello() function to output the user's name\n- Change the sayGoodbye() function to a friendlier message\n```\n\n注意，很多开发者倾向于在提交信息中使用一般现在时态。这样看起来更像是对仓库进行的操作，让很多改写历史的操作更加符合直觉。\n\n> 这篇教程来源于[**「git-recipes」**](https://github.com/geeeeeeeeek/git-recipes/)","slug":"4-保存更改","published":1,"updated":"2023-03-01T14:51:41.884Z","_id":"clifr2v1o000l14uo2gn456w9","comments":1,"layout":"post","photos":[],"link":"","content":"<p><img src=\"https://wac-cdn.atlassian.com/dam/jcr:75f75cb6-a6ab-4f0b-ab29-e366914f513c/hero.svg?cdnVersion=kg\" alt=\"Saving changes\"></p>\n<p><em><strong>git add / git commit / git diff / git stash / .gitignore</strong></em></p>\n<p>“保存”这个概念在 Git 等版本控制系统和 Word 等文本编辑应用中不太一样。传统软件里的“保存”在 Git 里被叫做“提交”（commit）。 我们常说的的保存可以理解成在文件系统中覆盖一个已有的文件或者创建一个新的文件。而在 Git 中，提交这个操作作用于若干个文件和目录。</p>\n<p>在 Git 和 SVN 里保存更改也不一样。SVN 提交或检入（check-in）将会推送到远端的中央服务器。也就是说 SVN 的提交需要联网才能完全“保存”项目更改。Git 提交可以在本地完成，然后再使用<code>git push -u origin master</code>命令推送到远端服务器。这两种方法的区别体现了两种架构设计的本质区别。Git 是一个分布式的应用，而 SVN 是一个中心化的应用。分布式应用一般来说更可靠，因为它们不存在中央服务器这样的单点故障。</p>\n<p><code>git add</code>、<code>git status</code>和<code>git commit</code>这三个命令通常一起使用，将 Git 项目当前的状态保存成一份快照。</p>\n<p>Git 还有另一个保存机制：“储藏”（stash）。储藏是一个临时的储存区域，保存还没准备好提交的更改。储藏操作作用于工作目录，三个文件树中的第一棵。它有很多用法，访问 git stash 页面了解更多。</p>\n<p>Git 仓库可以通过设置忽略一些文件或目录。Git 将不会保存这些文件的任何更改。Git 有多种方式管理忽略文件列表。访问 git ignore 页面了解更多 Git 忽略文件设置。</p>\n<h2 id=\"git-add\"><a href=\"#git-add\" class=\"headerlink\" title=\"git add\"></a>git add</h2><p><code>git add</code> 命令将工作目录中的变化添加到暂存区。它告诉 Git 你想要在下一次提交时包含这个文件的更新。但是，<code>git add</code> 不会实质上地影响你的仓库——在你运行 <code>git commit</code> 前更改都还没有真正被记录。</p>\n<p>使用这些命令的同时，你还需要 <code>git status</code> 来查看工作目录和暂存区的状态。</p>\n<h3 id=\"用法\"><a href=\"#用法\" class=\"headerlink\" title=\"用法\"></a>用法</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add &lt;file&gt;</span><br></pre></td></tr></table></figure>\n\n<p>将 <code>&lt;file&gt;</code> 中的更改加入下次提交的缓存。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add &lt;directory&gt;</span><br></pre></td></tr></table></figure>\n\n<p>将 <code>&lt;directory&gt;</code> 下的更改加入下次提交的缓存。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add -i</span><br></pre></td></tr></table></figure>\n\n<p>开始交互式的缓存，你可以选择文件的一部分加入到下次提交缓存。它会向你展示一堆更改，等待你输入一个命令。<code>y</code> 将这块更改加入缓存，<code>n</code> 忽略这块更改，<code>s</code> 将它分割成更小的块，<code>e</code> 手动编辑这块更改，以及 <code>q</code> 退出。</p>\n<h3 id=\"讨论\"><a href=\"#讨论\" class=\"headerlink\" title=\"讨论\"></a>讨论</h3><p><code>git add</code> 和 <code>git commit</code> 这两个命令组成了最基本的 Git 工作流。每一个 Git 用户都需要理解这两个命令，不管他们团队的协作模型是如何的。我有一千种方式可以将项目版本记录在仓库的历史中。</p>\n<p>在一个只有编辑、缓存、提交这样基本流程的项目上开发。首先，你要在工作目录中编辑你的文件。当你准备备份项目的当前状态时，你通过 <code>git add</code> 来缓存更改。当你对缓存的快照满意之后，你通过 <code>git commit</code> 将它提交到你的项目历史中去。</p>\n<p><img src=\"https://wac-cdn.atlassian.com/dam/jcr:0f27e004-f2f5-4890-921d-65fa77ba2774/01.svg\" alt=\"Git Tutorial: git add Snapshot\"></p>\n<p><code>git add</code> 命令不能和 <code>svn add</code> 混在一起理解，后者将文件添加到仓库中。而 <code>git add</code> 发生于更抽象的 <em>更改</em> 层面。也就是说，<code>git add</code> 在每次你修改一个文件时都需要被调用，而 <code>svn add</code> 只需要每个文件调用一次。这听上去很多余，但这样的工作流使得一个项目更容易组织。</p>\n<h4 id=\"缓存区\"><a href=\"#缓存区\" class=\"headerlink\" title=\"缓存区\"></a>缓存区</h4><p>缓存区是 Git 更为独特的地方之一，如果你是从 SVN（甚至是 Mercurial）迁移而来，那你可得花点时间理解了。你可以简单地把它想成是工作目录和项目历史之间的缓冲区。</p>\n<p>缓存允许你在实际提交到项目历史之前，将相关的更改组合成一份高度专注的快照，而不是将你上次提交以后产生的所有更改一并提交。也就是说你可以更改各种不相关的文件，然后回过去将它们按逻辑切分，将相关的更改添加到缓存，一份一份提交。在任何修改控制系统中，很重要的一点是提交必须是原子性的，以便于追踪 bug，并用最小的代价回滚更改。</p>\n<h3 id=\"例子\"><a href=\"#例子\" class=\"headerlink\" title=\"例子\"></a>例子</h3><p>当你开始新项目的时候，<code>git add</code> 和 <code>svn import</code> 类似。为了创建当前目录的初始提交，使用下面两个命令：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add .</span><br><span class=\"line\">git commit</span><br></pre></td></tr></table></figure>\n\n<p>当你项目设置好之后，新的文件可以通过路径传递给 <code>git add</code> 来添加：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add hello.py</span><br><span class=\"line\">git commit</span><br></pre></td></tr></table></figure>\n\n<p>上面的命令同样可以用于记录已有文件的更改。重复一次，Git 不会区分缓存的更改来自新文件，还是仓库中已有的文件。</p>\n<h2 id=\"git-commit\"><a href=\"#git-commit\" class=\"headerlink\" title=\"git commit\"></a>git commit</h2><p><code>git commit</code>命令将缓存的快照提交到项目历史。提交的快照可以认为是项目安全的版本，Git 永远不会改变它们，除非你这么要求。和 <code>git add</code> 一样，这是最重要的 Git 命令之一。</p>\n<p>尽管和它和 <code>svn commit</code> 名字一样，但实际上它们毫无关联。快照被提交到本地仓库，不会和其他 Git 仓库有任何交互。</p>\n<h3 id=\"用法-1\"><a href=\"#用法-1\" class=\"headerlink\" title=\"用法\"></a>用法</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git commit</span><br></pre></td></tr></table></figure>\n\n<p>提交已经缓存的快照。它会运行文本编辑器，等待你输入提交信息。当你输入信息之后，保存文件，关闭编辑器，创建实际的提交。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git commit -m &quot;&lt;message&gt;&quot;</span><br></pre></td></tr></table></figure>\n\n<p>提交已经缓存的快照。但将 <code>&lt;message&gt;</code> 作为提交信息，而不是运行文本编辑器。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git commit -a</span><br></pre></td></tr></table></figure>\n\n<p>提交一份包含工作目录所有更改的快照。它只包含跟踪过的文件的更改（那些之前已经通过 <code>git add</code> 添加过的文件）。</p>\n<h3 id=\"讨论-1\"><a href=\"#讨论-1\" class=\"headerlink\" title=\"讨论\"></a>讨论</h3><p>快照总是提交到 <em>本地</em> 仓库。这一点和 SVN 截然不同，后者的工作拷贝提交到中央仓库。而 Git 不会强制你和中央仓库进行交互，直到你准备好了。就像缓存区是工作目录和项目历史之间的缓冲地带，每个开发者的本地仓库是他们贡献的代码和中央仓库之间的缓冲地带。</p>\n<p>这一点改变了 Git 用户基本的开发模型。Git 开发者可以在本地仓库中积累一些提交，而不是一发生更改就直接提交到中央仓库。这对于 SVN 风格的协作有着诸多优点：更容易将功能切分成原子性的提交，让相关的提交组合在一起，发布到中央仓库之前整理好本地的历史。开发者得以在一个隔离的环境中工作，直到他们方便的时候再整合代码。</p>\n<h4 id=\"记录快照，而不是记录差异\"><a href=\"#记录快照，而不是记录差异\" class=\"headerlink\" title=\"记录快照，而不是记录差异\"></a>记录快照，而不是记录差异</h4><p>SVN 和 Git 除了使用上存在巨大差异，它们底层的实现同样遵循截然不同的设计哲学。SVN 追踪文件的 <em>变化</em> ，而 Git 的版本控制模型基于 <em>快照</em> 。比如说，一个 SVN 提交由仓库中原文件相比的差异（diff）组成。而 Git 在每次提交中记录文件的 <em>完整内容</em> 。</p>\n<p><img src=\"https://www.atlassian.com/dam/jcr:7406fe56-d36d-44cf-92e3-b28e4bae36f8/02.svg\" alt=\"Git Tutorial: Snapshots, Not Differences\"></p>\n<p>这让很多 Git 操作比 SVN 来的快得多，因为文件的某个版本不需要通过版本间的差异组装得到——每个文件完整的修改能立刻从 Git 的内部数据库中得到。</p>\n<p>Git 的快照模型对它版本控制模型的方方面面都有着深远的影响，从分支到合并工具，再到协作工作流，以至于影响了所有特性。</p>\n<h3 id=\"例子-1\"><a href=\"#例子-1\" class=\"headerlink\" title=\"例子\"></a>例子</h3><p>下面这个栗子假设你编辑了 <code>hello.py</code> 文件的一些内容，并且准备好将它提交到项目历史。首先，你需要用 <code>git add</code> 缓存文件，然后提交缓存的快照。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add hello.py</span><br><span class=\"line\">git commit</span><br></pre></td></tr></table></figure>\n\n<p>它会打开一个文件编辑器（可以通过 <code>git config</code> 设置) 询问提交信息，同时列出将被提交的文件。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Please enter the commit message for your changes. Lines starting</span><br><span class=\"line\"># with &#x27;#&#x27; will be ignored, and an empty message aborts the commit.</span><br><span class=\"line\"># On branch master</span><br><span class=\"line\"># Changes to be committed:</span><br><span class=\"line\"># (use &quot;git reset HEAD &lt;file&gt;...&quot; to unstage)</span><br><span class=\"line\">#</span><br><span class=\"line\">#modified: hello.py</span><br></pre></td></tr></table></figure>\n\n<p>Git 对提交信息没有特定的格式限制，但约定俗成的格式是：在第一行用 50 个以内的字符总结这个提交，留一空行，然后详细阐述具体的更改。比如：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Change the message displayed by hello.py</span><br><span class=\"line\"></span><br><span class=\"line\">- Update the sayHello() function to output the user&#x27;s name</span><br><span class=\"line\">- Change the sayGoodbye() function to a friendlier message</span><br></pre></td></tr></table></figure>\n\n<p>注意，很多开发者倾向于在提交信息中使用一般现在时态。这样看起来更像是对仓库进行的操作，让很多改写历史的操作更加符合直觉。</p>\n<blockquote>\n<p>这篇教程来源于<a href=\"https://github.com/geeeeeeeeek/git-recipes/\"><strong>「git-recipes」</strong></a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"https://wac-cdn.atlassian.com/dam/jcr:75f75cb6-a6ab-4f0b-ab29-e366914f513c/hero.svg?cdnVersion=kg\" alt=\"Saving changes\"></p>\n<p><em><strong>git add / git commit / git diff / git stash / .gitignore</strong></em></p>\n<p>“保存”这个概念在 Git 等版本控制系统和 Word 等文本编辑应用中不太一样。传统软件里的“保存”在 Git 里被叫做“提交”（commit）。 我们常说的的保存可以理解成在文件系统中覆盖一个已有的文件或者创建一个新的文件。而在 Git 中，提交这个操作作用于若干个文件和目录。</p>\n<p>在 Git 和 SVN 里保存更改也不一样。SVN 提交或检入（check-in）将会推送到远端的中央服务器。也就是说 SVN 的提交需要联网才能完全“保存”项目更改。Git 提交可以在本地完成，然后再使用<code>git push -u origin master</code>命令推送到远端服务器。这两种方法的区别体现了两种架构设计的本质区别。Git 是一个分布式的应用，而 SVN 是一个中心化的应用。分布式应用一般来说更可靠，因为它们不存在中央服务器这样的单点故障。</p>\n<p><code>git add</code>、<code>git status</code>和<code>git commit</code>这三个命令通常一起使用，将 Git 项目当前的状态保存成一份快照。</p>\n<p>Git 还有另一个保存机制：“储藏”（stash）。储藏是一个临时的储存区域，保存还没准备好提交的更改。储藏操作作用于工作目录，三个文件树中的第一棵。它有很多用法，访问 git stash 页面了解更多。</p>\n<p>Git 仓库可以通过设置忽略一些文件或目录。Git 将不会保存这些文件的任何更改。Git 有多种方式管理忽略文件列表。访问 git ignore 页面了解更多 Git 忽略文件设置。</p>\n<h2 id=\"git-add\"><a href=\"#git-add\" class=\"headerlink\" title=\"git add\"></a>git add</h2><p><code>git add</code> 命令将工作目录中的变化添加到暂存区。它告诉 Git 你想要在下一次提交时包含这个文件的更新。但是，<code>git add</code> 不会实质上地影响你的仓库——在你运行 <code>git commit</code> 前更改都还没有真正被记录。</p>\n<p>使用这些命令的同时，你还需要 <code>git status</code> 来查看工作目录和暂存区的状态。</p>\n<h3 id=\"用法\"><a href=\"#用法\" class=\"headerlink\" title=\"用法\"></a>用法</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add &lt;file&gt;</span><br></pre></td></tr></table></figure>\n\n<p>将 <code>&lt;file&gt;</code> 中的更改加入下次提交的缓存。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add &lt;directory&gt;</span><br></pre></td></tr></table></figure>\n\n<p>将 <code>&lt;directory&gt;</code> 下的更改加入下次提交的缓存。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add -i</span><br></pre></td></tr></table></figure>\n\n<p>开始交互式的缓存，你可以选择文件的一部分加入到下次提交缓存。它会向你展示一堆更改，等待你输入一个命令。<code>y</code> 将这块更改加入缓存，<code>n</code> 忽略这块更改，<code>s</code> 将它分割成更小的块，<code>e</code> 手动编辑这块更改，以及 <code>q</code> 退出。</p>\n<h3 id=\"讨论\"><a href=\"#讨论\" class=\"headerlink\" title=\"讨论\"></a>讨论</h3><p><code>git add</code> 和 <code>git commit</code> 这两个命令组成了最基本的 Git 工作流。每一个 Git 用户都需要理解这两个命令，不管他们团队的协作模型是如何的。我有一千种方式可以将项目版本记录在仓库的历史中。</p>\n<p>在一个只有编辑、缓存、提交这样基本流程的项目上开发。首先，你要在工作目录中编辑你的文件。当你准备备份项目的当前状态时，你通过 <code>git add</code> 来缓存更改。当你对缓存的快照满意之后，你通过 <code>git commit</code> 将它提交到你的项目历史中去。</p>\n<p><img src=\"https://wac-cdn.atlassian.com/dam/jcr:0f27e004-f2f5-4890-921d-65fa77ba2774/01.svg\" alt=\"Git Tutorial: git add Snapshot\"></p>\n<p><code>git add</code> 命令不能和 <code>svn add</code> 混在一起理解，后者将文件添加到仓库中。而 <code>git add</code> 发生于更抽象的 <em>更改</em> 层面。也就是说，<code>git add</code> 在每次你修改一个文件时都需要被调用，而 <code>svn add</code> 只需要每个文件调用一次。这听上去很多余，但这样的工作流使得一个项目更容易组织。</p>\n<h4 id=\"缓存区\"><a href=\"#缓存区\" class=\"headerlink\" title=\"缓存区\"></a>缓存区</h4><p>缓存区是 Git 更为独特的地方之一，如果你是从 SVN（甚至是 Mercurial）迁移而来，那你可得花点时间理解了。你可以简单地把它想成是工作目录和项目历史之间的缓冲区。</p>\n<p>缓存允许你在实际提交到项目历史之前，将相关的更改组合成一份高度专注的快照，而不是将你上次提交以后产生的所有更改一并提交。也就是说你可以更改各种不相关的文件，然后回过去将它们按逻辑切分，将相关的更改添加到缓存，一份一份提交。在任何修改控制系统中，很重要的一点是提交必须是原子性的，以便于追踪 bug，并用最小的代价回滚更改。</p>\n<h3 id=\"例子\"><a href=\"#例子\" class=\"headerlink\" title=\"例子\"></a>例子</h3><p>当你开始新项目的时候，<code>git add</code> 和 <code>svn import</code> 类似。为了创建当前目录的初始提交，使用下面两个命令：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add .</span><br><span class=\"line\">git commit</span><br></pre></td></tr></table></figure>\n\n<p>当你项目设置好之后，新的文件可以通过路径传递给 <code>git add</code> 来添加：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add hello.py</span><br><span class=\"line\">git commit</span><br></pre></td></tr></table></figure>\n\n<p>上面的命令同样可以用于记录已有文件的更改。重复一次，Git 不会区分缓存的更改来自新文件，还是仓库中已有的文件。</p>\n<h2 id=\"git-commit\"><a href=\"#git-commit\" class=\"headerlink\" title=\"git commit\"></a>git commit</h2><p><code>git commit</code>命令将缓存的快照提交到项目历史。提交的快照可以认为是项目安全的版本，Git 永远不会改变它们，除非你这么要求。和 <code>git add</code> 一样，这是最重要的 Git 命令之一。</p>\n<p>尽管和它和 <code>svn commit</code> 名字一样，但实际上它们毫无关联。快照被提交到本地仓库，不会和其他 Git 仓库有任何交互。</p>\n<h3 id=\"用法-1\"><a href=\"#用法-1\" class=\"headerlink\" title=\"用法\"></a>用法</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git commit</span><br></pre></td></tr></table></figure>\n\n<p>提交已经缓存的快照。它会运行文本编辑器，等待你输入提交信息。当你输入信息之后，保存文件，关闭编辑器，创建实际的提交。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git commit -m &quot;&lt;message&gt;&quot;</span><br></pre></td></tr></table></figure>\n\n<p>提交已经缓存的快照。但将 <code>&lt;message&gt;</code> 作为提交信息，而不是运行文本编辑器。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git commit -a</span><br></pre></td></tr></table></figure>\n\n<p>提交一份包含工作目录所有更改的快照。它只包含跟踪过的文件的更改（那些之前已经通过 <code>git add</code> 添加过的文件）。</p>\n<h3 id=\"讨论-1\"><a href=\"#讨论-1\" class=\"headerlink\" title=\"讨论\"></a>讨论</h3><p>快照总是提交到 <em>本地</em> 仓库。这一点和 SVN 截然不同，后者的工作拷贝提交到中央仓库。而 Git 不会强制你和中央仓库进行交互，直到你准备好了。就像缓存区是工作目录和项目历史之间的缓冲地带，每个开发者的本地仓库是他们贡献的代码和中央仓库之间的缓冲地带。</p>\n<p>这一点改变了 Git 用户基本的开发模型。Git 开发者可以在本地仓库中积累一些提交，而不是一发生更改就直接提交到中央仓库。这对于 SVN 风格的协作有着诸多优点：更容易将功能切分成原子性的提交，让相关的提交组合在一起，发布到中央仓库之前整理好本地的历史。开发者得以在一个隔离的环境中工作，直到他们方便的时候再整合代码。</p>\n<h4 id=\"记录快照，而不是记录差异\"><a href=\"#记录快照，而不是记录差异\" class=\"headerlink\" title=\"记录快照，而不是记录差异\"></a>记录快照，而不是记录差异</h4><p>SVN 和 Git 除了使用上存在巨大差异，它们底层的实现同样遵循截然不同的设计哲学。SVN 追踪文件的 <em>变化</em> ，而 Git 的版本控制模型基于 <em>快照</em> 。比如说，一个 SVN 提交由仓库中原文件相比的差异（diff）组成。而 Git 在每次提交中记录文件的 <em>完整内容</em> 。</p>\n<p><img src=\"https://www.atlassian.com/dam/jcr:7406fe56-d36d-44cf-92e3-b28e4bae36f8/02.svg\" alt=\"Git Tutorial: Snapshots, Not Differences\"></p>\n<p>这让很多 Git 操作比 SVN 来的快得多，因为文件的某个版本不需要通过版本间的差异组装得到——每个文件完整的修改能立刻从 Git 的内部数据库中得到。</p>\n<p>Git 的快照模型对它版本控制模型的方方面面都有着深远的影响，从分支到合并工具，再到协作工作流，以至于影响了所有特性。</p>\n<h3 id=\"例子-1\"><a href=\"#例子-1\" class=\"headerlink\" title=\"例子\"></a>例子</h3><p>下面这个栗子假设你编辑了 <code>hello.py</code> 文件的一些内容，并且准备好将它提交到项目历史。首先，你需要用 <code>git add</code> 缓存文件，然后提交缓存的快照。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add hello.py</span><br><span class=\"line\">git commit</span><br></pre></td></tr></table></figure>\n\n<p>它会打开一个文件编辑器（可以通过 <code>git config</code> 设置) 询问提交信息，同时列出将被提交的文件。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Please enter the commit message for your changes. Lines starting</span><br><span class=\"line\"># with &#x27;#&#x27; will be ignored, and an empty message aborts the commit.</span><br><span class=\"line\"># On branch master</span><br><span class=\"line\"># Changes to be committed:</span><br><span class=\"line\"># (use &quot;git reset HEAD &lt;file&gt;...&quot; to unstage)</span><br><span class=\"line\">#</span><br><span class=\"line\">#modified: hello.py</span><br></pre></td></tr></table></figure>\n\n<p>Git 对提交信息没有特定的格式限制，但约定俗成的格式是：在第一行用 50 个以内的字符总结这个提交，留一空行，然后详细阐述具体的更改。比如：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Change the message displayed by hello.py</span><br><span class=\"line\"></span><br><span class=\"line\">- Update the sayHello() function to output the user&#x27;s name</span><br><span class=\"line\">- Change the sayGoodbye() function to a friendlier message</span><br></pre></td></tr></table></figure>\n\n<p>注意，很多开发者倾向于在提交信息中使用一般现在时态。这样看起来更像是对仓库进行的操作，让很多改写历史的操作更加符合直觉。</p>\n<blockquote>\n<p>这篇教程来源于<a href=\"https://github.com/geeeeeeeeek/git-recipes/\"><strong>「git-recipes」</strong></a></p>\n</blockquote>\n"},{"title":"5.向用户显示选项","author":"连思鑫","date":"2023-03-02T11:10:00.000Z","_content":"### 5.向用户显示选项\n\n#### 向用户显示选项\n\n> 前面的配置中，我们引入了条件句：通过硬编码的方式给定逻辑变量值。不过，这会影响用户修改这些变量。\n>\n> CMake代码没有向读者传达，该值可以从外部进行修改。推荐在 CMakeLists.txt 中使用 option() 命令，\n>\n> 以选项的形式显示逻辑开关，用于外部设置，从而切换构建系统的生成行为。\n>\n> 本节的示例将向您展示，如何使用这个命令。\n\n----\n\n#### 具体实施\n\n1. ``` cmake\n   # 用一个选项替换上一个示例的 set(USE_LIBRARY OFF) 命令。该选项将修改 USE_LIBRARY 的值，并设置其默认值为 OFF ：\n   option(USE_LIBRARY \"Compile sources into a library\" OFF)\n   ```\n\n2. ``` shell\n   # 现在，可以通过CMake的 -D CLI 选项，将信息传递给 CMake 来切换库的行为：\n   # -D 开关用于为 CMake 设置任何类型的变量：逻辑变量、路径等等。\n   $ mkdir build\n   $ cd build\n   $ cmake -D USE_LIBRARY=ON ..\n   $\n   $ cmake --build .\n   ```\n\n#### 工作原理\n\n----\n\n> option 可接受三个参数：\n> option(<option_variable> \"help string\" [initial value])\n>\n> ​\t<option_variable> 表示该选项的变量的名称。\n> ​\t\"help string\" 记录选项的字符串，在CMake的终端或图形用户界面中可见。\n> ​\t[initial value] 选项的默认值，可以是 ON 或 OFF 。","source":"_posts/5-向用户显示选项.md","raw":"title: 5.向用户显示选项\nauthor: 连思鑫\ntags:\n  - cmake\ncategories:\n  - ..\n  - cmake\n  - 第一章：从简单的可执行文件到库\n  - ''\ndate: 2023-03-02 19:10:00\n---\n### 5.向用户显示选项\n\n#### 向用户显示选项\n\n> 前面的配置中，我们引入了条件句：通过硬编码的方式给定逻辑变量值。不过，这会影响用户修改这些变量。\n>\n> CMake代码没有向读者传达，该值可以从外部进行修改。推荐在 CMakeLists.txt 中使用 option() 命令，\n>\n> 以选项的形式显示逻辑开关，用于外部设置，从而切换构建系统的生成行为。\n>\n> 本节的示例将向您展示，如何使用这个命令。\n\n----\n\n#### 具体实施\n\n1. ``` cmake\n   # 用一个选项替换上一个示例的 set(USE_LIBRARY OFF) 命令。该选项将修改 USE_LIBRARY 的值，并设置其默认值为 OFF ：\n   option(USE_LIBRARY \"Compile sources into a library\" OFF)\n   ```\n\n2. ``` shell\n   # 现在，可以通过CMake的 -D CLI 选项，将信息传递给 CMake 来切换库的行为：\n   # -D 开关用于为 CMake 设置任何类型的变量：逻辑变量、路径等等。\n   $ mkdir build\n   $ cd build\n   $ cmake -D USE_LIBRARY=ON ..\n   $\n   $ cmake --build .\n   ```\n\n#### 工作原理\n\n----\n\n> option 可接受三个参数：\n> option(<option_variable> \"help string\" [initial value])\n>\n> ​\t<option_variable> 表示该选项的变量的名称。\n> ​\t\"help string\" 记录选项的字符串，在CMake的终端或图形用户界面中可见。\n> ​\t[initial value] 选项的默认值，可以是 ON 或 OFF 。","slug":"5-向用户显示选项","published":1,"updated":"2023-03-02T11:12:34.066Z","_id":"clifr2v1o000p14uo6d6yaaxx","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"5-向用户显示选项\"><a href=\"#5-向用户显示选项\" class=\"headerlink\" title=\"5.向用户显示选项\"></a>5.向用户显示选项</h3><h4 id=\"向用户显示选项\"><a href=\"#向用户显示选项\" class=\"headerlink\" title=\"向用户显示选项\"></a>向用户显示选项</h4><blockquote>\n<p>前面的配置中，我们引入了条件句：通过硬编码的方式给定逻辑变量值。不过，这会影响用户修改这些变量。</p>\n<p>CMake代码没有向读者传达，该值可以从外部进行修改。推荐在 CMakeLists.txt 中使用 option() 命令，</p>\n<p>以选项的形式显示逻辑开关，用于外部设置，从而切换构建系统的生成行为。</p>\n<p>本节的示例将向您展示，如何使用这个命令。</p>\n</blockquote>\n<hr>\n<h4 id=\"具体实施\"><a href=\"#具体实施\" class=\"headerlink\" title=\"具体实施\"></a>具体实施</h4><ol>\n<li>``` cmake<h1 id=\"用一个选项替换上一个示例的-set-USE-LIBRARY-OFF-命令。该选项将修改-USE-LIBRARY-的值，并设置其默认值为-OFF-：\"><a href=\"#用一个选项替换上一个示例的-set-USE-LIBRARY-OFF-命令。该选项将修改-USE-LIBRARY-的值，并设置其默认值为-OFF-：\" class=\"headerlink\" title=\"用一个选项替换上一个示例的 set(USE_LIBRARY OFF) 命令。该选项将修改 USE_LIBRARY 的值，并设置其默认值为 OFF ：\"></a>用一个选项替换上一个示例的 set(USE_LIBRARY OFF) 命令。该选项将修改 USE_LIBRARY 的值，并设置其默认值为 OFF ：</h1>option(USE_LIBRARY “Compile sources into a library” OFF)<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">2. ``` shell</span><br><span class=\"line\">   # 现在，可以通过CMake的 -D CLI 选项，将信息传递给 CMake 来切换库的行为：</span><br><span class=\"line\">   # -D 开关用于为 CMake 设置任何类型的变量：逻辑变量、路径等等。</span><br><span class=\"line\">   $ mkdir build</span><br><span class=\"line\">   $ cd build</span><br><span class=\"line\">   $ cmake -D USE_LIBRARY=ON ..</span><br><span class=\"line\">   $</span><br><span class=\"line\">   $ cmake --build .</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h4 id=\"工作原理\"><a href=\"#工作原理\" class=\"headerlink\" title=\"工作原理\"></a>工作原理</h4><hr>\n<blockquote>\n<p>option 可接受三个参数：<br>option(<option_variable> “help string” [initial value])</p>\n<p>​    <option_variable> 表示该选项的变量的名称。<br>​    “help string” 记录选项的字符串，在CMake的终端或图形用户界面中可见。<br>​    [initial value] 选项的默认值，可以是 ON 或 OFF 。</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"5-向用户显示选项\"><a href=\"#5-向用户显示选项\" class=\"headerlink\" title=\"5.向用户显示选项\"></a>5.向用户显示选项</h3><h4 id=\"向用户显示选项\"><a href=\"#向用户显示选项\" class=\"headerlink\" title=\"向用户显示选项\"></a>向用户显示选项</h4><blockquote>\n<p>前面的配置中，我们引入了条件句：通过硬编码的方式给定逻辑变量值。不过，这会影响用户修改这些变量。</p>\n<p>CMake代码没有向读者传达，该值可以从外部进行修改。推荐在 CMakeLists.txt 中使用 option() 命令，</p>\n<p>以选项的形式显示逻辑开关，用于外部设置，从而切换构建系统的生成行为。</p>\n<p>本节的示例将向您展示，如何使用这个命令。</p>\n</blockquote>\n<hr>\n<h4 id=\"具体实施\"><a href=\"#具体实施\" class=\"headerlink\" title=\"具体实施\"></a>具体实施</h4><ol>\n<li>``` cmake<h1 id=\"用一个选项替换上一个示例的-set-USE-LIBRARY-OFF-命令。该选项将修改-USE-LIBRARY-的值，并设置其默认值为-OFF-：\"><a href=\"#用一个选项替换上一个示例的-set-USE-LIBRARY-OFF-命令。该选项将修改-USE-LIBRARY-的值，并设置其默认值为-OFF-：\" class=\"headerlink\" title=\"用一个选项替换上一个示例的 set(USE_LIBRARY OFF) 命令。该选项将修改 USE_LIBRARY 的值，并设置其默认值为 OFF ：\"></a>用一个选项替换上一个示例的 set(USE_LIBRARY OFF) 命令。该选项将修改 USE_LIBRARY 的值，并设置其默认值为 OFF ：</h1>option(USE_LIBRARY “Compile sources into a library” OFF)<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">2. ``` shell</span><br><span class=\"line\">   # 现在，可以通过CMake的 -D CLI 选项，将信息传递给 CMake 来切换库的行为：</span><br><span class=\"line\">   # -D 开关用于为 CMake 设置任何类型的变量：逻辑变量、路径等等。</span><br><span class=\"line\">   $ mkdir build</span><br><span class=\"line\">   $ cd build</span><br><span class=\"line\">   $ cmake -D USE_LIBRARY=ON ..</span><br><span class=\"line\">   $</span><br><span class=\"line\">   $ cmake --build .</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h4 id=\"工作原理\"><a href=\"#工作原理\" class=\"headerlink\" title=\"工作原理\"></a>工作原理</h4><hr>\n<blockquote>\n<p>option 可接受三个参数：<br>option(<option_variable> “help string” [initial value])</p>\n<p>​    <option_variable> 表示该选项的变量的名称。<br>​    “help string” 记录选项的字符串，在CMake的终端或图形用户界面中可见。<br>​    [initial value] 选项的默认值，可以是 ON 或 OFF 。</p>\n</blockquote>\n"},{"title":"5.查看仓库状态","author":"连思鑫","date":"2023-03-01T14:52:00.000Z","_content":"# 检查仓库状态\n\n## git status\n\n`git status` 命令显示工作目录和缓存区的状态。你可以看到哪些更改被缓存了，哪些还没有，以及哪些还未被 Git 追踪。status 的输出 *不会* 告诉你任何已提交到项目历史的信息。如果你想看的话，应该使用 `git log` 命令。\n\n### 用法\n\n```\ngit status\n```\n\n列出已缓存、未缓存、未追踪的文件。\n\n### 讨论\n\n`git status` 是一个相对简单的命令。 它告诉你 `git add` 和 `git commit` 的进展。status 信息还包括了添加缓存和移除缓存的相关指令。样例输出显示了三类主要的 `git status` 输出：\n\n```\n# On branch master\n# Changes to be committed:\n# (use \"git reset HEAD <file>...\" to unstage)\n#\n#modified: hello.py\n#\n# Changes not staged for commit:\n# (use \"git add <file>...\" to update what will be committed)\n# (use \"git checkout -- <file>...\" to discard changes in working directory)\n#\n#modified: main.py\n#\n# Untracked files:\n# (use \"git add <file>...\" to include in what will be committed)\n#\n#hello.pyc\n```\n\n#### 忽略文件\n\n未追踪的文件通常有两类。它们要么是项目新增但还未提交的文件，要么是像 `.pyc`、`.obj`、`.exe` 等编译后的二进制文件。显然前者应该出现在 `git status` 的输出中，而后者会让我们困惑究竟发生了什么。\n\n因此，Git 允许你完全忽略这些文件，只需要将路径放在一个特定的 `.gitignore` 文件中。所有想要忽略的文件应该分别写在单独一行，`*` 字符用作通配符。比如，将下面这行加入项目根目录的`.gitignore`文件可以避免编译后的Python模块出现在`git status`中：\n\n```\n*.pyc\n```\n\n### 例子\n\n在提交更改前检查仓库状态是一个良好的实践，这样你就不会不小心提交什么奇怪的东西。这个例子显示了缓存和提交快照前后的仓库状态：\n\n```\n# Edit hello.py\ngit status\n# hello.py is listed under \"Changes not staged for commit\"\ngit add hello.py\ngit status\n# hello.py is listed under \"Changes to be committed\"\ngit commit\ngit status\n# nothing to commit (working directory clean)\n```\n\n第一个 status 的输出显示文件还未缓存。`git add` 操作会影响第二个 `git status`，最后的 status 输出告诉你已经没有可以提交的东西了——工作目录和最近的提交一致。一些 Git 命令（比如 `git merge`）需要工作目录整洁，以免意外覆盖更改。\n\n## git log\n\n`git log` 命令显示已提交的快照。你可以列出项目历史，筛选，以及搜索特定更改。`git status` 允许你查看工作目录和缓存区，而 `git log` 只作用于提交的项目历史。\n\n![Git Tutorial: git status vs. git log](https://wac-cdn.atlassian.com/dam/jcr:52d530ce-7f51-48e3-920b-a18f776048d3/01.svg)\n\nlog 输出可以有很多种自定义的方式，从简单地筛选提交，到用完全自定义的格式显示。其中一些最常用的 `git log` 配置如下所示。\n\n### 用法\n\n```\ngit log\n```\n\n使用默认格式显示完整地项目历史。如果输出超过一屏，你可以用 `空格键` 来滚动，按 `q` 退出。\n\n```\ngit log -n <limit>\n```\n\n用 `<limit>` 限制提交的数量。比如 `git log -n 3` 只会显示 3 个提交。\n\n```\ngit log --oneline\n```\n\n将每个提交压缩到一行。当你需要查看项目历史的上层情况时这会很有用。\n\n```\ngit log --stat\n```\n\n除了 `git log` 信息之外，包含哪些文件被更改了，以及每个文件相对的增删行数。\n\n```\ngit log -p\n```\n\n显示代表每个提交的一堆信息。显示每个提交全部的差异（diff），这也是项目历史中最详细的视图。\n\n```\ngit log --author=\"<pattern>\"\n```\n\n搜索特定作者的提交。`<pattern>` 可以是字符串或正则表达式。\n\n```\ngit log --grep=\"<pattern>\"\n```\n\n搜索提交信息匹配特定 `<pattern>` 的提交。`<pattern>` 可以是字符串或正则表达式。\n\n```\ngit log <since>..<until>\n```\n\n只显示发生在 `<since>` 和 `<until>` 之间的提交。两个参数可以是提交 ID、分支名、`HEAD` 或是任何一种引用。\n\n```\ngit log <file>\n```\n\n只显示包含特定文件的提交。查找特定文件的历史这样做会很方便。\n\n```\ngit log --graph --decorate --oneline\n```\n\n还有一些有用的选项。`--graph` 标记会绘制一幅字符组成的图形，左边是提交，右边是提交信息。`--decorate` 标记会加上提交所在的分支名称和标签。`--oneline` 标记将提交信息显示在同一行，一目了然。\n\n### 讨论\n\n`git log` 命令是 Git 查看项目历史的基本工具。当你要寻找项目特定的一个版本或者弄明白合并功能分支时引入了哪些变化，你就会用到这个命令。\n\n```\ncommit 3157ee3718e180a9476bf2e5cab8e3f1e78a73b7\nAuthor: John Smith\n```\n\n大多数时候都很简单直接。但是，第一行需要解释下。`commit` 后面 40 个字的字符串是提交内容的 SHA-1 校验总和（checksum）。它有两个作用。一是保证提交的正确性——如果它被损坏了，提交会生成一个不同的校验总和。第二，它是提交唯一的标识 ID。\n\n这个 ID 可以用于 `git log` 这样的命令中来引用具体的提交。比如，`git log 3157e..5ab91` 会显示所有ID在 `3157e` 和 `5ab91` 之间的提交。除了校验总和之外，分支名、HEAD 关键字也是常用的引用提交的方法。`HEAD` 总是指向当前的提交，无论是分支还是特定提交也好。\n\n~字符用于表示提交的父节点的相对引用。比如，`3157e~1` 指向 `3157e` 前一个提交,`HEAD~3` 是当前提交的回溯3个节点的提交。\n\n所有这些标识方法的背后都是为了让你对特定提交进行操作。`git log` 命令一般是这些交互的起点，因为它让你找到你想要的提交。\n\n### 例子\n\n*用法* 一节提供了 `git log` 很多的栗子，但请记住，你可以将很多选项用在同一个命令中：\n\n```\ngit log --author=\"John Smith\" -p hello.py\n```\n\n这个命令会显示 `John Smith` 作者对 `hello.py` 文件所做的所有更改的差异比较（diff）。\n\n..句法是比较分支很有用的工具。下面的栗子显示了在 `some-feature` 分支而不在 `master` 分支的所有提交的概览。\n\n```\ngit log --oneline master..some-feature\n```\n\n> 这篇教程来源于[**「git-recipes」**](https://github.com/geeeeeeeeek/git-recipes/)","source":"_posts/5-查看仓库状态.md","raw":"title: 5.查看仓库状态\nauthor: 连思鑫\ntags:\n  - git\ncategories:\n  - ..\n  - git\n  - ''\ndate: 2023-03-01 22:52:00\n---\n# 检查仓库状态\n\n## git status\n\n`git status` 命令显示工作目录和缓存区的状态。你可以看到哪些更改被缓存了，哪些还没有，以及哪些还未被 Git 追踪。status 的输出 *不会* 告诉你任何已提交到项目历史的信息。如果你想看的话，应该使用 `git log` 命令。\n\n### 用法\n\n```\ngit status\n```\n\n列出已缓存、未缓存、未追踪的文件。\n\n### 讨论\n\n`git status` 是一个相对简单的命令。 它告诉你 `git add` 和 `git commit` 的进展。status 信息还包括了添加缓存和移除缓存的相关指令。样例输出显示了三类主要的 `git status` 输出：\n\n```\n# On branch master\n# Changes to be committed:\n# (use \"git reset HEAD <file>...\" to unstage)\n#\n#modified: hello.py\n#\n# Changes not staged for commit:\n# (use \"git add <file>...\" to update what will be committed)\n# (use \"git checkout -- <file>...\" to discard changes in working directory)\n#\n#modified: main.py\n#\n# Untracked files:\n# (use \"git add <file>...\" to include in what will be committed)\n#\n#hello.pyc\n```\n\n#### 忽略文件\n\n未追踪的文件通常有两类。它们要么是项目新增但还未提交的文件，要么是像 `.pyc`、`.obj`、`.exe` 等编译后的二进制文件。显然前者应该出现在 `git status` 的输出中，而后者会让我们困惑究竟发生了什么。\n\n因此，Git 允许你完全忽略这些文件，只需要将路径放在一个特定的 `.gitignore` 文件中。所有想要忽略的文件应该分别写在单独一行，`*` 字符用作通配符。比如，将下面这行加入项目根目录的`.gitignore`文件可以避免编译后的Python模块出现在`git status`中：\n\n```\n*.pyc\n```\n\n### 例子\n\n在提交更改前检查仓库状态是一个良好的实践，这样你就不会不小心提交什么奇怪的东西。这个例子显示了缓存和提交快照前后的仓库状态：\n\n```\n# Edit hello.py\ngit status\n# hello.py is listed under \"Changes not staged for commit\"\ngit add hello.py\ngit status\n# hello.py is listed under \"Changes to be committed\"\ngit commit\ngit status\n# nothing to commit (working directory clean)\n```\n\n第一个 status 的输出显示文件还未缓存。`git add` 操作会影响第二个 `git status`，最后的 status 输出告诉你已经没有可以提交的东西了——工作目录和最近的提交一致。一些 Git 命令（比如 `git merge`）需要工作目录整洁，以免意外覆盖更改。\n\n## git log\n\n`git log` 命令显示已提交的快照。你可以列出项目历史，筛选，以及搜索特定更改。`git status` 允许你查看工作目录和缓存区，而 `git log` 只作用于提交的项目历史。\n\n![Git Tutorial: git status vs. git log](https://wac-cdn.atlassian.com/dam/jcr:52d530ce-7f51-48e3-920b-a18f776048d3/01.svg)\n\nlog 输出可以有很多种自定义的方式，从简单地筛选提交，到用完全自定义的格式显示。其中一些最常用的 `git log` 配置如下所示。\n\n### 用法\n\n```\ngit log\n```\n\n使用默认格式显示完整地项目历史。如果输出超过一屏，你可以用 `空格键` 来滚动，按 `q` 退出。\n\n```\ngit log -n <limit>\n```\n\n用 `<limit>` 限制提交的数量。比如 `git log -n 3` 只会显示 3 个提交。\n\n```\ngit log --oneline\n```\n\n将每个提交压缩到一行。当你需要查看项目历史的上层情况时这会很有用。\n\n```\ngit log --stat\n```\n\n除了 `git log` 信息之外，包含哪些文件被更改了，以及每个文件相对的增删行数。\n\n```\ngit log -p\n```\n\n显示代表每个提交的一堆信息。显示每个提交全部的差异（diff），这也是项目历史中最详细的视图。\n\n```\ngit log --author=\"<pattern>\"\n```\n\n搜索特定作者的提交。`<pattern>` 可以是字符串或正则表达式。\n\n```\ngit log --grep=\"<pattern>\"\n```\n\n搜索提交信息匹配特定 `<pattern>` 的提交。`<pattern>` 可以是字符串或正则表达式。\n\n```\ngit log <since>..<until>\n```\n\n只显示发生在 `<since>` 和 `<until>` 之间的提交。两个参数可以是提交 ID、分支名、`HEAD` 或是任何一种引用。\n\n```\ngit log <file>\n```\n\n只显示包含特定文件的提交。查找特定文件的历史这样做会很方便。\n\n```\ngit log --graph --decorate --oneline\n```\n\n还有一些有用的选项。`--graph` 标记会绘制一幅字符组成的图形，左边是提交，右边是提交信息。`--decorate` 标记会加上提交所在的分支名称和标签。`--oneline` 标记将提交信息显示在同一行，一目了然。\n\n### 讨论\n\n`git log` 命令是 Git 查看项目历史的基本工具。当你要寻找项目特定的一个版本或者弄明白合并功能分支时引入了哪些变化，你就会用到这个命令。\n\n```\ncommit 3157ee3718e180a9476bf2e5cab8e3f1e78a73b7\nAuthor: John Smith\n```\n\n大多数时候都很简单直接。但是，第一行需要解释下。`commit` 后面 40 个字的字符串是提交内容的 SHA-1 校验总和（checksum）。它有两个作用。一是保证提交的正确性——如果它被损坏了，提交会生成一个不同的校验总和。第二，它是提交唯一的标识 ID。\n\n这个 ID 可以用于 `git log` 这样的命令中来引用具体的提交。比如，`git log 3157e..5ab91` 会显示所有ID在 `3157e` 和 `5ab91` 之间的提交。除了校验总和之外，分支名、HEAD 关键字也是常用的引用提交的方法。`HEAD` 总是指向当前的提交，无论是分支还是特定提交也好。\n\n~字符用于表示提交的父节点的相对引用。比如，`3157e~1` 指向 `3157e` 前一个提交,`HEAD~3` 是当前提交的回溯3个节点的提交。\n\n所有这些标识方法的背后都是为了让你对特定提交进行操作。`git log` 命令一般是这些交互的起点，因为它让你找到你想要的提交。\n\n### 例子\n\n*用法* 一节提供了 `git log` 很多的栗子，但请记住，你可以将很多选项用在同一个命令中：\n\n```\ngit log --author=\"John Smith\" -p hello.py\n```\n\n这个命令会显示 `John Smith` 作者对 `hello.py` 文件所做的所有更改的差异比较（diff）。\n\n..句法是比较分支很有用的工具。下面的栗子显示了在 `some-feature` 分支而不在 `master` 分支的所有提交的概览。\n\n```\ngit log --oneline master..some-feature\n```\n\n> 这篇教程来源于[**「git-recipes」**](https://github.com/geeeeeeeeek/git-recipes/)","slug":"5-查看仓库状态","published":1,"updated":"2023-03-01T14:53:24.596Z","_id":"clifr2v1p000r14uo43ds8vl0","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"检查仓库状态\"><a href=\"#检查仓库状态\" class=\"headerlink\" title=\"检查仓库状态\"></a>检查仓库状态</h1><h2 id=\"git-status\"><a href=\"#git-status\" class=\"headerlink\" title=\"git status\"></a>git status</h2><p><code>git status</code> 命令显示工作目录和缓存区的状态。你可以看到哪些更改被缓存了，哪些还没有，以及哪些还未被 Git 追踪。status 的输出 <em>不会</em> 告诉你任何已提交到项目历史的信息。如果你想看的话，应该使用 <code>git log</code> 命令。</p>\n<h3 id=\"用法\"><a href=\"#用法\" class=\"headerlink\" title=\"用法\"></a>用法</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git status</span><br></pre></td></tr></table></figure>\n\n<p>列出已缓存、未缓存、未追踪的文件。</p>\n<h3 id=\"讨论\"><a href=\"#讨论\" class=\"headerlink\" title=\"讨论\"></a>讨论</h3><p><code>git status</code> 是一个相对简单的命令。 它告诉你 <code>git add</code> 和 <code>git commit</code> 的进展。status 信息还包括了添加缓存和移除缓存的相关指令。样例输出显示了三类主要的 <code>git status</code> 输出：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># On branch master</span><br><span class=\"line\"># Changes to be committed:</span><br><span class=\"line\"># (use &quot;git reset HEAD &lt;file&gt;...&quot; to unstage)</span><br><span class=\"line\">#</span><br><span class=\"line\">#modified: hello.py</span><br><span class=\"line\">#</span><br><span class=\"line\"># Changes not staged for commit:</span><br><span class=\"line\"># (use &quot;git add &lt;file&gt;...&quot; to update what will be committed)</span><br><span class=\"line\"># (use &quot;git checkout -- &lt;file&gt;...&quot; to discard changes in working directory)</span><br><span class=\"line\">#</span><br><span class=\"line\">#modified: main.py</span><br><span class=\"line\">#</span><br><span class=\"line\"># Untracked files:</span><br><span class=\"line\"># (use &quot;git add &lt;file&gt;...&quot; to include in what will be committed)</span><br><span class=\"line\">#</span><br><span class=\"line\">#hello.pyc</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"忽略文件\"><a href=\"#忽略文件\" class=\"headerlink\" title=\"忽略文件\"></a>忽略文件</h4><p>未追踪的文件通常有两类。它们要么是项目新增但还未提交的文件，要么是像 <code>.pyc</code>、<code>.obj</code>、<code>.exe</code> 等编译后的二进制文件。显然前者应该出现在 <code>git status</code> 的输出中，而后者会让我们困惑究竟发生了什么。</p>\n<p>因此，Git 允许你完全忽略这些文件，只需要将路径放在一个特定的 <code>.gitignore</code> 文件中。所有想要忽略的文件应该分别写在单独一行，<code>*</code> 字符用作通配符。比如，将下面这行加入项目根目录的<code>.gitignore</code>文件可以避免编译后的Python模块出现在<code>git status</code>中：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">*.pyc</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"例子\"><a href=\"#例子\" class=\"headerlink\" title=\"例子\"></a>例子</h3><p>在提交更改前检查仓库状态是一个良好的实践，这样你就不会不小心提交什么奇怪的东西。这个例子显示了缓存和提交快照前后的仓库状态：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Edit hello.py</span><br><span class=\"line\">git status</span><br><span class=\"line\"># hello.py is listed under &quot;Changes not staged for commit&quot;</span><br><span class=\"line\">git add hello.py</span><br><span class=\"line\">git status</span><br><span class=\"line\"># hello.py is listed under &quot;Changes to be committed&quot;</span><br><span class=\"line\">git commit</span><br><span class=\"line\">git status</span><br><span class=\"line\"># nothing to commit (working directory clean)</span><br></pre></td></tr></table></figure>\n\n<p>第一个 status 的输出显示文件还未缓存。<code>git add</code> 操作会影响第二个 <code>git status</code>，最后的 status 输出告诉你已经没有可以提交的东西了——工作目录和最近的提交一致。一些 Git 命令（比如 <code>git merge</code>）需要工作目录整洁，以免意外覆盖更改。</p>\n<h2 id=\"git-log\"><a href=\"#git-log\" class=\"headerlink\" title=\"git log\"></a>git log</h2><p><code>git log</code> 命令显示已提交的快照。你可以列出项目历史，筛选，以及搜索特定更改。<code>git status</code> 允许你查看工作目录和缓存区，而 <code>git log</code> 只作用于提交的项目历史。</p>\n<p><img src=\"https://wac-cdn.atlassian.com/dam/jcr:52d530ce-7f51-48e3-920b-a18f776048d3/01.svg\" alt=\"Git Tutorial: git status vs. git log\"></p>\n<p>log 输出可以有很多种自定义的方式，从简单地筛选提交，到用完全自定义的格式显示。其中一些最常用的 <code>git log</code> 配置如下所示。</p>\n<h3 id=\"用法-1\"><a href=\"#用法-1\" class=\"headerlink\" title=\"用法\"></a>用法</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git log</span><br></pre></td></tr></table></figure>\n\n<p>使用默认格式显示完整地项目历史。如果输出超过一屏，你可以用 <code>空格键</code> 来滚动，按 <code>q</code> 退出。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git log -n &lt;limit&gt;</span><br></pre></td></tr></table></figure>\n\n<p>用 <code>&lt;limit&gt;</code> 限制提交的数量。比如 <code>git log -n 3</code> 只会显示 3 个提交。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git log --oneline</span><br></pre></td></tr></table></figure>\n\n<p>将每个提交压缩到一行。当你需要查看项目历史的上层情况时这会很有用。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git log --stat</span><br></pre></td></tr></table></figure>\n\n<p>除了 <code>git log</code> 信息之外，包含哪些文件被更改了，以及每个文件相对的增删行数。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git log -p</span><br></pre></td></tr></table></figure>\n\n<p>显示代表每个提交的一堆信息。显示每个提交全部的差异（diff），这也是项目历史中最详细的视图。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git log --author=&quot;&lt;pattern&gt;&quot;</span><br></pre></td></tr></table></figure>\n\n<p>搜索特定作者的提交。<code>&lt;pattern&gt;</code> 可以是字符串或正则表达式。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git log --grep=&quot;&lt;pattern&gt;&quot;</span><br></pre></td></tr></table></figure>\n\n<p>搜索提交信息匹配特定 <code>&lt;pattern&gt;</code> 的提交。<code>&lt;pattern&gt;</code> 可以是字符串或正则表达式。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git log &lt;since&gt;..&lt;until&gt;</span><br></pre></td></tr></table></figure>\n\n<p>只显示发生在 <code>&lt;since&gt;</code> 和 <code>&lt;until&gt;</code> 之间的提交。两个参数可以是提交 ID、分支名、<code>HEAD</code> 或是任何一种引用。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git log &lt;file&gt;</span><br></pre></td></tr></table></figure>\n\n<p>只显示包含特定文件的提交。查找特定文件的历史这样做会很方便。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git log --graph --decorate --oneline</span><br></pre></td></tr></table></figure>\n\n<p>还有一些有用的选项。<code>--graph</code> 标记会绘制一幅字符组成的图形，左边是提交，右边是提交信息。<code>--decorate</code> 标记会加上提交所在的分支名称和标签。<code>--oneline</code> 标记将提交信息显示在同一行，一目了然。</p>\n<h3 id=\"讨论-1\"><a href=\"#讨论-1\" class=\"headerlink\" title=\"讨论\"></a>讨论</h3><p><code>git log</code> 命令是 Git 查看项目历史的基本工具。当你要寻找项目特定的一个版本或者弄明白合并功能分支时引入了哪些变化，你就会用到这个命令。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">commit 3157ee3718e180a9476bf2e5cab8e3f1e78a73b7</span><br><span class=\"line\">Author: John Smith</span><br></pre></td></tr></table></figure>\n\n<p>大多数时候都很简单直接。但是，第一行需要解释下。<code>commit</code> 后面 40 个字的字符串是提交内容的 SHA-1 校验总和（checksum）。它有两个作用。一是保证提交的正确性——如果它被损坏了，提交会生成一个不同的校验总和。第二，它是提交唯一的标识 ID。</p>\n<p>这个 ID 可以用于 <code>git log</code> 这样的命令中来引用具体的提交。比如，<code>git log 3157e..5ab91</code> 会显示所有ID在 <code>3157e</code> 和 <code>5ab91</code> 之间的提交。除了校验总和之外，分支名、HEAD 关键字也是常用的引用提交的方法。<code>HEAD</code> 总是指向当前的提交，无论是分支还是特定提交也好。</p>\n<p><del>字符用于表示提交的父节点的相对引用。比如，`3157e</del>1<code>指向</code>3157e<code> 前一个提交,</code>HEAD~3` 是当前提交的回溯3个节点的提交。</p>\n<p>所有这些标识方法的背后都是为了让你对特定提交进行操作。<code>git log</code> 命令一般是这些交互的起点，因为它让你找到你想要的提交。</p>\n<h3 id=\"例子-1\"><a href=\"#例子-1\" class=\"headerlink\" title=\"例子\"></a>例子</h3><p><em>用法</em> 一节提供了 <code>git log</code> 很多的栗子，但请记住，你可以将很多选项用在同一个命令中：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git log --author=&quot;John Smith&quot; -p hello.py</span><br></pre></td></tr></table></figure>\n\n<p>这个命令会显示 <code>John Smith</code> 作者对 <code>hello.py</code> 文件所做的所有更改的差异比较（diff）。</p>\n<p>..句法是比较分支很有用的工具。下面的栗子显示了在 <code>some-feature</code> 分支而不在 <code>master</code> 分支的所有提交的概览。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git log --oneline master..some-feature</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>这篇教程来源于<a href=\"https://github.com/geeeeeeeeek/git-recipes/\"><strong>「git-recipes」</strong></a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"检查仓库状态\"><a href=\"#检查仓库状态\" class=\"headerlink\" title=\"检查仓库状态\"></a>检查仓库状态</h1><h2 id=\"git-status\"><a href=\"#git-status\" class=\"headerlink\" title=\"git status\"></a>git status</h2><p><code>git status</code> 命令显示工作目录和缓存区的状态。你可以看到哪些更改被缓存了，哪些还没有，以及哪些还未被 Git 追踪。status 的输出 <em>不会</em> 告诉你任何已提交到项目历史的信息。如果你想看的话，应该使用 <code>git log</code> 命令。</p>\n<h3 id=\"用法\"><a href=\"#用法\" class=\"headerlink\" title=\"用法\"></a>用法</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git status</span><br></pre></td></tr></table></figure>\n\n<p>列出已缓存、未缓存、未追踪的文件。</p>\n<h3 id=\"讨论\"><a href=\"#讨论\" class=\"headerlink\" title=\"讨论\"></a>讨论</h3><p><code>git status</code> 是一个相对简单的命令。 它告诉你 <code>git add</code> 和 <code>git commit</code> 的进展。status 信息还包括了添加缓存和移除缓存的相关指令。样例输出显示了三类主要的 <code>git status</code> 输出：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># On branch master</span><br><span class=\"line\"># Changes to be committed:</span><br><span class=\"line\"># (use &quot;git reset HEAD &lt;file&gt;...&quot; to unstage)</span><br><span class=\"line\">#</span><br><span class=\"line\">#modified: hello.py</span><br><span class=\"line\">#</span><br><span class=\"line\"># Changes not staged for commit:</span><br><span class=\"line\"># (use &quot;git add &lt;file&gt;...&quot; to update what will be committed)</span><br><span class=\"line\"># (use &quot;git checkout -- &lt;file&gt;...&quot; to discard changes in working directory)</span><br><span class=\"line\">#</span><br><span class=\"line\">#modified: main.py</span><br><span class=\"line\">#</span><br><span class=\"line\"># Untracked files:</span><br><span class=\"line\"># (use &quot;git add &lt;file&gt;...&quot; to include in what will be committed)</span><br><span class=\"line\">#</span><br><span class=\"line\">#hello.pyc</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"忽略文件\"><a href=\"#忽略文件\" class=\"headerlink\" title=\"忽略文件\"></a>忽略文件</h4><p>未追踪的文件通常有两类。它们要么是项目新增但还未提交的文件，要么是像 <code>.pyc</code>、<code>.obj</code>、<code>.exe</code> 等编译后的二进制文件。显然前者应该出现在 <code>git status</code> 的输出中，而后者会让我们困惑究竟发生了什么。</p>\n<p>因此，Git 允许你完全忽略这些文件，只需要将路径放在一个特定的 <code>.gitignore</code> 文件中。所有想要忽略的文件应该分别写在单独一行，<code>*</code> 字符用作通配符。比如，将下面这行加入项目根目录的<code>.gitignore</code>文件可以避免编译后的Python模块出现在<code>git status</code>中：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">*.pyc</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"例子\"><a href=\"#例子\" class=\"headerlink\" title=\"例子\"></a>例子</h3><p>在提交更改前检查仓库状态是一个良好的实践，这样你就不会不小心提交什么奇怪的东西。这个例子显示了缓存和提交快照前后的仓库状态：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Edit hello.py</span><br><span class=\"line\">git status</span><br><span class=\"line\"># hello.py is listed under &quot;Changes not staged for commit&quot;</span><br><span class=\"line\">git add hello.py</span><br><span class=\"line\">git status</span><br><span class=\"line\"># hello.py is listed under &quot;Changes to be committed&quot;</span><br><span class=\"line\">git commit</span><br><span class=\"line\">git status</span><br><span class=\"line\"># nothing to commit (working directory clean)</span><br></pre></td></tr></table></figure>\n\n<p>第一个 status 的输出显示文件还未缓存。<code>git add</code> 操作会影响第二个 <code>git status</code>，最后的 status 输出告诉你已经没有可以提交的东西了——工作目录和最近的提交一致。一些 Git 命令（比如 <code>git merge</code>）需要工作目录整洁，以免意外覆盖更改。</p>\n<h2 id=\"git-log\"><a href=\"#git-log\" class=\"headerlink\" title=\"git log\"></a>git log</h2><p><code>git log</code> 命令显示已提交的快照。你可以列出项目历史，筛选，以及搜索特定更改。<code>git status</code> 允许你查看工作目录和缓存区，而 <code>git log</code> 只作用于提交的项目历史。</p>\n<p><img src=\"https://wac-cdn.atlassian.com/dam/jcr:52d530ce-7f51-48e3-920b-a18f776048d3/01.svg\" alt=\"Git Tutorial: git status vs. git log\"></p>\n<p>log 输出可以有很多种自定义的方式，从简单地筛选提交，到用完全自定义的格式显示。其中一些最常用的 <code>git log</code> 配置如下所示。</p>\n<h3 id=\"用法-1\"><a href=\"#用法-1\" class=\"headerlink\" title=\"用法\"></a>用法</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git log</span><br></pre></td></tr></table></figure>\n\n<p>使用默认格式显示完整地项目历史。如果输出超过一屏，你可以用 <code>空格键</code> 来滚动，按 <code>q</code> 退出。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git log -n &lt;limit&gt;</span><br></pre></td></tr></table></figure>\n\n<p>用 <code>&lt;limit&gt;</code> 限制提交的数量。比如 <code>git log -n 3</code> 只会显示 3 个提交。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git log --oneline</span><br></pre></td></tr></table></figure>\n\n<p>将每个提交压缩到一行。当你需要查看项目历史的上层情况时这会很有用。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git log --stat</span><br></pre></td></tr></table></figure>\n\n<p>除了 <code>git log</code> 信息之外，包含哪些文件被更改了，以及每个文件相对的增删行数。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git log -p</span><br></pre></td></tr></table></figure>\n\n<p>显示代表每个提交的一堆信息。显示每个提交全部的差异（diff），这也是项目历史中最详细的视图。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git log --author=&quot;&lt;pattern&gt;&quot;</span><br></pre></td></tr></table></figure>\n\n<p>搜索特定作者的提交。<code>&lt;pattern&gt;</code> 可以是字符串或正则表达式。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git log --grep=&quot;&lt;pattern&gt;&quot;</span><br></pre></td></tr></table></figure>\n\n<p>搜索提交信息匹配特定 <code>&lt;pattern&gt;</code> 的提交。<code>&lt;pattern&gt;</code> 可以是字符串或正则表达式。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git log &lt;since&gt;..&lt;until&gt;</span><br></pre></td></tr></table></figure>\n\n<p>只显示发生在 <code>&lt;since&gt;</code> 和 <code>&lt;until&gt;</code> 之间的提交。两个参数可以是提交 ID、分支名、<code>HEAD</code> 或是任何一种引用。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git log &lt;file&gt;</span><br></pre></td></tr></table></figure>\n\n<p>只显示包含特定文件的提交。查找特定文件的历史这样做会很方便。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git log --graph --decorate --oneline</span><br></pre></td></tr></table></figure>\n\n<p>还有一些有用的选项。<code>--graph</code> 标记会绘制一幅字符组成的图形，左边是提交，右边是提交信息。<code>--decorate</code> 标记会加上提交所在的分支名称和标签。<code>--oneline</code> 标记将提交信息显示在同一行，一目了然。</p>\n<h3 id=\"讨论-1\"><a href=\"#讨论-1\" class=\"headerlink\" title=\"讨论\"></a>讨论</h3><p><code>git log</code> 命令是 Git 查看项目历史的基本工具。当你要寻找项目特定的一个版本或者弄明白合并功能分支时引入了哪些变化，你就会用到这个命令。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">commit 3157ee3718e180a9476bf2e5cab8e3f1e78a73b7</span><br><span class=\"line\">Author: John Smith</span><br></pre></td></tr></table></figure>\n\n<p>大多数时候都很简单直接。但是，第一行需要解释下。<code>commit</code> 后面 40 个字的字符串是提交内容的 SHA-1 校验总和（checksum）。它有两个作用。一是保证提交的正确性——如果它被损坏了，提交会生成一个不同的校验总和。第二，它是提交唯一的标识 ID。</p>\n<p>这个 ID 可以用于 <code>git log</code> 这样的命令中来引用具体的提交。比如，<code>git log 3157e..5ab91</code> 会显示所有ID在 <code>3157e</code> 和 <code>5ab91</code> 之间的提交。除了校验总和之外，分支名、HEAD 关键字也是常用的引用提交的方法。<code>HEAD</code> 总是指向当前的提交，无论是分支还是特定提交也好。</p>\n<p><del>字符用于表示提交的父节点的相对引用。比如，`3157e</del>1<code>指向</code>3157e<code> 前一个提交,</code>HEAD~3` 是当前提交的回溯3个节点的提交。</p>\n<p>所有这些标识方法的背后都是为了让你对特定提交进行操作。<code>git log</code> 命令一般是这些交互的起点，因为它让你找到你想要的提交。</p>\n<h3 id=\"例子-1\"><a href=\"#例子-1\" class=\"headerlink\" title=\"例子\"></a>例子</h3><p><em>用法</em> 一节提供了 <code>git log</code> 很多的栗子，但请记住，你可以将很多选项用在同一个命令中：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git log --author=&quot;John Smith&quot; -p hello.py</span><br></pre></td></tr></table></figure>\n\n<p>这个命令会显示 <code>John Smith</code> 作者对 <code>hello.py</code> 文件所做的所有更改的差异比较（diff）。</p>\n<p>..句法是比较分支很有用的工具。下面的栗子显示了在 <code>some-feature</code> 分支而不在 <code>master</code> 分支的所有提交的概览。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git log --oneline master..some-feature</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>这篇教程来源于<a href=\"https://github.com/geeeeeeeeek/git-recipes/\"><strong>「git-recipes」</strong></a></p>\n</blockquote>\n"},{"title":"6.指定编译器","author":"连思鑫","date":"2023-03-02T11:13:00.000Z","_content":"#### 指定编译器\n\n-----\n\n> 目前为止，我常用的编译器都集中在交叉编译，例如arm，arm64等。\n>\n> CMake可以根据平台和生成器选择编译器，还能将编译器标志设置为默认值。\n>\n> 然而，我们通常控制编译器的选择。\n>\n> 在后面的示例中，我们还将考虑构建类型的选择，并展示如何控制编译器标志。\n\n#### 具体实施\n\n-----\n\n> CMake将语言的编译器存储在 CMAKE\\_<LANG>\\_COMPILER 变量中，其中 <LANG> 是受支持的任何一种语言，\n>\n> 对于我们的目的是 CXX 、 C 或 Fortran 。用户可以通过以下两种方式之一设置此变量：\n\n1. ``` cmake\n   # 使用CLI中的 -D 选项，例如：\n   cmake -D CMAKE_CXX_COMPILER=clang++ ..\n   ```\n\n2. ``` cmake\n   # 通过导出环境变量 CXX (C++编译器)、 CC (C编译器)和 FC (Fortran编译器)。\n   # 例如，使用这个命令使用 clang++ 作为 C++ 编译器：\n   env CXX=clang++ cmake ..\n   ```\n\n#### 编译器选项\n\n- CMAKE_CXX_COMPILER \n- CMAKE_C_COMPILER \n- CMAKE_Fortran_COMPILER\n\n##### 实例运行输出结果\n\n``` shell\n$ cmake ..\n\n-- Building for: Visual Studio 16 2019\n-- Selecting Windows SDK version 10.0.19041.0 to target Windows 10.0.19042.\n-- The C compiler identification is MSVC 19.29.30038.1\n-- The CXX compiler identification is MSVC 19.29.30038.1\n-- Detecting C compiler ABI info\n-- Detecting C compiler ABI info - done\n-- Check for working C compiler: C:/Program Files (x86)/Microsoft Visual Studio/2019/Community/VC/Tools/MSVC/14.29.30037/bin/Hostx64/x64/cl.exe - skipped\n-- Detecting C compile features\n-- Detecting C compile features - done\n-- Detecting CXX compiler ABI info\n-- Detecting CXX compiler ABI info - done\n-- Check for working CXX compiler: C:/Program Files (x86)/Microsoft Visual Studio/2019/Community/VC/Tools/MSVC/14.29.30037/bin/Hostx64/x64/cl.exe - skipped\n-- Detecting CXX compile features\n-- Detecting CXX compile features - done\n-- ##### Is the C++ compiler loaded? 1 #####\n-- ##### The C++ compiler ID is: MSVC #####\n-- ##### Is the C++ from GNU?  #####\n-- ##### The C++ compiler version is: 19.29.30038.1 #####\n-- ##### Is the C compiler loaded? 1 #####\n-- ##### The C compiler ID is: MSVC #####\n-- ##### Is the C++ from GNU?  #####\n-- ##### The C compiler version is: 19.29.30038.1 #####\n-- Configuring done\n```\n\n#### CMakeLists.txt文件\n\n在CMakeLists.txt文件中通常如下指定，不用是注释掉，用的时候取消注释。\n```cmake\n#[[#FT\nset(CMAKE_SYSTEM_NAME Linux)\nset(CMAKE_C_COMPILER \"/bin/aarch64-linux-gnu-gcc\")\nset(CMAKE_CXX_COMPILER \"/bin/aarch64-linux-gnu-g++\")]]\n\n#[[#7045\nset(CMAKE_SYSTEM_NAME Linux)\nset(CMAKE_C_COMPILER \"/bin/arm-linux-gnueabihf-gcc\")\nset(CMAKE_CXX_COMPILER \"/bin/arm-linux-gnueabihf-g++\")]]\n```\n\n例子1：CMakeLists.txt\n```cmake\n# 注意，这个例子不包含任何目标，没有要构建的东西，我们只关注配置步骤:\n\ncmake_minimum_required(VERSION 3.5)\n\nproject(hello-world LANGUAGES C CXX)\n\nmessage(STATUS \"##### Is the C++ compiler loaded? ${CMAKE_CXX_COMPILER_LOADED}\")\nif (${CMAKE_CXX_COMPILER_LOADED})\n\tmessage(STATUS \"##### The C++ compiler ID is: ${CMAKE_CXX_COMPILER_ID}\")\n\tmessage(STATUS \"##### Is the C++ from GNU? ${CMAKE_COMPILER_IS_GNUCXX}\")\n\tmessage(STATUS \"##### The C++ compiler version is: ${CMAKE_CXX_COMPILER_VERSION}\")\nendif()\n\nmessage(STATUS \"##### Is the C compiler loaded? ${CMAKE_C_COMPILER_LOADED}\")\nif (${CMAKE_C_COMPILER_LOADED})\n\tmessage(STATUS \"##### The C compiler ID is: ${CMAKE_C_COMPILER_ID}\")\n\tmessage(STATUS \"##### Is the C++ from GNU? ${CMAKE_COMPILER_IS_GNUCC}\")\n\tmessage(STATUS \"##### The C compiler version is: ${CMAKE_C_COMPILER_VERSION}\")\nendif()\n```\n\n例子2：CMakeLists.txt\n```cmake\ncmake_minimum_required(VERSION 3.5)\n\nproject(hello-world LANGUAGES C CXX)\n\noption(CMAKE_CXX_COMPILER clang++)\nmessage(STATUS \"##### 编译器：${CMAKE_CXX_COMPILER_ID}\")\nmessage(STATUS \"##### 编译器版本：${CMAKE_CXX_COMPILER_VERSION}\")\n\noption(USE_LIBRARY OFF)\nmessage(STATUS \"##### USE_LIBRARY? ${USE_LIBRARY}\")\n\nlist(APPEND _sources Message.h Message.cpp)\n\nif (${USE_LIBRARY})\n\tadd_library(message ${_sources})\n\tadd_executable(hello-world hello-world.cpp)\n\ttarget_link_libraries(hello-world message)\nelse()\n\tadd_executable(hello-world hello-world.cpp message)\nendif()\n```\n\n","source":"_posts/6-指定编译器.md","raw":"title: 6.指定编译器\nauthor: 连思鑫\ntags:\n  - cmake\ncategories:\n  - ..\n  - cmake\n  - 第一章：从简单的可执行文件到库\ndate: 2023-03-02 19:13:00\n---\n#### 指定编译器\n\n-----\n\n> 目前为止，我常用的编译器都集中在交叉编译，例如arm，arm64等。\n>\n> CMake可以根据平台和生成器选择编译器，还能将编译器标志设置为默认值。\n>\n> 然而，我们通常控制编译器的选择。\n>\n> 在后面的示例中，我们还将考虑构建类型的选择，并展示如何控制编译器标志。\n\n#### 具体实施\n\n-----\n\n> CMake将语言的编译器存储在 CMAKE\\_<LANG>\\_COMPILER 变量中，其中 <LANG> 是受支持的任何一种语言，\n>\n> 对于我们的目的是 CXX 、 C 或 Fortran 。用户可以通过以下两种方式之一设置此变量：\n\n1. ``` cmake\n   # 使用CLI中的 -D 选项，例如：\n   cmake -D CMAKE_CXX_COMPILER=clang++ ..\n   ```\n\n2. ``` cmake\n   # 通过导出环境变量 CXX (C++编译器)、 CC (C编译器)和 FC (Fortran编译器)。\n   # 例如，使用这个命令使用 clang++ 作为 C++ 编译器：\n   env CXX=clang++ cmake ..\n   ```\n\n#### 编译器选项\n\n- CMAKE_CXX_COMPILER \n- CMAKE_C_COMPILER \n- CMAKE_Fortran_COMPILER\n\n##### 实例运行输出结果\n\n``` shell\n$ cmake ..\n\n-- Building for: Visual Studio 16 2019\n-- Selecting Windows SDK version 10.0.19041.0 to target Windows 10.0.19042.\n-- The C compiler identification is MSVC 19.29.30038.1\n-- The CXX compiler identification is MSVC 19.29.30038.1\n-- Detecting C compiler ABI info\n-- Detecting C compiler ABI info - done\n-- Check for working C compiler: C:/Program Files (x86)/Microsoft Visual Studio/2019/Community/VC/Tools/MSVC/14.29.30037/bin/Hostx64/x64/cl.exe - skipped\n-- Detecting C compile features\n-- Detecting C compile features - done\n-- Detecting CXX compiler ABI info\n-- Detecting CXX compiler ABI info - done\n-- Check for working CXX compiler: C:/Program Files (x86)/Microsoft Visual Studio/2019/Community/VC/Tools/MSVC/14.29.30037/bin/Hostx64/x64/cl.exe - skipped\n-- Detecting CXX compile features\n-- Detecting CXX compile features - done\n-- ##### Is the C++ compiler loaded? 1 #####\n-- ##### The C++ compiler ID is: MSVC #####\n-- ##### Is the C++ from GNU?  #####\n-- ##### The C++ compiler version is: 19.29.30038.1 #####\n-- ##### Is the C compiler loaded? 1 #####\n-- ##### The C compiler ID is: MSVC #####\n-- ##### Is the C++ from GNU?  #####\n-- ##### The C compiler version is: 19.29.30038.1 #####\n-- Configuring done\n```\n\n#### CMakeLists.txt文件\n\n在CMakeLists.txt文件中通常如下指定，不用是注释掉，用的时候取消注释。\n```cmake\n#[[#FT\nset(CMAKE_SYSTEM_NAME Linux)\nset(CMAKE_C_COMPILER \"/bin/aarch64-linux-gnu-gcc\")\nset(CMAKE_CXX_COMPILER \"/bin/aarch64-linux-gnu-g++\")]]\n\n#[[#7045\nset(CMAKE_SYSTEM_NAME Linux)\nset(CMAKE_C_COMPILER \"/bin/arm-linux-gnueabihf-gcc\")\nset(CMAKE_CXX_COMPILER \"/bin/arm-linux-gnueabihf-g++\")]]\n```\n\n例子1：CMakeLists.txt\n```cmake\n# 注意，这个例子不包含任何目标，没有要构建的东西，我们只关注配置步骤:\n\ncmake_minimum_required(VERSION 3.5)\n\nproject(hello-world LANGUAGES C CXX)\n\nmessage(STATUS \"##### Is the C++ compiler loaded? ${CMAKE_CXX_COMPILER_LOADED}\")\nif (${CMAKE_CXX_COMPILER_LOADED})\n\tmessage(STATUS \"##### The C++ compiler ID is: ${CMAKE_CXX_COMPILER_ID}\")\n\tmessage(STATUS \"##### Is the C++ from GNU? ${CMAKE_COMPILER_IS_GNUCXX}\")\n\tmessage(STATUS \"##### The C++ compiler version is: ${CMAKE_CXX_COMPILER_VERSION}\")\nendif()\n\nmessage(STATUS \"##### Is the C compiler loaded? ${CMAKE_C_COMPILER_LOADED}\")\nif (${CMAKE_C_COMPILER_LOADED})\n\tmessage(STATUS \"##### The C compiler ID is: ${CMAKE_C_COMPILER_ID}\")\n\tmessage(STATUS \"##### Is the C++ from GNU? ${CMAKE_COMPILER_IS_GNUCC}\")\n\tmessage(STATUS \"##### The C compiler version is: ${CMAKE_C_COMPILER_VERSION}\")\nendif()\n```\n\n例子2：CMakeLists.txt\n```cmake\ncmake_minimum_required(VERSION 3.5)\n\nproject(hello-world LANGUAGES C CXX)\n\noption(CMAKE_CXX_COMPILER clang++)\nmessage(STATUS \"##### 编译器：${CMAKE_CXX_COMPILER_ID}\")\nmessage(STATUS \"##### 编译器版本：${CMAKE_CXX_COMPILER_VERSION}\")\n\noption(USE_LIBRARY OFF)\nmessage(STATUS \"##### USE_LIBRARY? ${USE_LIBRARY}\")\n\nlist(APPEND _sources Message.h Message.cpp)\n\nif (${USE_LIBRARY})\n\tadd_library(message ${_sources})\n\tadd_executable(hello-world hello-world.cpp)\n\ttarget_link_libraries(hello-world message)\nelse()\n\tadd_executable(hello-world hello-world.cpp message)\nendif()\n```\n\n","slug":"6-指定编译器","published":1,"updated":"2023-03-02T11:20:12.953Z","_id":"clifr2v1q000v14uo7huu1smh","comments":1,"layout":"post","photos":[],"link":"","content":"<h4 id=\"指定编译器\"><a href=\"#指定编译器\" class=\"headerlink\" title=\"指定编译器\"></a>指定编译器</h4><hr>\n<blockquote>\n<p>目前为止，我常用的编译器都集中在交叉编译，例如arm，arm64等。</p>\n<p>CMake可以根据平台和生成器选择编译器，还能将编译器标志设置为默认值。</p>\n<p>然而，我们通常控制编译器的选择。</p>\n<p>在后面的示例中，我们还将考虑构建类型的选择，并展示如何控制编译器标志。</p>\n</blockquote>\n<h4 id=\"具体实施\"><a href=\"#具体实施\" class=\"headerlink\" title=\"具体实施\"></a>具体实施</h4><hr>\n<blockquote>\n<p>CMake将语言的编译器存储在 CMAKE_<LANG>_COMPILER 变量中，其中 <LANG> 是受支持的任何一种语言，</p>\n<p>对于我们的目的是 CXX 、 C 或 Fortran 。用户可以通过以下两种方式之一设置此变量：</p>\n</blockquote>\n<ol>\n<li>``` cmake<h1 id=\"使用CLI中的-D-选项，例如：\"><a href=\"#使用CLI中的-D-选项，例如：\" class=\"headerlink\" title=\"使用CLI中的 -D 选项，例如：\"></a>使用CLI中的 -D 选项，例如：</h1>cmake -D CMAKE_CXX_COMPILER=clang++ ..<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">2. ``` cmake</span><br><span class=\"line\">   # 通过导出环境变量 CXX (C++编译器)、 CC (C编译器)和 FC (Fortran编译器)。</span><br><span class=\"line\">   # 例如，使用这个命令使用 clang++ 作为 C++ 编译器：</span><br><span class=\"line\">   env CXX=clang++ cmake ..</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h4 id=\"编译器选项\"><a href=\"#编译器选项\" class=\"headerlink\" title=\"编译器选项\"></a>编译器选项</h4><ul>\n<li>CMAKE_CXX_COMPILER </li>\n<li>CMAKE_C_COMPILER </li>\n<li>CMAKE_Fortran_COMPILER</li>\n</ul>\n<h5 id=\"实例运行输出结果\"><a href=\"#实例运行输出结果\" class=\"headerlink\" title=\"实例运行输出结果\"></a>实例运行输出结果</h5><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">cmake ..</span></span><br><span class=\"line\"></span><br><span class=\"line\">-- Building for: Visual Studio 16 2019</span><br><span class=\"line\">-- Selecting Windows SDK version 10.0.19041.0 to target Windows 10.0.19042.</span><br><span class=\"line\">-- The C compiler identification is MSVC 19.29.30038.1</span><br><span class=\"line\">-- The CXX compiler identification is MSVC 19.29.30038.1</span><br><span class=\"line\">-- Detecting C compiler ABI info</span><br><span class=\"line\">-- Detecting C compiler ABI info - done</span><br><span class=\"line\">-- Check for working C compiler: C:/Program Files (x86)/Microsoft Visual Studio/2019/Community/VC/Tools/MSVC/14.29.30037/bin/Hostx64/x64/cl.exe - skipped</span><br><span class=\"line\">-- Detecting C compile features</span><br><span class=\"line\">-- Detecting C compile features - done</span><br><span class=\"line\">-- Detecting CXX compiler ABI info</span><br><span class=\"line\">-- Detecting CXX compiler ABI info - done</span><br><span class=\"line\">-- Check for working CXX compiler: C:/Program Files (x86)/Microsoft Visual Studio/2019/Community/VC/Tools/MSVC/14.29.30037/bin/Hostx64/x64/cl.exe - skipped</span><br><span class=\"line\">-- Detecting CXX compile features</span><br><span class=\"line\">-- Detecting CXX compile features - done</span><br><span class=\"line\">-- ##### Is the C++ compiler loaded? 1 #####</span><br><span class=\"line\">-- ##### The C++ compiler ID is: MSVC #####</span><br><span class=\"line\">-- ##### Is the C++ from GNU?  #####</span><br><span class=\"line\">-- ##### The C++ compiler version is: 19.29.30038.1 #####</span><br><span class=\"line\">-- ##### Is the C compiler loaded? 1 #####</span><br><span class=\"line\">-- ##### The C compiler ID is: MSVC #####</span><br><span class=\"line\">-- ##### Is the C++ from GNU?  #####</span><br><span class=\"line\">-- ##### The C compiler version is: 19.29.30038.1 #####</span><br><span class=\"line\">-- Configuring done</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"CMakeLists-txt文件\"><a href=\"#CMakeLists-txt文件\" class=\"headerlink\" title=\"CMakeLists.txt文件\"></a>CMakeLists.txt文件</h4><p>在CMakeLists.txt文件中通常如下指定，不用是注释掉，用的时候取消注释。</p>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#[[#FT</span></span><br><span class=\"line\"><span class=\"comment\">set(CMAKE_SYSTEM_NAME Linux)</span></span><br><span class=\"line\"><span class=\"comment\">set(CMAKE_C_COMPILER &quot;/bin/aarch64-linux-gnu-gcc&quot;)</span></span><br><span class=\"line\"><span class=\"comment\">set(CMAKE_CXX_COMPILER &quot;/bin/aarch64-linux-gnu-g++&quot;)]]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#[[#7045</span></span><br><span class=\"line\"><span class=\"comment\">set(CMAKE_SYSTEM_NAME Linux)</span></span><br><span class=\"line\"><span class=\"comment\">set(CMAKE_C_COMPILER &quot;/bin/arm-linux-gnueabihf-gcc&quot;)</span></span><br><span class=\"line\"><span class=\"comment\">set(CMAKE_CXX_COMPILER &quot;/bin/arm-linux-gnueabihf-g++&quot;)]]</span></span><br></pre></td></tr></table></figure>\n\n<p>例子1：CMakeLists.txt</p>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 注意，这个例子不包含任何目标，没有要构建的东西，我们只关注配置步骤:</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">cmake_minimum_required</span>(VERSION <span class=\"number\">3.5</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">project</span>(hello-world LANGUAGES C CXX)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">message</span>(STATUS <span class=\"string\">&quot;##### Is the C++ compiler loaded? $&#123;CMAKE_CXX_COMPILER_LOADED&#125;&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"variable\">$&#123;CMAKE_CXX_COMPILER_LOADED&#125;</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">message</span>(STATUS <span class=\"string\">&quot;##### The C++ compiler ID is: $&#123;CMAKE_CXX_COMPILER_ID&#125;&quot;</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">message</span>(STATUS <span class=\"string\">&quot;##### Is the C++ from GNU? $&#123;CMAKE_COMPILER_IS_GNUCXX&#125;&quot;</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">message</span>(STATUS <span class=\"string\">&quot;##### The C++ compiler version is: $&#123;CMAKE_CXX_COMPILER_VERSION&#125;&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">endif</span>()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">message</span>(STATUS <span class=\"string\">&quot;##### Is the C compiler loaded? $&#123;CMAKE_C_COMPILER_LOADED&#125;&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"variable\">$&#123;CMAKE_C_COMPILER_LOADED&#125;</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">message</span>(STATUS <span class=\"string\">&quot;##### The C compiler ID is: $&#123;CMAKE_C_COMPILER_ID&#125;&quot;</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">message</span>(STATUS <span class=\"string\">&quot;##### Is the C++ from GNU? $&#123;CMAKE_COMPILER_IS_GNUCC&#125;&quot;</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">message</span>(STATUS <span class=\"string\">&quot;##### The C compiler version is: $&#123;CMAKE_C_COMPILER_VERSION&#125;&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">endif</span>()</span><br></pre></td></tr></table></figure>\n\n<p>例子2：CMakeLists.txt</p>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">cmake_minimum_required</span>(VERSION <span class=\"number\">3.5</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">project</span>(hello-world LANGUAGES C CXX)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">option</span>(CMAKE_CXX_COMPILER clang++)</span><br><span class=\"line\"><span class=\"keyword\">message</span>(STATUS <span class=\"string\">&quot;##### 编译器：$&#123;CMAKE_CXX_COMPILER_ID&#125;&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">message</span>(STATUS <span class=\"string\">&quot;##### 编译器版本：$&#123;CMAKE_CXX_COMPILER_VERSION&#125;&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">option</span>(USE_LIBRARY <span class=\"keyword\">OFF</span>)</span><br><span class=\"line\"><span class=\"keyword\">message</span>(STATUS <span class=\"string\">&quot;##### USE_LIBRARY? $&#123;USE_LIBRARY&#125;&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">list</span>(APPEND _sources <span class=\"keyword\">Message</span>.h <span class=\"keyword\">Message</span>.cpp)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"variable\">$&#123;USE_LIBRARY&#125;</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">add_library</span>(<span class=\"keyword\">message</span> <span class=\"variable\">$&#123;_sources&#125;</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">add_executable</span>(hello-world hello-world.cpp)</span><br><span class=\"line\">\t<span class=\"keyword\">target_link_libraries</span>(hello-world <span class=\"keyword\">message</span>)</span><br><span class=\"line\"><span class=\"keyword\">else</span>()</span><br><span class=\"line\">\t<span class=\"keyword\">add_executable</span>(hello-world hello-world.cpp <span class=\"keyword\">message</span>)</span><br><span class=\"line\"><span class=\"keyword\">endif</span>()</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"指定编译器\"><a href=\"#指定编译器\" class=\"headerlink\" title=\"指定编译器\"></a>指定编译器</h4><hr>\n<blockquote>\n<p>目前为止，我常用的编译器都集中在交叉编译，例如arm，arm64等。</p>\n<p>CMake可以根据平台和生成器选择编译器，还能将编译器标志设置为默认值。</p>\n<p>然而，我们通常控制编译器的选择。</p>\n<p>在后面的示例中，我们还将考虑构建类型的选择，并展示如何控制编译器标志。</p>\n</blockquote>\n<h4 id=\"具体实施\"><a href=\"#具体实施\" class=\"headerlink\" title=\"具体实施\"></a>具体实施</h4><hr>\n<blockquote>\n<p>CMake将语言的编译器存储在 CMAKE_<LANG>_COMPILER 变量中，其中 <LANG> 是受支持的任何一种语言，</p>\n<p>对于我们的目的是 CXX 、 C 或 Fortran 。用户可以通过以下两种方式之一设置此变量：</p>\n</blockquote>\n<ol>\n<li>``` cmake<h1 id=\"使用CLI中的-D-选项，例如：\"><a href=\"#使用CLI中的-D-选项，例如：\" class=\"headerlink\" title=\"使用CLI中的 -D 选项，例如：\"></a>使用CLI中的 -D 选项，例如：</h1>cmake -D CMAKE_CXX_COMPILER=clang++ ..<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">2. ``` cmake</span><br><span class=\"line\">   # 通过导出环境变量 CXX (C++编译器)、 CC (C编译器)和 FC (Fortran编译器)。</span><br><span class=\"line\">   # 例如，使用这个命令使用 clang++ 作为 C++ 编译器：</span><br><span class=\"line\">   env CXX=clang++ cmake ..</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h4 id=\"编译器选项\"><a href=\"#编译器选项\" class=\"headerlink\" title=\"编译器选项\"></a>编译器选项</h4><ul>\n<li>CMAKE_CXX_COMPILER </li>\n<li>CMAKE_C_COMPILER </li>\n<li>CMAKE_Fortran_COMPILER</li>\n</ul>\n<h5 id=\"实例运行输出结果\"><a href=\"#实例运行输出结果\" class=\"headerlink\" title=\"实例运行输出结果\"></a>实例运行输出结果</h5><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">cmake ..</span></span><br><span class=\"line\"></span><br><span class=\"line\">-- Building for: Visual Studio 16 2019</span><br><span class=\"line\">-- Selecting Windows SDK version 10.0.19041.0 to target Windows 10.0.19042.</span><br><span class=\"line\">-- The C compiler identification is MSVC 19.29.30038.1</span><br><span class=\"line\">-- The CXX compiler identification is MSVC 19.29.30038.1</span><br><span class=\"line\">-- Detecting C compiler ABI info</span><br><span class=\"line\">-- Detecting C compiler ABI info - done</span><br><span class=\"line\">-- Check for working C compiler: C:/Program Files (x86)/Microsoft Visual Studio/2019/Community/VC/Tools/MSVC/14.29.30037/bin/Hostx64/x64/cl.exe - skipped</span><br><span class=\"line\">-- Detecting C compile features</span><br><span class=\"line\">-- Detecting C compile features - done</span><br><span class=\"line\">-- Detecting CXX compiler ABI info</span><br><span class=\"line\">-- Detecting CXX compiler ABI info - done</span><br><span class=\"line\">-- Check for working CXX compiler: C:/Program Files (x86)/Microsoft Visual Studio/2019/Community/VC/Tools/MSVC/14.29.30037/bin/Hostx64/x64/cl.exe - skipped</span><br><span class=\"line\">-- Detecting CXX compile features</span><br><span class=\"line\">-- Detecting CXX compile features - done</span><br><span class=\"line\">-- ##### Is the C++ compiler loaded? 1 #####</span><br><span class=\"line\">-- ##### The C++ compiler ID is: MSVC #####</span><br><span class=\"line\">-- ##### Is the C++ from GNU?  #####</span><br><span class=\"line\">-- ##### The C++ compiler version is: 19.29.30038.1 #####</span><br><span class=\"line\">-- ##### Is the C compiler loaded? 1 #####</span><br><span class=\"line\">-- ##### The C compiler ID is: MSVC #####</span><br><span class=\"line\">-- ##### Is the C++ from GNU?  #####</span><br><span class=\"line\">-- ##### The C compiler version is: 19.29.30038.1 #####</span><br><span class=\"line\">-- Configuring done</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"CMakeLists-txt文件\"><a href=\"#CMakeLists-txt文件\" class=\"headerlink\" title=\"CMakeLists.txt文件\"></a>CMakeLists.txt文件</h4><p>在CMakeLists.txt文件中通常如下指定，不用是注释掉，用的时候取消注释。</p>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#[[#FT</span></span><br><span class=\"line\"><span class=\"comment\">set(CMAKE_SYSTEM_NAME Linux)</span></span><br><span class=\"line\"><span class=\"comment\">set(CMAKE_C_COMPILER &quot;/bin/aarch64-linux-gnu-gcc&quot;)</span></span><br><span class=\"line\"><span class=\"comment\">set(CMAKE_CXX_COMPILER &quot;/bin/aarch64-linux-gnu-g++&quot;)]]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#[[#7045</span></span><br><span class=\"line\"><span class=\"comment\">set(CMAKE_SYSTEM_NAME Linux)</span></span><br><span class=\"line\"><span class=\"comment\">set(CMAKE_C_COMPILER &quot;/bin/arm-linux-gnueabihf-gcc&quot;)</span></span><br><span class=\"line\"><span class=\"comment\">set(CMAKE_CXX_COMPILER &quot;/bin/arm-linux-gnueabihf-g++&quot;)]]</span></span><br></pre></td></tr></table></figure>\n\n<p>例子1：CMakeLists.txt</p>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 注意，这个例子不包含任何目标，没有要构建的东西，我们只关注配置步骤:</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">cmake_minimum_required</span>(VERSION <span class=\"number\">3.5</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">project</span>(hello-world LANGUAGES C CXX)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">message</span>(STATUS <span class=\"string\">&quot;##### Is the C++ compiler loaded? $&#123;CMAKE_CXX_COMPILER_LOADED&#125;&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"variable\">$&#123;CMAKE_CXX_COMPILER_LOADED&#125;</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">message</span>(STATUS <span class=\"string\">&quot;##### The C++ compiler ID is: $&#123;CMAKE_CXX_COMPILER_ID&#125;&quot;</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">message</span>(STATUS <span class=\"string\">&quot;##### Is the C++ from GNU? $&#123;CMAKE_COMPILER_IS_GNUCXX&#125;&quot;</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">message</span>(STATUS <span class=\"string\">&quot;##### The C++ compiler version is: $&#123;CMAKE_CXX_COMPILER_VERSION&#125;&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">endif</span>()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">message</span>(STATUS <span class=\"string\">&quot;##### Is the C compiler loaded? $&#123;CMAKE_C_COMPILER_LOADED&#125;&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"variable\">$&#123;CMAKE_C_COMPILER_LOADED&#125;</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">message</span>(STATUS <span class=\"string\">&quot;##### The C compiler ID is: $&#123;CMAKE_C_COMPILER_ID&#125;&quot;</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">message</span>(STATUS <span class=\"string\">&quot;##### Is the C++ from GNU? $&#123;CMAKE_COMPILER_IS_GNUCC&#125;&quot;</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">message</span>(STATUS <span class=\"string\">&quot;##### The C compiler version is: $&#123;CMAKE_C_COMPILER_VERSION&#125;&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">endif</span>()</span><br></pre></td></tr></table></figure>\n\n<p>例子2：CMakeLists.txt</p>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">cmake_minimum_required</span>(VERSION <span class=\"number\">3.5</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">project</span>(hello-world LANGUAGES C CXX)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">option</span>(CMAKE_CXX_COMPILER clang++)</span><br><span class=\"line\"><span class=\"keyword\">message</span>(STATUS <span class=\"string\">&quot;##### 编译器：$&#123;CMAKE_CXX_COMPILER_ID&#125;&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">message</span>(STATUS <span class=\"string\">&quot;##### 编译器版本：$&#123;CMAKE_CXX_COMPILER_VERSION&#125;&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">option</span>(USE_LIBRARY <span class=\"keyword\">OFF</span>)</span><br><span class=\"line\"><span class=\"keyword\">message</span>(STATUS <span class=\"string\">&quot;##### USE_LIBRARY? $&#123;USE_LIBRARY&#125;&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">list</span>(APPEND _sources <span class=\"keyword\">Message</span>.h <span class=\"keyword\">Message</span>.cpp)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"variable\">$&#123;USE_LIBRARY&#125;</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">add_library</span>(<span class=\"keyword\">message</span> <span class=\"variable\">$&#123;_sources&#125;</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">add_executable</span>(hello-world hello-world.cpp)</span><br><span class=\"line\">\t<span class=\"keyword\">target_link_libraries</span>(hello-world <span class=\"keyword\">message</span>)</span><br><span class=\"line\"><span class=\"keyword\">else</span>()</span><br><span class=\"line\">\t<span class=\"keyword\">add_executable</span>(hello-world hello-world.cpp <span class=\"keyword\">message</span>)</span><br><span class=\"line\"><span class=\"keyword\">endif</span>()</span><br></pre></td></tr></table></figure>\n\n"},{"title":"6.检出历史提交","author":"连思鑫","date":"2023-03-01T14:53:00.000Z","_content":"## 检出历史提交\n\n\n## git checkout\n\n`git checkout` 这个命令有三个不同的作用：检出文件、检出提交和检出分支。在这一章中，我们只关心前两种用法。\n\n检出提交会使工作目录和这个提交完全匹配。你可以用它来查看项目之前的状态，而不改变当前的状态。检出文件使你能够查看某个特定文件的旧版本，而工作目录中剩下的文件不变。\n\n### 用法\n\n```\ngit checkout master\n```\n\n回到 master 分支。分支会在下一节中讲到，而现在，你只需要将它视为回到项目「当前」状态的一种方式。\n\n```\ngit checkout <commit> <file>\n```\n\n查看文件之前的版本。它将工作目录中的 `<file>` 文件变成 `<commit>` 中那个文件的拷贝，并将它加入缓存区。\n\n```\ngit checkout <commit>\n```\n\n更新工作目录中的所有文件，使得和某个特定提交中的文件一致。你可以将提交的哈希字串，或是标签作为 `<commit>` 参数。这会使你处在分离 HEAD 的状态。\n\n### 讨论\n\n版本控制系统背后的思想就是「安全」地储存项目的拷贝，这样你永远不用担心什么时候不可复原地破坏了你的代码库。当你建立了项目历史之后，`git checkout` 是一种便捷的方式，来将保存的快照「加载」到你的开发机器上去。\n\n检出之前的提交是一个只读操作。在查看旧版本的时候绝不会损坏你的仓库。你项目「当前」的状态在\t`master` 上不会变化。在开发的正常阶段，`HEAD` 一般指向 master 或是其他的本地分支，但当你检出之前提交的时候，`HEAD` 就不再指向一个分支了——它直接指向一个提交。这被称为「分离 `HEAD`」状态 ，可以用下图可视化：\n\n![Git Tutorial: Checking out a previous commit](https://www.atlassian.com/git/images/tutorials/getting-started/viewing-old-commits/01.svg)\n\n在另一方面，检出旧文件不影响你仓库的当前状态。你可以在新的快照中像其他文件一样重新提交旧版本。所以，在效果上，`git checkout` 的这个用法可以用来将单个文件回滚到旧版本 。\n\n![Git Training: Checking out a previous version of a file](https://www.atlassian.com/git/images/tutorials/getting-started/viewing-old-commits/02.svg)\n\n### 例子\n\n#### 查看之前的版本\n\n这个栗子假定你开始了一个疯狂的实验，但你不确定你是否想要保留它。为了帮助你决定，你想看一看你开始实验之前的项目状态。首先，你需要找到你想要看的那个版本的 ID。\n\n```\ngit log --oneline\n```\n\n假设你的项目历史看上去和下面一样：\n\n```\nb7119f2 继续做些丧心病狂的事\n872fa7e 做些丧心病狂的事\na1e8fb5 对 hello.py 做了一些修改\n435b61d 创建 hello.py\n9773e52 初始导入\n```\n\n你可以这样使用 `git checkout` 来查看「对 hello.py 做了一些修改」这个提交：\n\n```\ngit checkout a1e8fb5\n```\n\n这让你的工作目录和 `a1e8fb5` 提交所处的状态完全一致。你可以查看文件，编译项目，运行测试，甚至编辑文件而不需要考虑是否会影响项目的当前状态。你所做的一切 *都不会* 被保存到仓库中。为了继续开发，你需要回到你项目的「当前」状态：\n\n```\ngit checkout master\n```\n\n这里假定了你默认在 master 分支上开发，我们会在以后的分支模型中详细讨论。\n\n一旦你回到 master 分支之后，你可以使用 `git revert` 或 `git reset` 来回滚任何不想要的更改。\n\n#### 检出文件\n\n如果你只对某个文件感兴趣，你也可以用 `git checkout` 来获取它的一个旧版本。比如说，如果你只想从之前的提交中查看 `hello.py` 文件，你可以使用下面的命令：\n\n```\ngit checkout a1e8fb5 hello.py\n```\n\n记住，和检出提交不同，这里 *确实* 会影响你项目的当前状态。旧的文件版本会显示为「需要提交的更改」，允许你回滚到文件之前的版本。如果你不想保留旧的版本，你可以用下面的命令检出到最近的版本：\n\n```\ngit checkout HEAD hello.py\n```\n\n> 这篇教程来源于[**「git-recipes」**](https://github.com/geeeeeeeeek/git-recipes/)","source":"_posts/6-检出历史提交.md","raw":"title: 6.检出历史提交\nauthor: 连思鑫\ntags:\n  - git\ncategories:\n  - ..\n  - git\n  - ''\ndate: 2023-03-01 22:53:00\n---\n## 检出历史提交\n\n\n## git checkout\n\n`git checkout` 这个命令有三个不同的作用：检出文件、检出提交和检出分支。在这一章中，我们只关心前两种用法。\n\n检出提交会使工作目录和这个提交完全匹配。你可以用它来查看项目之前的状态，而不改变当前的状态。检出文件使你能够查看某个特定文件的旧版本，而工作目录中剩下的文件不变。\n\n### 用法\n\n```\ngit checkout master\n```\n\n回到 master 分支。分支会在下一节中讲到，而现在，你只需要将它视为回到项目「当前」状态的一种方式。\n\n```\ngit checkout <commit> <file>\n```\n\n查看文件之前的版本。它将工作目录中的 `<file>` 文件变成 `<commit>` 中那个文件的拷贝，并将它加入缓存区。\n\n```\ngit checkout <commit>\n```\n\n更新工作目录中的所有文件，使得和某个特定提交中的文件一致。你可以将提交的哈希字串，或是标签作为 `<commit>` 参数。这会使你处在分离 HEAD 的状态。\n\n### 讨论\n\n版本控制系统背后的思想就是「安全」地储存项目的拷贝，这样你永远不用担心什么时候不可复原地破坏了你的代码库。当你建立了项目历史之后，`git checkout` 是一种便捷的方式，来将保存的快照「加载」到你的开发机器上去。\n\n检出之前的提交是一个只读操作。在查看旧版本的时候绝不会损坏你的仓库。你项目「当前」的状态在\t`master` 上不会变化。在开发的正常阶段，`HEAD` 一般指向 master 或是其他的本地分支，但当你检出之前提交的时候，`HEAD` 就不再指向一个分支了——它直接指向一个提交。这被称为「分离 `HEAD`」状态 ，可以用下图可视化：\n\n![Git Tutorial: Checking out a previous commit](https://www.atlassian.com/git/images/tutorials/getting-started/viewing-old-commits/01.svg)\n\n在另一方面，检出旧文件不影响你仓库的当前状态。你可以在新的快照中像其他文件一样重新提交旧版本。所以，在效果上，`git checkout` 的这个用法可以用来将单个文件回滚到旧版本 。\n\n![Git Training: Checking out a previous version of a file](https://www.atlassian.com/git/images/tutorials/getting-started/viewing-old-commits/02.svg)\n\n### 例子\n\n#### 查看之前的版本\n\n这个栗子假定你开始了一个疯狂的实验，但你不确定你是否想要保留它。为了帮助你决定，你想看一看你开始实验之前的项目状态。首先，你需要找到你想要看的那个版本的 ID。\n\n```\ngit log --oneline\n```\n\n假设你的项目历史看上去和下面一样：\n\n```\nb7119f2 继续做些丧心病狂的事\n872fa7e 做些丧心病狂的事\na1e8fb5 对 hello.py 做了一些修改\n435b61d 创建 hello.py\n9773e52 初始导入\n```\n\n你可以这样使用 `git checkout` 来查看「对 hello.py 做了一些修改」这个提交：\n\n```\ngit checkout a1e8fb5\n```\n\n这让你的工作目录和 `a1e8fb5` 提交所处的状态完全一致。你可以查看文件，编译项目，运行测试，甚至编辑文件而不需要考虑是否会影响项目的当前状态。你所做的一切 *都不会* 被保存到仓库中。为了继续开发，你需要回到你项目的「当前」状态：\n\n```\ngit checkout master\n```\n\n这里假定了你默认在 master 分支上开发，我们会在以后的分支模型中详细讨论。\n\n一旦你回到 master 分支之后，你可以使用 `git revert` 或 `git reset` 来回滚任何不想要的更改。\n\n#### 检出文件\n\n如果你只对某个文件感兴趣，你也可以用 `git checkout` 来获取它的一个旧版本。比如说，如果你只想从之前的提交中查看 `hello.py` 文件，你可以使用下面的命令：\n\n```\ngit checkout a1e8fb5 hello.py\n```\n\n记住，和检出提交不同，这里 *确实* 会影响你项目的当前状态。旧的文件版本会显示为「需要提交的更改」，允许你回滚到文件之前的版本。如果你不想保留旧的版本，你可以用下面的命令检出到最近的版本：\n\n```\ngit checkout HEAD hello.py\n```\n\n> 这篇教程来源于[**「git-recipes」**](https://github.com/geeeeeeeeek/git-recipes/)","slug":"6-检出历史提交","published":1,"updated":"2023-03-01T14:54:58.687Z","_id":"clifr2v1q000x14uocsjt7ww5","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"检出历史提交\"><a href=\"#检出历史提交\" class=\"headerlink\" title=\"检出历史提交\"></a>检出历史提交</h2><h2 id=\"git-checkout\"><a href=\"#git-checkout\" class=\"headerlink\" title=\"git checkout\"></a>git checkout</h2><p><code>git checkout</code> 这个命令有三个不同的作用：检出文件、检出提交和检出分支。在这一章中，我们只关心前两种用法。</p>\n<p>检出提交会使工作目录和这个提交完全匹配。你可以用它来查看项目之前的状态，而不改变当前的状态。检出文件使你能够查看某个特定文件的旧版本，而工作目录中剩下的文件不变。</p>\n<h3 id=\"用法\"><a href=\"#用法\" class=\"headerlink\" title=\"用法\"></a>用法</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout master</span><br></pre></td></tr></table></figure>\n\n<p>回到 master 分支。分支会在下一节中讲到，而现在，你只需要将它视为回到项目「当前」状态的一种方式。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout &lt;commit&gt; &lt;file&gt;</span><br></pre></td></tr></table></figure>\n\n<p>查看文件之前的版本。它将工作目录中的 <code>&lt;file&gt;</code> 文件变成 <code>&lt;commit&gt;</code> 中那个文件的拷贝，并将它加入缓存区。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout &lt;commit&gt;</span><br></pre></td></tr></table></figure>\n\n<p>更新工作目录中的所有文件，使得和某个特定提交中的文件一致。你可以将提交的哈希字串，或是标签作为 <code>&lt;commit&gt;</code> 参数。这会使你处在分离 HEAD 的状态。</p>\n<h3 id=\"讨论\"><a href=\"#讨论\" class=\"headerlink\" title=\"讨论\"></a>讨论</h3><p>版本控制系统背后的思想就是「安全」地储存项目的拷贝，这样你永远不用担心什么时候不可复原地破坏了你的代码库。当你建立了项目历史之后，<code>git checkout</code> 是一种便捷的方式，来将保存的快照「加载」到你的开发机器上去。</p>\n<p>检出之前的提交是一个只读操作。在查看旧版本的时候绝不会损坏你的仓库。你项目「当前」的状态在    <code>master</code> 上不会变化。在开发的正常阶段，<code>HEAD</code> 一般指向 master 或是其他的本地分支，但当你检出之前提交的时候，<code>HEAD</code> 就不再指向一个分支了——它直接指向一个提交。这被称为「分离 <code>HEAD</code>」状态 ，可以用下图可视化：</p>\n<p><img src=\"https://www.atlassian.com/git/images/tutorials/getting-started/viewing-old-commits/01.svg\" alt=\"Git Tutorial: Checking out a previous commit\"></p>\n<p>在另一方面，检出旧文件不影响你仓库的当前状态。你可以在新的快照中像其他文件一样重新提交旧版本。所以，在效果上，<code>git checkout</code> 的这个用法可以用来将单个文件回滚到旧版本 。</p>\n<p><img src=\"https://www.atlassian.com/git/images/tutorials/getting-started/viewing-old-commits/02.svg\" alt=\"Git Training: Checking out a previous version of a file\"></p>\n<h3 id=\"例子\"><a href=\"#例子\" class=\"headerlink\" title=\"例子\"></a>例子</h3><h4 id=\"查看之前的版本\"><a href=\"#查看之前的版本\" class=\"headerlink\" title=\"查看之前的版本\"></a>查看之前的版本</h4><p>这个栗子假定你开始了一个疯狂的实验，但你不确定你是否想要保留它。为了帮助你决定，你想看一看你开始实验之前的项目状态。首先，你需要找到你想要看的那个版本的 ID。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git log --oneline</span><br></pre></td></tr></table></figure>\n\n<p>假设你的项目历史看上去和下面一样：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">b7119f2 继续做些丧心病狂的事</span><br><span class=\"line\">872fa7e 做些丧心病狂的事</span><br><span class=\"line\">a1e8fb5 对 hello.py 做了一些修改</span><br><span class=\"line\">435b61d 创建 hello.py</span><br><span class=\"line\">9773e52 初始导入</span><br></pre></td></tr></table></figure>\n\n<p>你可以这样使用 <code>git checkout</code> 来查看「对 hello.py 做了一些修改」这个提交：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout a1e8fb5</span><br></pre></td></tr></table></figure>\n\n<p>这让你的工作目录和 <code>a1e8fb5</code> 提交所处的状态完全一致。你可以查看文件，编译项目，运行测试，甚至编辑文件而不需要考虑是否会影响项目的当前状态。你所做的一切 <em>都不会</em> 被保存到仓库中。为了继续开发，你需要回到你项目的「当前」状态：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout master</span><br></pre></td></tr></table></figure>\n\n<p>这里假定了你默认在 master 分支上开发，我们会在以后的分支模型中详细讨论。</p>\n<p>一旦你回到 master 分支之后，你可以使用 <code>git revert</code> 或 <code>git reset</code> 来回滚任何不想要的更改。</p>\n<h4 id=\"检出文件\"><a href=\"#检出文件\" class=\"headerlink\" title=\"检出文件\"></a>检出文件</h4><p>如果你只对某个文件感兴趣，你也可以用 <code>git checkout</code> 来获取它的一个旧版本。比如说，如果你只想从之前的提交中查看 <code>hello.py</code> 文件，你可以使用下面的命令：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout a1e8fb5 hello.py</span><br></pre></td></tr></table></figure>\n\n<p>记住，和检出提交不同，这里 <em>确实</em> 会影响你项目的当前状态。旧的文件版本会显示为「需要提交的更改」，允许你回滚到文件之前的版本。如果你不想保留旧的版本，你可以用下面的命令检出到最近的版本：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout HEAD hello.py</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>这篇教程来源于<a href=\"https://github.com/geeeeeeeeek/git-recipes/\"><strong>「git-recipes」</strong></a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"检出历史提交\"><a href=\"#检出历史提交\" class=\"headerlink\" title=\"检出历史提交\"></a>检出历史提交</h2><h2 id=\"git-checkout\"><a href=\"#git-checkout\" class=\"headerlink\" title=\"git checkout\"></a>git checkout</h2><p><code>git checkout</code> 这个命令有三个不同的作用：检出文件、检出提交和检出分支。在这一章中，我们只关心前两种用法。</p>\n<p>检出提交会使工作目录和这个提交完全匹配。你可以用它来查看项目之前的状态，而不改变当前的状态。检出文件使你能够查看某个特定文件的旧版本，而工作目录中剩下的文件不变。</p>\n<h3 id=\"用法\"><a href=\"#用法\" class=\"headerlink\" title=\"用法\"></a>用法</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout master</span><br></pre></td></tr></table></figure>\n\n<p>回到 master 分支。分支会在下一节中讲到，而现在，你只需要将它视为回到项目「当前」状态的一种方式。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout &lt;commit&gt; &lt;file&gt;</span><br></pre></td></tr></table></figure>\n\n<p>查看文件之前的版本。它将工作目录中的 <code>&lt;file&gt;</code> 文件变成 <code>&lt;commit&gt;</code> 中那个文件的拷贝，并将它加入缓存区。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout &lt;commit&gt;</span><br></pre></td></tr></table></figure>\n\n<p>更新工作目录中的所有文件，使得和某个特定提交中的文件一致。你可以将提交的哈希字串，或是标签作为 <code>&lt;commit&gt;</code> 参数。这会使你处在分离 HEAD 的状态。</p>\n<h3 id=\"讨论\"><a href=\"#讨论\" class=\"headerlink\" title=\"讨论\"></a>讨论</h3><p>版本控制系统背后的思想就是「安全」地储存项目的拷贝，这样你永远不用担心什么时候不可复原地破坏了你的代码库。当你建立了项目历史之后，<code>git checkout</code> 是一种便捷的方式，来将保存的快照「加载」到你的开发机器上去。</p>\n<p>检出之前的提交是一个只读操作。在查看旧版本的时候绝不会损坏你的仓库。你项目「当前」的状态在    <code>master</code> 上不会变化。在开发的正常阶段，<code>HEAD</code> 一般指向 master 或是其他的本地分支，但当你检出之前提交的时候，<code>HEAD</code> 就不再指向一个分支了——它直接指向一个提交。这被称为「分离 <code>HEAD</code>」状态 ，可以用下图可视化：</p>\n<p><img src=\"https://www.atlassian.com/git/images/tutorials/getting-started/viewing-old-commits/01.svg\" alt=\"Git Tutorial: Checking out a previous commit\"></p>\n<p>在另一方面，检出旧文件不影响你仓库的当前状态。你可以在新的快照中像其他文件一样重新提交旧版本。所以，在效果上，<code>git checkout</code> 的这个用法可以用来将单个文件回滚到旧版本 。</p>\n<p><img src=\"https://www.atlassian.com/git/images/tutorials/getting-started/viewing-old-commits/02.svg\" alt=\"Git Training: Checking out a previous version of a file\"></p>\n<h3 id=\"例子\"><a href=\"#例子\" class=\"headerlink\" title=\"例子\"></a>例子</h3><h4 id=\"查看之前的版本\"><a href=\"#查看之前的版本\" class=\"headerlink\" title=\"查看之前的版本\"></a>查看之前的版本</h4><p>这个栗子假定你开始了一个疯狂的实验，但你不确定你是否想要保留它。为了帮助你决定，你想看一看你开始实验之前的项目状态。首先，你需要找到你想要看的那个版本的 ID。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git log --oneline</span><br></pre></td></tr></table></figure>\n\n<p>假设你的项目历史看上去和下面一样：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">b7119f2 继续做些丧心病狂的事</span><br><span class=\"line\">872fa7e 做些丧心病狂的事</span><br><span class=\"line\">a1e8fb5 对 hello.py 做了一些修改</span><br><span class=\"line\">435b61d 创建 hello.py</span><br><span class=\"line\">9773e52 初始导入</span><br></pre></td></tr></table></figure>\n\n<p>你可以这样使用 <code>git checkout</code> 来查看「对 hello.py 做了一些修改」这个提交：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout a1e8fb5</span><br></pre></td></tr></table></figure>\n\n<p>这让你的工作目录和 <code>a1e8fb5</code> 提交所处的状态完全一致。你可以查看文件，编译项目，运行测试，甚至编辑文件而不需要考虑是否会影响项目的当前状态。你所做的一切 <em>都不会</em> 被保存到仓库中。为了继续开发，你需要回到你项目的「当前」状态：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout master</span><br></pre></td></tr></table></figure>\n\n<p>这里假定了你默认在 master 分支上开发，我们会在以后的分支模型中详细讨论。</p>\n<p>一旦你回到 master 分支之后，你可以使用 <code>git revert</code> 或 <code>git reset</code> 来回滚任何不想要的更改。</p>\n<h4 id=\"检出文件\"><a href=\"#检出文件\" class=\"headerlink\" title=\"检出文件\"></a>检出文件</h4><p>如果你只对某个文件感兴趣，你也可以用 <code>git checkout</code> 来获取它的一个旧版本。比如说，如果你只想从之前的提交中查看 <code>hello.py</code> 文件，你可以使用下面的命令：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout a1e8fb5 hello.py</span><br></pre></td></tr></table></figure>\n\n<p>记住，和检出提交不同，这里 <em>确实</em> 会影响你项目的当前状态。旧的文件版本会显示为「需要提交的更改」，允许你回滚到文件之前的版本。如果你不想保留旧的版本，你可以用下面的命令检出到最近的版本：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout HEAD hello.py</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>这篇教程来源于<a href=\"https://github.com/geeeeeeeeek/git-recipes/\"><strong>「git-recipes」</strong></a></p>\n</blockquote>\n"},{"title":"7.切换构建类型","author":"连思鑫","date":"2023-03-02T11:21:00.000Z","_content":"### 7.切换构建类型\n\n#### 切换构建类型\n\n-----\n\n> CMake可以配置构建类型，例如：Debug、Release等。配置时，可以为Debug或Release构建设置相关的选项或属性，\n> 例如：编译器和链接器标志。控制生成构建系统使用的配置变量是CMAKE_BUILD_TYPE。该变量默认为空，CMake识别的值为:\n> Debug：           \t用于在没有优化的情况下，使用带有调试符号构建库或可执行文件。\n> Release：         \t用于构建的优化的库或可执行文件，不包含调试符号。\n> RelWithDebInfo：用于构建较少的优化库或可执行文件，包含调试符号。\n> MinSizeRel：      用于不增加目标代码大小的优化方式，来构建库或可执行文件。\n\n#### 具体实施\n\n------\n\n1. 首先，定义最低CMake版本、项目名称和支持的语言：\n\n``` cmake\ncmake_minimum_required(VERSION 3.5)\nproject(hello-world LANGUAGES CXX)\n```\n\n2. 然后，设置一个默认的构建类型(本例中是 Release )，并打印一条消息。要注意的是，该变量被设置为缓存变量，可以通过缓存进行编辑：\n\n``` cmake\nif (NOT CMAKE_BUILD_TYPE)\n\tset(CMAKE_BUILD_TYPE Release CACHE STRING \"Build type\" FORCE)\nendif()\nmessage(STATUS \"##### Build type is: ${CMAKE_BUILD_TYPE}\")\n```\n\n3. 打印出CMake设置的相应编译标志：\n\n``` cmake\nmessage(STATUS \"##### C flags, Debug: \t${CMAKE_C_FLAGES_DEBUG}\")\nmessage(STATUS \"##### C flags, Release: ${CMAKE_C_FLAGES_RELEASE}\")\nmessage(STATUS \"##### C flags, Release: ${CMAKE_C_FLAGS_RELWITHDEBINFO}\")\nmessage(STATUS \"##### C flags, minimal: ${CMAKE_C_FLAGS_MINISIZEREL}\")\nmessage(STATUS \"##### C++ flags, Debug:\t${CMAKE_CXX_FLAGS_DEBUG}\")\nmessage(STATUS \"##### C++ flags, Release:\t${CMAKE_CXX_FLAGS_RELEASE}\")\nmessage(STATUS \"##### C++ flags, Release:\t${CMAKE_CXX_FELWITHDEBINFO}\")\nmessage(STATUS \"##### C++ flags, Minimal:\t${CMAKE_CXX_FLAGS_MINISIZEREL}\")\n```\n\n4. 验证配置输出\n\n``` shell\n$ mkdir build\n$ cd build\n$ cmake ..\n\n-- The CXX compiler identification is GNU 10.2.0\n-- Detecting CXX compiler ABI info\n-- Detecting CXX compiler ABI info - done\n-- Check for working CXX compiler: /usr/bin/c++.exe - skipped\n-- Detecting CXX compile features\n-- Detecting CXX compile features - done\n-- ##### Build type is:                                        Release\n-- ##### C flags, Debug configuration:\n-- ##### C flags, Release configuration:\n-- ##### C flags, Release configuration with Debug info:\n-- ##### C flags, minimal Release configuration:\n-- ##### C++ flags, Debug configuration:                       -g\n-- ##### C++ flags, Release configuration:                     -O3 -DNDEBUG\n-- ##### C++ flags, Release configuration with Debug info:     -O2 -g -DNDEBUG\n-- ##### C++ flags, minimal Release configuration:             -Os -DNDEBUG\n-- Configuring done\n-- Generating done\n-- Build files have been written to: /d/Databases/Desktop/cmake/build\n\n# 构建\n$ cmake --build .\n\n[ 33%] Building CXX object CMakeFiles/hello-world.dir/hello-world.cpp.o\n[ 66%] Building CXX object CMakeFiles/hello-world.dir/Message.cpp.o\n[100%] Linking CXX executable hello-world.exe\n[100%] Built target hello-world\n\n$ ls\n\nCMakeCache.txt  CMakeFiles  Makefile  cmake_install.cmake  hello-world.exe\n```\n\n5. 切换构建类型\n\n``` shell\n$ cmake -D CMAKE_BUILD_TYPE=Debug ..\n\n-- The CXX compiler identification is GNU 10.2.0\n-- Detecting CXX compiler ABI info\n-- Detecting CXX compiler ABI info - done\n-- Check for working CXX compiler: /usr/bin/c++.exe - skipped\n-- Detecting CXX compile features\n-- Detecting CXX compile features - done\n-- ##### Build type is:                                        Debug\n-- ##### C flags, Debug configuration:\n-- ##### C flags, Release configuration:\n-- ##### C flags, Release configuration with Debug info:\n-- ##### C flags, minimal Release configuration:\n-- ##### C++ flags, Debug configuration:                       -g\n-- ##### C++ flags, Release configuration:                     -O3 -DNDEBUG\n-- ##### C++ flags, Release configuration with Debug info:     -O2 -g -DNDEBUG\n-- ##### C++ flags, minimal Release configuration:             -Os -DNDEBUG\n-- Configuring done\n-- Generating done\n-- Build files have been written to: /d/Databases/Desktop/cmake/build\n\n$ cmake --build .\n\n[ 33%] Building CXX object CMakeFiles/hello-world.dir/hello-world.cpp.o\n[ 66%] Building CXX object CMakeFiles/hello-world.dir/Message.cpp.o\n[100%] Linking CXX executable hello-world.exe\n[100%] Built target hello-world\n\n$ ls\n\nCMakeCache.txt  CMakeFiles  Makefile  cmake_install.cmake  hello-world.exe\n```\n\n6. 多参数构建\n\n``` shell\n# 同时构建 Release 和 静态库\n$ cmake -D CMAKE_BUILD_TYPE=Release -D USE_LIBRARY=ON ..\n\n-- The CXX compiler identification is GNU 10.2.0\n-- Detecting CXX compiler ABI info\n-- Detecting CXX compiler ABI info - done\n-- Check for working CXX compiler: /usr/bin/c++.exe - skipped\n-- Detecting CXX compile features\n-- Detecting CXX compile features - done\n-- ##### Build type is:                                        Release\n-- ##### C flags, Debug configuration:\n-- ##### C flags, Release configuration:\n-- ##### C flags, Release configuration with Debug info:\n-- ##### C flags, minimal Release configuration:\n-- ##### C++ flags, Debug configuration:                       -g\n-- ##### C++ flags, Release configuration:                     -O3 -DNDEBUG\n-- ##### C++ flags, Release configuration with Debug info:     -O2 -g -DNDEBUG\n-- ##### C++ flags, minimal Release configuration:             -Os -DNDEBUG\n-- Configuring done\n-- Generating done\n-- Build files have been written to: /d/Databases/Desktop/cmake/build\n\n$ cmake --build .\n\n[ 25%] Building CXX object CMakeFiles/message.dir/Message.cpp.o\n[ 50%] Linking CXX static library libmessage.a\n[ 50%] Built target message\n[ 75%] Building CXX object CMakeFiles/hello-world.dir/hello-world.cpp.o\n[100%] Linking CXX executable hello-world.exe\n[100%] Built target hello-world\n\n# 编译出 libmessage.a\n$ ls\n\nCMakeCache.txt  CMakeFiles  Makefile  cmake_install.cmake  hello-world.exe  libmessage.a\n```\n\n\n\n#### 工作原理\n\n----\n\n我们演示了如何设置默认构建类型，以及如何(从命令行)覆盖它。这样，就可以控制项目，是使用优化，还是关闭优化启用调试。\n\n我们还看到了不同配置使用了哪些标志，这主要取决于选择的编译器。\n\n需要在运行CMake时显式地打印标志，也可以仔细阅读运行`CMake --system-information`的输出，以了解当前平台、默认编译器和语言的默认组合是什么。\n\n#### 示例\n```cmake\ncmake_minimum_required(VERSION 3.5)\n\nproject(hello-cmake LANGUAGES CXX)\n\nif (NOT CMAKE_BUILD_TYPE)\n\tset(CMAKE_BUILD_TYPE Release CACHE STRING \"Build type\" FORCE)\nendif()\n\noption(USE_LIBRARY OFF)\n\nlist(APPEND _sources Message.h Message.cpp)\n\nmessage(STATUS \"##### Build type is:                                    ${CMAKE_BUILD_TYPE}\")\nmessage(STATUS \"##### C flags, Debug configuration:                     ${CMAKE_C_FLAGS_DEBUG}\")\nmessage(STATUS \"##### C flags, Release configuration:                   ${CMAKE_C_FLAGS_RELEASE}\")\nmessage(STATUS \"##### C flags, Release configuration with Debug info:   ${CMAKE_C_FLAGS_RELWITHDEBINFO}\")\nmessage(STATUS \"##### C flags, minimal Release configuration:           ${CMAKE_C_FLAGS_MINSIZEREL}\")\nmessage(STATUS \"##### C++ flags, Debug configuration:                   ${CMAKE_CXX_FLAGS_DEBUG}\")\nmessage(STATUS \"##### C++ flags, Release configuration:                 ${CMAKE_CXX_FLAGS_RELEASE}\")\nmessage(STATUS \"##### C++ flags, Release configuration with Debug info: ${CMAKE_CXX_FLAGS_RELWITHDEBINFO}\")\nmessage(STATUS \"##### C++ flags, minimal Release configuration:         ${CMAKE_CXX_FLAGS_MINSIZEREL}\")\n\nif (USE_LIBRARY)\n    add_library(message ${_sources})\n    add_executable(hello-world hello-world.cpp)\n    target_link_libraries(hello-world message)\nelse()\n    add_executable(hello-world hello-world.cpp ${_sources})\nendif()\n```","source":"_posts/7-切换构建类型.md","raw":"title: 7.切换构建类型\nauthor: 连思鑫\ntags:\n  - cmake\ncategories:\n  - ..\n  - cmake\n  - 第一章：从简单的可执行文件到库\ndate: 2023-03-02 19:21:00\n---\n### 7.切换构建类型\n\n#### 切换构建类型\n\n-----\n\n> CMake可以配置构建类型，例如：Debug、Release等。配置时，可以为Debug或Release构建设置相关的选项或属性，\n> 例如：编译器和链接器标志。控制生成构建系统使用的配置变量是CMAKE_BUILD_TYPE。该变量默认为空，CMake识别的值为:\n> Debug：           \t用于在没有优化的情况下，使用带有调试符号构建库或可执行文件。\n> Release：         \t用于构建的优化的库或可执行文件，不包含调试符号。\n> RelWithDebInfo：用于构建较少的优化库或可执行文件，包含调试符号。\n> MinSizeRel：      用于不增加目标代码大小的优化方式，来构建库或可执行文件。\n\n#### 具体实施\n\n------\n\n1. 首先，定义最低CMake版本、项目名称和支持的语言：\n\n``` cmake\ncmake_minimum_required(VERSION 3.5)\nproject(hello-world LANGUAGES CXX)\n```\n\n2. 然后，设置一个默认的构建类型(本例中是 Release )，并打印一条消息。要注意的是，该变量被设置为缓存变量，可以通过缓存进行编辑：\n\n``` cmake\nif (NOT CMAKE_BUILD_TYPE)\n\tset(CMAKE_BUILD_TYPE Release CACHE STRING \"Build type\" FORCE)\nendif()\nmessage(STATUS \"##### Build type is: ${CMAKE_BUILD_TYPE}\")\n```\n\n3. 打印出CMake设置的相应编译标志：\n\n``` cmake\nmessage(STATUS \"##### C flags, Debug: \t${CMAKE_C_FLAGES_DEBUG}\")\nmessage(STATUS \"##### C flags, Release: ${CMAKE_C_FLAGES_RELEASE}\")\nmessage(STATUS \"##### C flags, Release: ${CMAKE_C_FLAGS_RELWITHDEBINFO}\")\nmessage(STATUS \"##### C flags, minimal: ${CMAKE_C_FLAGS_MINISIZEREL}\")\nmessage(STATUS \"##### C++ flags, Debug:\t${CMAKE_CXX_FLAGS_DEBUG}\")\nmessage(STATUS \"##### C++ flags, Release:\t${CMAKE_CXX_FLAGS_RELEASE}\")\nmessage(STATUS \"##### C++ flags, Release:\t${CMAKE_CXX_FELWITHDEBINFO}\")\nmessage(STATUS \"##### C++ flags, Minimal:\t${CMAKE_CXX_FLAGS_MINISIZEREL}\")\n```\n\n4. 验证配置输出\n\n``` shell\n$ mkdir build\n$ cd build\n$ cmake ..\n\n-- The CXX compiler identification is GNU 10.2.0\n-- Detecting CXX compiler ABI info\n-- Detecting CXX compiler ABI info - done\n-- Check for working CXX compiler: /usr/bin/c++.exe - skipped\n-- Detecting CXX compile features\n-- Detecting CXX compile features - done\n-- ##### Build type is:                                        Release\n-- ##### C flags, Debug configuration:\n-- ##### C flags, Release configuration:\n-- ##### C flags, Release configuration with Debug info:\n-- ##### C flags, minimal Release configuration:\n-- ##### C++ flags, Debug configuration:                       -g\n-- ##### C++ flags, Release configuration:                     -O3 -DNDEBUG\n-- ##### C++ flags, Release configuration with Debug info:     -O2 -g -DNDEBUG\n-- ##### C++ flags, minimal Release configuration:             -Os -DNDEBUG\n-- Configuring done\n-- Generating done\n-- Build files have been written to: /d/Databases/Desktop/cmake/build\n\n# 构建\n$ cmake --build .\n\n[ 33%] Building CXX object CMakeFiles/hello-world.dir/hello-world.cpp.o\n[ 66%] Building CXX object CMakeFiles/hello-world.dir/Message.cpp.o\n[100%] Linking CXX executable hello-world.exe\n[100%] Built target hello-world\n\n$ ls\n\nCMakeCache.txt  CMakeFiles  Makefile  cmake_install.cmake  hello-world.exe\n```\n\n5. 切换构建类型\n\n``` shell\n$ cmake -D CMAKE_BUILD_TYPE=Debug ..\n\n-- The CXX compiler identification is GNU 10.2.0\n-- Detecting CXX compiler ABI info\n-- Detecting CXX compiler ABI info - done\n-- Check for working CXX compiler: /usr/bin/c++.exe - skipped\n-- Detecting CXX compile features\n-- Detecting CXX compile features - done\n-- ##### Build type is:                                        Debug\n-- ##### C flags, Debug configuration:\n-- ##### C flags, Release configuration:\n-- ##### C flags, Release configuration with Debug info:\n-- ##### C flags, minimal Release configuration:\n-- ##### C++ flags, Debug configuration:                       -g\n-- ##### C++ flags, Release configuration:                     -O3 -DNDEBUG\n-- ##### C++ flags, Release configuration with Debug info:     -O2 -g -DNDEBUG\n-- ##### C++ flags, minimal Release configuration:             -Os -DNDEBUG\n-- Configuring done\n-- Generating done\n-- Build files have been written to: /d/Databases/Desktop/cmake/build\n\n$ cmake --build .\n\n[ 33%] Building CXX object CMakeFiles/hello-world.dir/hello-world.cpp.o\n[ 66%] Building CXX object CMakeFiles/hello-world.dir/Message.cpp.o\n[100%] Linking CXX executable hello-world.exe\n[100%] Built target hello-world\n\n$ ls\n\nCMakeCache.txt  CMakeFiles  Makefile  cmake_install.cmake  hello-world.exe\n```\n\n6. 多参数构建\n\n``` shell\n# 同时构建 Release 和 静态库\n$ cmake -D CMAKE_BUILD_TYPE=Release -D USE_LIBRARY=ON ..\n\n-- The CXX compiler identification is GNU 10.2.0\n-- Detecting CXX compiler ABI info\n-- Detecting CXX compiler ABI info - done\n-- Check for working CXX compiler: /usr/bin/c++.exe - skipped\n-- Detecting CXX compile features\n-- Detecting CXX compile features - done\n-- ##### Build type is:                                        Release\n-- ##### C flags, Debug configuration:\n-- ##### C flags, Release configuration:\n-- ##### C flags, Release configuration with Debug info:\n-- ##### C flags, minimal Release configuration:\n-- ##### C++ flags, Debug configuration:                       -g\n-- ##### C++ flags, Release configuration:                     -O3 -DNDEBUG\n-- ##### C++ flags, Release configuration with Debug info:     -O2 -g -DNDEBUG\n-- ##### C++ flags, minimal Release configuration:             -Os -DNDEBUG\n-- Configuring done\n-- Generating done\n-- Build files have been written to: /d/Databases/Desktop/cmake/build\n\n$ cmake --build .\n\n[ 25%] Building CXX object CMakeFiles/message.dir/Message.cpp.o\n[ 50%] Linking CXX static library libmessage.a\n[ 50%] Built target message\n[ 75%] Building CXX object CMakeFiles/hello-world.dir/hello-world.cpp.o\n[100%] Linking CXX executable hello-world.exe\n[100%] Built target hello-world\n\n# 编译出 libmessage.a\n$ ls\n\nCMakeCache.txt  CMakeFiles  Makefile  cmake_install.cmake  hello-world.exe  libmessage.a\n```\n\n\n\n#### 工作原理\n\n----\n\n我们演示了如何设置默认构建类型，以及如何(从命令行)覆盖它。这样，就可以控制项目，是使用优化，还是关闭优化启用调试。\n\n我们还看到了不同配置使用了哪些标志，这主要取决于选择的编译器。\n\n需要在运行CMake时显式地打印标志，也可以仔细阅读运行`CMake --system-information`的输出，以了解当前平台、默认编译器和语言的默认组合是什么。\n\n#### 示例\n```cmake\ncmake_minimum_required(VERSION 3.5)\n\nproject(hello-cmake LANGUAGES CXX)\n\nif (NOT CMAKE_BUILD_TYPE)\n\tset(CMAKE_BUILD_TYPE Release CACHE STRING \"Build type\" FORCE)\nendif()\n\noption(USE_LIBRARY OFF)\n\nlist(APPEND _sources Message.h Message.cpp)\n\nmessage(STATUS \"##### Build type is:                                    ${CMAKE_BUILD_TYPE}\")\nmessage(STATUS \"##### C flags, Debug configuration:                     ${CMAKE_C_FLAGS_DEBUG}\")\nmessage(STATUS \"##### C flags, Release configuration:                   ${CMAKE_C_FLAGS_RELEASE}\")\nmessage(STATUS \"##### C flags, Release configuration with Debug info:   ${CMAKE_C_FLAGS_RELWITHDEBINFO}\")\nmessage(STATUS \"##### C flags, minimal Release configuration:           ${CMAKE_C_FLAGS_MINSIZEREL}\")\nmessage(STATUS \"##### C++ flags, Debug configuration:                   ${CMAKE_CXX_FLAGS_DEBUG}\")\nmessage(STATUS \"##### C++ flags, Release configuration:                 ${CMAKE_CXX_FLAGS_RELEASE}\")\nmessage(STATUS \"##### C++ flags, Release configuration with Debug info: ${CMAKE_CXX_FLAGS_RELWITHDEBINFO}\")\nmessage(STATUS \"##### C++ flags, minimal Release configuration:         ${CMAKE_CXX_FLAGS_MINSIZEREL}\")\n\nif (USE_LIBRARY)\n    add_library(message ${_sources})\n    add_executable(hello-world hello-world.cpp)\n    target_link_libraries(hello-world message)\nelse()\n    add_executable(hello-world hello-world.cpp ${_sources})\nendif()\n```","slug":"7-切换构建类型","published":1,"updated":"2023-03-02T11:23:12.066Z","_id":"clifr2v1r001014uo82eqdws5","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"7-切换构建类型\"><a href=\"#7-切换构建类型\" class=\"headerlink\" title=\"7.切换构建类型\"></a>7.切换构建类型</h3><h4 id=\"切换构建类型\"><a href=\"#切换构建类型\" class=\"headerlink\" title=\"切换构建类型\"></a>切换构建类型</h4><hr>\n<blockquote>\n<p>CMake可以配置构建类型，例如：Debug、Release等。配置时，可以为Debug或Release构建设置相关的选项或属性，<br>例如：编译器和链接器标志。控制生成构建系统使用的配置变量是CMAKE_BUILD_TYPE。该变量默认为空，CMake识别的值为:<br>Debug：               用于在没有优化的情况下，使用带有调试符号构建库或可执行文件。<br>Release：             用于构建的优化的库或可执行文件，不包含调试符号。<br>RelWithDebInfo：用于构建较少的优化库或可执行文件，包含调试符号。<br>MinSizeRel：      用于不增加目标代码大小的优化方式，来构建库或可执行文件。</p>\n</blockquote>\n<h4 id=\"具体实施\"><a href=\"#具体实施\" class=\"headerlink\" title=\"具体实施\"></a>具体实施</h4><hr>\n<ol>\n<li>首先，定义最低CMake版本、项目名称和支持的语言：</li>\n</ol>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">cmake_minimum_required</span>(VERSION <span class=\"number\">3.5</span>)</span><br><span class=\"line\"><span class=\"keyword\">project</span>(hello-world LANGUAGES CXX)</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>然后，设置一个默认的构建类型(本例中是 Release )，并打印一条消息。要注意的是，该变量被设置为缓存变量，可以通过缓存进行编辑：</li>\n</ol>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"keyword\">NOT</span> CMAKE_BUILD_TYPE)</span><br><span class=\"line\">\t<span class=\"keyword\">set</span>(CMAKE_BUILD_TYPE Release CACHE <span class=\"keyword\">STRING</span> <span class=\"string\">&quot;Build type&quot;</span> FORCE)</span><br><span class=\"line\"><span class=\"keyword\">endif</span>()</span><br><span class=\"line\"><span class=\"keyword\">message</span>(STATUS <span class=\"string\">&quot;##### Build type is: $&#123;CMAKE_BUILD_TYPE&#125;&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>打印出CMake设置的相应编译标志：</li>\n</ol>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">message</span>(STATUS <span class=\"string\">&quot;##### C flags, Debug: \t$&#123;CMAKE_C_FLAGES_DEBUG&#125;&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">message</span>(STATUS <span class=\"string\">&quot;##### C flags, Release: $&#123;CMAKE_C_FLAGES_RELEASE&#125;&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">message</span>(STATUS <span class=\"string\">&quot;##### C flags, Release: $&#123;CMAKE_C_FLAGS_RELWITHDEBINFO&#125;&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">message</span>(STATUS <span class=\"string\">&quot;##### C flags, minimal: $&#123;CMAKE_C_FLAGS_MINISIZEREL&#125;&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">message</span>(STATUS <span class=\"string\">&quot;##### C++ flags, Debug:\t$&#123;CMAKE_CXX_FLAGS_DEBUG&#125;&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">message</span>(STATUS <span class=\"string\">&quot;##### C++ flags, Release:\t$&#123;CMAKE_CXX_FLAGS_RELEASE&#125;&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">message</span>(STATUS <span class=\"string\">&quot;##### C++ flags, Release:\t$&#123;CMAKE_CXX_FELWITHDEBINFO&#125;&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">message</span>(STATUS <span class=\"string\">&quot;##### C++ flags, Minimal:\t$&#123;CMAKE_CXX_FLAGS_MINISIZEREL&#125;&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>验证配置输出</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\"><span class=\"built_in\">mkdir</span> build</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\"><span class=\"built_in\">cd</span> build</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">cmake ..</span></span><br><span class=\"line\"></span><br><span class=\"line\">-- The CXX compiler identification is GNU 10.2.0</span><br><span class=\"line\">-- Detecting CXX compiler ABI info</span><br><span class=\"line\">-- Detecting CXX compiler ABI info - done</span><br><span class=\"line\">-- Check for working CXX compiler: /usr/bin/c++.exe - skipped</span><br><span class=\"line\">-- Detecting CXX compile features</span><br><span class=\"line\">-- Detecting CXX compile features - done</span><br><span class=\"line\">-- ##### Build type is:                                        Release</span><br><span class=\"line\">-- ##### C flags, Debug configuration:</span><br><span class=\"line\">-- ##### C flags, Release configuration:</span><br><span class=\"line\">-- ##### C flags, Release configuration with Debug info:</span><br><span class=\"line\">-- ##### C flags, minimal Release configuration:</span><br><span class=\"line\">-- ##### C++ flags, Debug configuration:                       -g</span><br><span class=\"line\">-- ##### C++ flags, Release configuration:                     -O3 -DNDEBUG</span><br><span class=\"line\">-- ##### C++ flags, Release configuration with Debug info:     -O2 -g -DNDEBUG</span><br><span class=\"line\">-- ##### C++ flags, minimal Release configuration:             -Os -DNDEBUG</span><br><span class=\"line\">-- Configuring done</span><br><span class=\"line\">-- Generating done</span><br><span class=\"line\">-- Build files have been written to: /d/Databases/Desktop/cmake/build</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">构建</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">cmake --build .</span></span><br><span class=\"line\"></span><br><span class=\"line\">[ 33%] Building CXX object CMakeFiles/hello-world.dir/hello-world.cpp.o</span><br><span class=\"line\">[ 66%] Building CXX object CMakeFiles/hello-world.dir/Message.cpp.o</span><br><span class=\"line\"><span class=\"meta prompt_\">[100%</span><span class=\"language-bash\">] Linking CXX executable hello-world.exe</span></span><br><span class=\"line\"><span class=\"meta prompt_\">[100%</span><span class=\"language-bash\">] Built target hello-world</span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\"><span class=\"built_in\">ls</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">CMakeCache.txt  CMakeFiles  Makefile  cmake_install.cmake  hello-world.exe</span><br></pre></td></tr></table></figure>\n\n<ol start=\"5\">\n<li>切换构建类型</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">cmake -D CMAKE_BUILD_TYPE=Debug ..</span></span><br><span class=\"line\"></span><br><span class=\"line\">-- The CXX compiler identification is GNU 10.2.0</span><br><span class=\"line\">-- Detecting CXX compiler ABI info</span><br><span class=\"line\">-- Detecting CXX compiler ABI info - done</span><br><span class=\"line\">-- Check for working CXX compiler: /usr/bin/c++.exe - skipped</span><br><span class=\"line\">-- Detecting CXX compile features</span><br><span class=\"line\">-- Detecting CXX compile features - done</span><br><span class=\"line\">-- ##### Build type is:                                        Debug</span><br><span class=\"line\">-- ##### C flags, Debug configuration:</span><br><span class=\"line\">-- ##### C flags, Release configuration:</span><br><span class=\"line\">-- ##### C flags, Release configuration with Debug info:</span><br><span class=\"line\">-- ##### C flags, minimal Release configuration:</span><br><span class=\"line\">-- ##### C++ flags, Debug configuration:                       -g</span><br><span class=\"line\">-- ##### C++ flags, Release configuration:                     -O3 -DNDEBUG</span><br><span class=\"line\">-- ##### C++ flags, Release configuration with Debug info:     -O2 -g -DNDEBUG</span><br><span class=\"line\">-- ##### C++ flags, minimal Release configuration:             -Os -DNDEBUG</span><br><span class=\"line\">-- Configuring done</span><br><span class=\"line\">-- Generating done</span><br><span class=\"line\">-- Build files have been written to: /d/Databases/Desktop/cmake/build</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">cmake --build .</span></span><br><span class=\"line\"></span><br><span class=\"line\">[ 33%] Building CXX object CMakeFiles/hello-world.dir/hello-world.cpp.o</span><br><span class=\"line\">[ 66%] Building CXX object CMakeFiles/hello-world.dir/Message.cpp.o</span><br><span class=\"line\"><span class=\"meta prompt_\">[100%</span><span class=\"language-bash\">] Linking CXX executable hello-world.exe</span></span><br><span class=\"line\"><span class=\"meta prompt_\">[100%</span><span class=\"language-bash\">] Built target hello-world</span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\"><span class=\"built_in\">ls</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">CMakeCache.txt  CMakeFiles  Makefile  cmake_install.cmake  hello-world.exe</span><br></pre></td></tr></table></figure>\n\n<ol start=\"6\">\n<li>多参数构建</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">同时构建 Release 和 静态库</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">cmake -D CMAKE_BUILD_TYPE=Release -D USE_LIBRARY=ON ..</span></span><br><span class=\"line\"></span><br><span class=\"line\">-- The CXX compiler identification is GNU 10.2.0</span><br><span class=\"line\">-- Detecting CXX compiler ABI info</span><br><span class=\"line\">-- Detecting CXX compiler ABI info - done</span><br><span class=\"line\">-- Check for working CXX compiler: /usr/bin/c++.exe - skipped</span><br><span class=\"line\">-- Detecting CXX compile features</span><br><span class=\"line\">-- Detecting CXX compile features - done</span><br><span class=\"line\">-- ##### Build type is:                                        Release</span><br><span class=\"line\">-- ##### C flags, Debug configuration:</span><br><span class=\"line\">-- ##### C flags, Release configuration:</span><br><span class=\"line\">-- ##### C flags, Release configuration with Debug info:</span><br><span class=\"line\">-- ##### C flags, minimal Release configuration:</span><br><span class=\"line\">-- ##### C++ flags, Debug configuration:                       -g</span><br><span class=\"line\">-- ##### C++ flags, Release configuration:                     -O3 -DNDEBUG</span><br><span class=\"line\">-- ##### C++ flags, Release configuration with Debug info:     -O2 -g -DNDEBUG</span><br><span class=\"line\">-- ##### C++ flags, minimal Release configuration:             -Os -DNDEBUG</span><br><span class=\"line\">-- Configuring done</span><br><span class=\"line\">-- Generating done</span><br><span class=\"line\">-- Build files have been written to: /d/Databases/Desktop/cmake/build</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">cmake --build .</span></span><br><span class=\"line\"></span><br><span class=\"line\">[ 25%] Building CXX object CMakeFiles/message.dir/Message.cpp.o</span><br><span class=\"line\">[ 50%] Linking CXX static library libmessage.a</span><br><span class=\"line\">[ 50%] Built target message</span><br><span class=\"line\">[ 75%] Building CXX object CMakeFiles/hello-world.dir/hello-world.cpp.o</span><br><span class=\"line\"><span class=\"meta prompt_\">[100%</span><span class=\"language-bash\">] Linking CXX executable hello-world.exe</span></span><br><span class=\"line\"><span class=\"meta prompt_\">[100%</span><span class=\"language-bash\">] Built target hello-world</span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">编译出 libmessage.a</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\"><span class=\"built_in\">ls</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">CMakeCache.txt  CMakeFiles  Makefile  cmake_install.cmake  hello-world.exe  libmessage.a</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"工作原理\"><a href=\"#工作原理\" class=\"headerlink\" title=\"工作原理\"></a>工作原理</h4><hr>\n<p>我们演示了如何设置默认构建类型，以及如何(从命令行)覆盖它。这样，就可以控制项目，是使用优化，还是关闭优化启用调试。</p>\n<p>我们还看到了不同配置使用了哪些标志，这主要取决于选择的编译器。</p>\n<p>需要在运行CMake时显式地打印标志，也可以仔细阅读运行<code>CMake --system-information</code>的输出，以了解当前平台、默认编译器和语言的默认组合是什么。</p>\n<h4 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h4><figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">cmake_minimum_required</span>(VERSION <span class=\"number\">3.5</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">project</span>(hello-cmake LANGUAGES CXX)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"keyword\">NOT</span> CMAKE_BUILD_TYPE)</span><br><span class=\"line\">\t<span class=\"keyword\">set</span>(CMAKE_BUILD_TYPE Release CACHE <span class=\"keyword\">STRING</span> <span class=\"string\">&quot;Build type&quot;</span> FORCE)</span><br><span class=\"line\"><span class=\"keyword\">endif</span>()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">option</span>(USE_LIBRARY <span class=\"keyword\">OFF</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">list</span>(APPEND _sources <span class=\"keyword\">Message</span>.h <span class=\"keyword\">Message</span>.cpp)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">message</span>(STATUS <span class=\"string\">&quot;##### Build type is:                                    $&#123;CMAKE_BUILD_TYPE&#125;&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">message</span>(STATUS <span class=\"string\">&quot;##### C flags, Debug configuration:                     $&#123;CMAKE_C_FLAGS_DEBUG&#125;&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">message</span>(STATUS <span class=\"string\">&quot;##### C flags, Release configuration:                   $&#123;CMAKE_C_FLAGS_RELEASE&#125;&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">message</span>(STATUS <span class=\"string\">&quot;##### C flags, Release configuration with Debug info:   $&#123;CMAKE_C_FLAGS_RELWITHDEBINFO&#125;&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">message</span>(STATUS <span class=\"string\">&quot;##### C flags, minimal Release configuration:           $&#123;CMAKE_C_FLAGS_MINSIZEREL&#125;&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">message</span>(STATUS <span class=\"string\">&quot;##### C++ flags, Debug configuration:                   $&#123;CMAKE_CXX_FLAGS_DEBUG&#125;&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">message</span>(STATUS <span class=\"string\">&quot;##### C++ flags, Release configuration:                 $&#123;CMAKE_CXX_FLAGS_RELEASE&#125;&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">message</span>(STATUS <span class=\"string\">&quot;##### C++ flags, Release configuration with Debug info: $&#123;CMAKE_CXX_FLAGS_RELWITHDEBINFO&#125;&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">message</span>(STATUS <span class=\"string\">&quot;##### C++ flags, minimal Release configuration:         $&#123;CMAKE_CXX_FLAGS_MINSIZEREL&#125;&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (USE_LIBRARY)</span><br><span class=\"line\">    <span class=\"keyword\">add_library</span>(<span class=\"keyword\">message</span> <span class=\"variable\">$&#123;_sources&#125;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">add_executable</span>(hello-world hello-world.cpp)</span><br><span class=\"line\">    <span class=\"keyword\">target_link_libraries</span>(hello-world <span class=\"keyword\">message</span>)</span><br><span class=\"line\"><span class=\"keyword\">else</span>()</span><br><span class=\"line\">    <span class=\"keyword\">add_executable</span>(hello-world hello-world.cpp <span class=\"variable\">$&#123;_sources&#125;</span>)</span><br><span class=\"line\"><span class=\"keyword\">endif</span>()</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"7-切换构建类型\"><a href=\"#7-切换构建类型\" class=\"headerlink\" title=\"7.切换构建类型\"></a>7.切换构建类型</h3><h4 id=\"切换构建类型\"><a href=\"#切换构建类型\" class=\"headerlink\" title=\"切换构建类型\"></a>切换构建类型</h4><hr>\n<blockquote>\n<p>CMake可以配置构建类型，例如：Debug、Release等。配置时，可以为Debug或Release构建设置相关的选项或属性，<br>例如：编译器和链接器标志。控制生成构建系统使用的配置变量是CMAKE_BUILD_TYPE。该变量默认为空，CMake识别的值为:<br>Debug：               用于在没有优化的情况下，使用带有调试符号构建库或可执行文件。<br>Release：             用于构建的优化的库或可执行文件，不包含调试符号。<br>RelWithDebInfo：用于构建较少的优化库或可执行文件，包含调试符号。<br>MinSizeRel：      用于不增加目标代码大小的优化方式，来构建库或可执行文件。</p>\n</blockquote>\n<h4 id=\"具体实施\"><a href=\"#具体实施\" class=\"headerlink\" title=\"具体实施\"></a>具体实施</h4><hr>\n<ol>\n<li>首先，定义最低CMake版本、项目名称和支持的语言：</li>\n</ol>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">cmake_minimum_required</span>(VERSION <span class=\"number\">3.5</span>)</span><br><span class=\"line\"><span class=\"keyword\">project</span>(hello-world LANGUAGES CXX)</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>然后，设置一个默认的构建类型(本例中是 Release )，并打印一条消息。要注意的是，该变量被设置为缓存变量，可以通过缓存进行编辑：</li>\n</ol>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"keyword\">NOT</span> CMAKE_BUILD_TYPE)</span><br><span class=\"line\">\t<span class=\"keyword\">set</span>(CMAKE_BUILD_TYPE Release CACHE <span class=\"keyword\">STRING</span> <span class=\"string\">&quot;Build type&quot;</span> FORCE)</span><br><span class=\"line\"><span class=\"keyword\">endif</span>()</span><br><span class=\"line\"><span class=\"keyword\">message</span>(STATUS <span class=\"string\">&quot;##### Build type is: $&#123;CMAKE_BUILD_TYPE&#125;&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>打印出CMake设置的相应编译标志：</li>\n</ol>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">message</span>(STATUS <span class=\"string\">&quot;##### C flags, Debug: \t$&#123;CMAKE_C_FLAGES_DEBUG&#125;&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">message</span>(STATUS <span class=\"string\">&quot;##### C flags, Release: $&#123;CMAKE_C_FLAGES_RELEASE&#125;&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">message</span>(STATUS <span class=\"string\">&quot;##### C flags, Release: $&#123;CMAKE_C_FLAGS_RELWITHDEBINFO&#125;&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">message</span>(STATUS <span class=\"string\">&quot;##### C flags, minimal: $&#123;CMAKE_C_FLAGS_MINISIZEREL&#125;&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">message</span>(STATUS <span class=\"string\">&quot;##### C++ flags, Debug:\t$&#123;CMAKE_CXX_FLAGS_DEBUG&#125;&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">message</span>(STATUS <span class=\"string\">&quot;##### C++ flags, Release:\t$&#123;CMAKE_CXX_FLAGS_RELEASE&#125;&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">message</span>(STATUS <span class=\"string\">&quot;##### C++ flags, Release:\t$&#123;CMAKE_CXX_FELWITHDEBINFO&#125;&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">message</span>(STATUS <span class=\"string\">&quot;##### C++ flags, Minimal:\t$&#123;CMAKE_CXX_FLAGS_MINISIZEREL&#125;&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>验证配置输出</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\"><span class=\"built_in\">mkdir</span> build</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\"><span class=\"built_in\">cd</span> build</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">cmake ..</span></span><br><span class=\"line\"></span><br><span class=\"line\">-- The CXX compiler identification is GNU 10.2.0</span><br><span class=\"line\">-- Detecting CXX compiler ABI info</span><br><span class=\"line\">-- Detecting CXX compiler ABI info - done</span><br><span class=\"line\">-- Check for working CXX compiler: /usr/bin/c++.exe - skipped</span><br><span class=\"line\">-- Detecting CXX compile features</span><br><span class=\"line\">-- Detecting CXX compile features - done</span><br><span class=\"line\">-- ##### Build type is:                                        Release</span><br><span class=\"line\">-- ##### C flags, Debug configuration:</span><br><span class=\"line\">-- ##### C flags, Release configuration:</span><br><span class=\"line\">-- ##### C flags, Release configuration with Debug info:</span><br><span class=\"line\">-- ##### C flags, minimal Release configuration:</span><br><span class=\"line\">-- ##### C++ flags, Debug configuration:                       -g</span><br><span class=\"line\">-- ##### C++ flags, Release configuration:                     -O3 -DNDEBUG</span><br><span class=\"line\">-- ##### C++ flags, Release configuration with Debug info:     -O2 -g -DNDEBUG</span><br><span class=\"line\">-- ##### C++ flags, minimal Release configuration:             -Os -DNDEBUG</span><br><span class=\"line\">-- Configuring done</span><br><span class=\"line\">-- Generating done</span><br><span class=\"line\">-- Build files have been written to: /d/Databases/Desktop/cmake/build</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">构建</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">cmake --build .</span></span><br><span class=\"line\"></span><br><span class=\"line\">[ 33%] Building CXX object CMakeFiles/hello-world.dir/hello-world.cpp.o</span><br><span class=\"line\">[ 66%] Building CXX object CMakeFiles/hello-world.dir/Message.cpp.o</span><br><span class=\"line\"><span class=\"meta prompt_\">[100%</span><span class=\"language-bash\">] Linking CXX executable hello-world.exe</span></span><br><span class=\"line\"><span class=\"meta prompt_\">[100%</span><span class=\"language-bash\">] Built target hello-world</span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\"><span class=\"built_in\">ls</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">CMakeCache.txt  CMakeFiles  Makefile  cmake_install.cmake  hello-world.exe</span><br></pre></td></tr></table></figure>\n\n<ol start=\"5\">\n<li>切换构建类型</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">cmake -D CMAKE_BUILD_TYPE=Debug ..</span></span><br><span class=\"line\"></span><br><span class=\"line\">-- The CXX compiler identification is GNU 10.2.0</span><br><span class=\"line\">-- Detecting CXX compiler ABI info</span><br><span class=\"line\">-- Detecting CXX compiler ABI info - done</span><br><span class=\"line\">-- Check for working CXX compiler: /usr/bin/c++.exe - skipped</span><br><span class=\"line\">-- Detecting CXX compile features</span><br><span class=\"line\">-- Detecting CXX compile features - done</span><br><span class=\"line\">-- ##### Build type is:                                        Debug</span><br><span class=\"line\">-- ##### C flags, Debug configuration:</span><br><span class=\"line\">-- ##### C flags, Release configuration:</span><br><span class=\"line\">-- ##### C flags, Release configuration with Debug info:</span><br><span class=\"line\">-- ##### C flags, minimal Release configuration:</span><br><span class=\"line\">-- ##### C++ flags, Debug configuration:                       -g</span><br><span class=\"line\">-- ##### C++ flags, Release configuration:                     -O3 -DNDEBUG</span><br><span class=\"line\">-- ##### C++ flags, Release configuration with Debug info:     -O2 -g -DNDEBUG</span><br><span class=\"line\">-- ##### C++ flags, minimal Release configuration:             -Os -DNDEBUG</span><br><span class=\"line\">-- Configuring done</span><br><span class=\"line\">-- Generating done</span><br><span class=\"line\">-- Build files have been written to: /d/Databases/Desktop/cmake/build</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">cmake --build .</span></span><br><span class=\"line\"></span><br><span class=\"line\">[ 33%] Building CXX object CMakeFiles/hello-world.dir/hello-world.cpp.o</span><br><span class=\"line\">[ 66%] Building CXX object CMakeFiles/hello-world.dir/Message.cpp.o</span><br><span class=\"line\"><span class=\"meta prompt_\">[100%</span><span class=\"language-bash\">] Linking CXX executable hello-world.exe</span></span><br><span class=\"line\"><span class=\"meta prompt_\">[100%</span><span class=\"language-bash\">] Built target hello-world</span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\"><span class=\"built_in\">ls</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">CMakeCache.txt  CMakeFiles  Makefile  cmake_install.cmake  hello-world.exe</span><br></pre></td></tr></table></figure>\n\n<ol start=\"6\">\n<li>多参数构建</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">同时构建 Release 和 静态库</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">cmake -D CMAKE_BUILD_TYPE=Release -D USE_LIBRARY=ON ..</span></span><br><span class=\"line\"></span><br><span class=\"line\">-- The CXX compiler identification is GNU 10.2.0</span><br><span class=\"line\">-- Detecting CXX compiler ABI info</span><br><span class=\"line\">-- Detecting CXX compiler ABI info - done</span><br><span class=\"line\">-- Check for working CXX compiler: /usr/bin/c++.exe - skipped</span><br><span class=\"line\">-- Detecting CXX compile features</span><br><span class=\"line\">-- Detecting CXX compile features - done</span><br><span class=\"line\">-- ##### Build type is:                                        Release</span><br><span class=\"line\">-- ##### C flags, Debug configuration:</span><br><span class=\"line\">-- ##### C flags, Release configuration:</span><br><span class=\"line\">-- ##### C flags, Release configuration with Debug info:</span><br><span class=\"line\">-- ##### C flags, minimal Release configuration:</span><br><span class=\"line\">-- ##### C++ flags, Debug configuration:                       -g</span><br><span class=\"line\">-- ##### C++ flags, Release configuration:                     -O3 -DNDEBUG</span><br><span class=\"line\">-- ##### C++ flags, Release configuration with Debug info:     -O2 -g -DNDEBUG</span><br><span class=\"line\">-- ##### C++ flags, minimal Release configuration:             -Os -DNDEBUG</span><br><span class=\"line\">-- Configuring done</span><br><span class=\"line\">-- Generating done</span><br><span class=\"line\">-- Build files have been written to: /d/Databases/Desktop/cmake/build</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">cmake --build .</span></span><br><span class=\"line\"></span><br><span class=\"line\">[ 25%] Building CXX object CMakeFiles/message.dir/Message.cpp.o</span><br><span class=\"line\">[ 50%] Linking CXX static library libmessage.a</span><br><span class=\"line\">[ 50%] Built target message</span><br><span class=\"line\">[ 75%] Building CXX object CMakeFiles/hello-world.dir/hello-world.cpp.o</span><br><span class=\"line\"><span class=\"meta prompt_\">[100%</span><span class=\"language-bash\">] Linking CXX executable hello-world.exe</span></span><br><span class=\"line\"><span class=\"meta prompt_\">[100%</span><span class=\"language-bash\">] Built target hello-world</span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">编译出 libmessage.a</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\"><span class=\"built_in\">ls</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">CMakeCache.txt  CMakeFiles  Makefile  cmake_install.cmake  hello-world.exe  libmessage.a</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"工作原理\"><a href=\"#工作原理\" class=\"headerlink\" title=\"工作原理\"></a>工作原理</h4><hr>\n<p>我们演示了如何设置默认构建类型，以及如何(从命令行)覆盖它。这样，就可以控制项目，是使用优化，还是关闭优化启用调试。</p>\n<p>我们还看到了不同配置使用了哪些标志，这主要取决于选择的编译器。</p>\n<p>需要在运行CMake时显式地打印标志，也可以仔细阅读运行<code>CMake --system-information</code>的输出，以了解当前平台、默认编译器和语言的默认组合是什么。</p>\n<h4 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h4><figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">cmake_minimum_required</span>(VERSION <span class=\"number\">3.5</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">project</span>(hello-cmake LANGUAGES CXX)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"keyword\">NOT</span> CMAKE_BUILD_TYPE)</span><br><span class=\"line\">\t<span class=\"keyword\">set</span>(CMAKE_BUILD_TYPE Release CACHE <span class=\"keyword\">STRING</span> <span class=\"string\">&quot;Build type&quot;</span> FORCE)</span><br><span class=\"line\"><span class=\"keyword\">endif</span>()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">option</span>(USE_LIBRARY <span class=\"keyword\">OFF</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">list</span>(APPEND _sources <span class=\"keyword\">Message</span>.h <span class=\"keyword\">Message</span>.cpp)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">message</span>(STATUS <span class=\"string\">&quot;##### Build type is:                                    $&#123;CMAKE_BUILD_TYPE&#125;&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">message</span>(STATUS <span class=\"string\">&quot;##### C flags, Debug configuration:                     $&#123;CMAKE_C_FLAGS_DEBUG&#125;&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">message</span>(STATUS <span class=\"string\">&quot;##### C flags, Release configuration:                   $&#123;CMAKE_C_FLAGS_RELEASE&#125;&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">message</span>(STATUS <span class=\"string\">&quot;##### C flags, Release configuration with Debug info:   $&#123;CMAKE_C_FLAGS_RELWITHDEBINFO&#125;&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">message</span>(STATUS <span class=\"string\">&quot;##### C flags, minimal Release configuration:           $&#123;CMAKE_C_FLAGS_MINSIZEREL&#125;&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">message</span>(STATUS <span class=\"string\">&quot;##### C++ flags, Debug configuration:                   $&#123;CMAKE_CXX_FLAGS_DEBUG&#125;&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">message</span>(STATUS <span class=\"string\">&quot;##### C++ flags, Release configuration:                 $&#123;CMAKE_CXX_FLAGS_RELEASE&#125;&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">message</span>(STATUS <span class=\"string\">&quot;##### C++ flags, Release configuration with Debug info: $&#123;CMAKE_CXX_FLAGS_RELWITHDEBINFO&#125;&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">message</span>(STATUS <span class=\"string\">&quot;##### C++ flags, minimal Release configuration:         $&#123;CMAKE_CXX_FLAGS_MINSIZEREL&#125;&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (USE_LIBRARY)</span><br><span class=\"line\">    <span class=\"keyword\">add_library</span>(<span class=\"keyword\">message</span> <span class=\"variable\">$&#123;_sources&#125;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">add_executable</span>(hello-world hello-world.cpp)</span><br><span class=\"line\">    <span class=\"keyword\">target_link_libraries</span>(hello-world <span class=\"keyword\">message</span>)</span><br><span class=\"line\"><span class=\"keyword\">else</span>()</span><br><span class=\"line\">    <span class=\"keyword\">add_executable</span>(hello-world hello-world.cpp <span class=\"variable\">$&#123;_sources&#125;</span>)</span><br><span class=\"line\"><span class=\"keyword\">endif</span>()</span><br></pre></td></tr></table></figure>"},{"title":"7.回滚错误的修改","author":"连思鑫","date":"2023-03-01T14:55:00.000Z","_content":"## 回滚错误的修改\n\n\n这章教程提供了和项目旧版本打交道所需要的所有技巧。首先，你会知道如何浏览旧的提交，然后了解回滚项目历史中的公有提交和回滚本地机器上的私有更改之间的区别。\n\n## git checkout\n\n见上一章[「6.检出历史提交」](https://jinbilianshao.github.io/wikicode/wiki/6-%E6%A3%80%E5%87%BA%E5%8E%86%E5%8F%B2%E6%8F%90%E4%BA%A4/)。\n\n## git revert\n\n`git revert` 命令用来撤销一个已经提交的快照。但是，它是通过搞清楚如何撤销这个提交引入的更改，然后在最后加上一个撤销了更改的 *新* 提交，而不是从项目历史中移除这个提交。这避免了Git丢失项目历史，这一点对于你的版本历史和协作的可靠性来说是很重要的。\n\n![Git Tutorial: git revert](https://wac-cdn.atlassian.com/dam/jcr:b6fcf82b-5b15-4569-8f4f-a76454f9ca5b/03%20(7)\n\n\n### 用法\n\n```\ngit revert <commit>\n```\n\n生成一个撤消了 `<commit>` 引入的修改的新提交，然后应用到当前分支。\n\n### 讨论\n\n撤销（revert）应该用在你想要在项目历史中移除一整个提交的时候。比如说，你在追踪一个 bug，然后你发现它是由一个提交造成的，这时候撤销就很有用。与其说自己去修复它，然后提交一个新的快照，不如用 `git revert`，它帮你做了所有的事情。\n\n#### 撤销（revert）和重设（reset）对比\n\n理解这一点很重要。`git revert` 回滚了「单独一个提交」，它没有移除后面的提交，然后回到项目之前的状态。在 Git 中，后者实际上被称为 `reset`，而不是 `revert`。\n\n![Git Tutorial: Revert vs Reset](https://wac-cdn.atlassian.com/dam/jcr:a6a50d78-48e3-4765-8492-9e48dec8fd2f/04%20(2).svg)\n\n撤销和重设相比有两个重要的优点。首先，它不会改变项目历史，对那些已经发布到共享仓库的提交来说这是一个安全的操作。至于为什么改变共享的历史是危险\b的，请参阅 `git reset` 一节。\n\n其次，`git revert` 可以针对历史中任何一个提交，而 `git reset` 只能从当前提交向前回溯。比如，你想用 `git reset` 重设一个旧的提交，你不得不移除那个提交后的所有提交，再移除那个提交，然后重新提交后面的所有提交。不用说，这并不是一个优雅的回滚方案。\n\n\n## git reset\n\n如果说 `git revert` 是一个撤销更改安全的方式，你可以将 `git reset` 看做一个 *危险* 的方式。当你用 `git reset` 来重设更改时(提交不再被任何引用或引用日志所引用)，我们无法获得原来的样子——这个撤销是永远的。使用这个工具的时候务必要小心，因为这是少数几个可能会造成工作丢失的命令之一。\n\n和 `git checkout` 一样，`git reset` 有很多种用法。它可以被用来移除提交快照，尽管它通常被用来撤销缓存区和工作目录的修改。不管是哪种情况，它应该只被用于 *本地* 修改——你永远不应该重设和其他开发者共享的快照。\n\n### 用法\n\n```\ngit reset <file>\n```\n\n从缓存区移除特定文件，但不改变工作目录。它会取消这个文件的缓存，而不覆盖任何更改。\n\n```\ngit reset\n```\n\n重设缓冲区，匹配最近的一次提交，但工作目录不变。它会取消 *所有* 文件的缓存，而不会覆盖任何修改，给你了一个重设缓存快照的机会。\n\n```\ngit reset --hard\n```\n\n重设缓冲区和工作目录，匹配最近的一次提交。除了取消缓存之外，`--hard` 标记告诉 Git 还要重写所有工作目录中的更改。换句话说：它清除了所有未提交的更改，所以在使用前确定你想扔掉你所有本地的开发。\n\n```\ngit reset <commit>\n```\n\n将当前分支的末端移到 `<commit>`，将缓存区重设到这个提交，但不改变工作目录。所有 `<commit>` 之后的更改会保留在工作目录中，这允许你用更干净、原子性的快照重新提交项目历史。\n\n```\ngit reset --hard <commit>\n```\n\n将当前分支的末端移到 `<commit>`，将缓存区和工作目录都重设到这个提交。它不仅清除了未提交的更改，同时还清除了 `<commit>` 之后的所有提交。\n\n### 讨论\n\n上面所有的调用都是用来移除仓库中的修改。没有 `--hard` 标记时 `git reset` 通过取消缓存或取消一系列的提交，然后重新构建提交来清理仓库。而加上 `--hard` 标记对于作了大死之后想要重头再来尤其方便。\n\n撤销(revert)被设计为撤销 *公开* 的提交的安全方式，`git reset`被设计为重设 *本地* 更改。因为两个命令的目的不同，它们的实现也不一样：重设完全地移除了一堆更改，而撤销保留了原来的更改，用一个新的提交来实现撤销。\n\n![Git Tutorial: Revert vs Reset](https://www.atlassian.com/git/images/tutorials/getting-started/undoing-changes/06.svg)\n\n#### 不要重设公共历史\n\n当有 `<commit>` 之后的提交被推送到公共仓库后，你绝不应该使用 `git reset`。发布一个提交之后，你必须假设其他开发者会依赖于它。\n\n移除一个其他团队成员在上面继续开发的提交在协作时会引发严重的问题。当他们试着和你的仓库同步时，他们会发现项目历史的一部分突然消失了。下面的序列展示了如果你尝试重设公共提交时会发生什么。`origin/master` 是你本地 `master` 分支对应的中央仓库中的分支。\n\n![Git Tutorial: Resetting an Public Commit](https://wac-cdn.atlassian.com/dam/jcr:b616f03d-5257-4ea8-a6eb-db1a0207a78a/07%20(1).svg)\n\n一旦你在重设之后又增加了新的提交，Git 会认为你的本地历史已经和 `origin/master` 分叉了，同步你的仓库时的合并提交（merge commit）会使你的同事困惑。\n\n重点是，确保你只对本地的修改使用 `git reset`，而不是公共更改。如果你需要修复一个公共提交，`git revert` 命令正是被设计来做这个的。\n\n### 例子\n\n#### 取消文件缓存\n\n`git reset` 命令在准备缓存快照时经常被用到。下面的例子假设你有两个文件，`hello.py` 和 `main.py`它们已经被加入了仓库中。\n\n```\n# 编辑了hello.py和main.py\n\n# 缓存了目录下所有文件\ngit add .\n\n# 意识到hello.py和main.py中的修改\n# 应该在不同的快照中提交\n\n# 取消main.py缓存\ngit reset main.py\n\n# 只提交hello.py\ngit commit -m \"Make some changes to hello.py\"\n\n# 在另一份快照中提交main.py\ngit add main.py\ngit commit -m \"Edit main.py\"\n```\n\n如你所见，`git reset` 帮助你取消和这次提交无关的修改，让提交能够专注于某一特定的范围。\n\n#### 移除本地修改\n\n下面的这个栗子显示了一个更高端的用法。它展示了你作了大死之后应该如何扔掉那几个更新。\n\n```\n# 创建一个叫`foo.py`的新文件，增加代码\n\n# 提交到项目历史\ngit add foo.py\ngit commit -m \"Start developing a crazy feature\"\n\n# 再次编辑`foo.py`，修改其他文件\n\n# 提交另一份快照\ngit commit -a -m \"Continue my crazy feature\"\n\n# 决定废弃这个功能，并删除相关的更改\ngit reset --hard HEAD~2\n```\n\n`git reset HEAD~2` 命令将当前分支向前倒退两个提交，相当于在项目历史中移除刚创建的这两个提交。记住，这种重设只能用在 *非公开* 的提交中。绝不要在将提交推送到共享仓库之后执行上面的操作。\n\n## git clean\n\n`git clean` 命令将未跟踪的文件从你的工作目录中移除。它只是提供了一条捷径，因为用 `git status` 查看哪些文件还未跟踪然后手动移除它们也很方便。和一般的 `rm` 命令一样，`git clean` 是无法撤消的，所以在删除未跟踪的文件之前想清楚，你是否真的要这么做。\n\n`git clean` 命令经常和 `git reset --hard` 一起使用。记住，reset 只影响被跟踪的文件，所以还需要一个单独的命令来清理未被跟踪的文件。这个两个命令相结合，你就可以将工作目录回到之前特定提交时的状态。\n\n### 用法\n\n```\ngit clean -n\n```\n\n执行一次git clean的『演习』。它会告诉你那些文件在命令执行后会被移除，而不是真的删除它。\n\n```\ngit clean -f\n```\n\n移除当前目录下未被跟踪的文件。`-f`（强制）标记是必需的，除非 `clean.requireForce` 配置项被设为了 `false`（默认为 `true`）。它 *不会* 删除 `.gitignore` 中指定的未跟踪的文件。\n\n```\ngit clean -f <path>\n```\n\n移除未跟踪的文件，但限制在某个路径下。\n\n```\ngit clean -df\n```\n\n移除未跟踪的文件，以及目录。\n\n```\ngit clean -xf\n```\n\n移除当前目录下未跟踪的文件，以及 Git 一般忽略的文件。\n\n### 讨论\n\n如果你在本地仓库中作死之后想要毁尸灭迹，`git reset --hard` 和 `git clean -f` 是你最好的选择。运行这两个命令使工作目录和最近的提交相匹配，让你在干净的状态下继续工作。\n\n`git clean` 命令对于 build 后清理工作目录十分有用。比如，它可以轻易地删除 C 编译器生成的 `.o` 和 `.exe` 二进制文件。这通常是打包发布前需要的一步。`-x` 命令在这种情况下特别方便。\n\n请牢记，和 `git reset` 一样， `git clean` 是仅有的几个可以永久删除提交的命令之一，所以要小心使用。事实上，它太容易丢掉重要的修改了，以至于 Git 厂商 *强制* 你用 `-f` 标志来进行最基本的操作。这可以避免你用一个 `git clean` 就不小心删除了所有东西。\n\n### 例子\n\n下面的栗子清除了工作目录中的所有更改，包括新建还没加入缓存的文件。它假设你已经提交了一些快照，准备开始一些新的实验。\n\n```\n# 编辑了一些文件\n# 新增了一些文件\n# 『糟糕』\n\n# 将跟踪的文件回滚回去\ngit reset --hard\n\n# 移除未跟踪的文件\ngit clean -df\n```\n\n在执行了 reset/clean 的流程之后，工作目录和缓存区和最近一次提交看上去一模一样，而  `git status`会认为这是一个干净的工作目录。你可以重新来过了。\n\n注意，不像 `git reset` 的第二个栗子，新的文件没有被加入到仓库中。因此，它们不会受到 `git reset --hard` 的影响，需要 `git clean` 来删除它们。\n\n> 这是一篇在[原文（BY atlassian）](https://www.atlassian.com/git/tutorials/undoing-changes)基础上演绎的译文。","source":"_posts/7-回滚错误的修改.md","raw":"title: 7.回滚错误的修改\nauthor: 连思鑫\ntags:\n  - git\ncategories:\n  - ..\n  - git\n  - ''\ndate: 2023-03-01 22:55:00\n---\n## 回滚错误的修改\n\n\n这章教程提供了和项目旧版本打交道所需要的所有技巧。首先，你会知道如何浏览旧的提交，然后了解回滚项目历史中的公有提交和回滚本地机器上的私有更改之间的区别。\n\n## git checkout\n\n见上一章[「6.检出历史提交」](https://jinbilianshao.github.io/wikicode/wiki/6-%E6%A3%80%E5%87%BA%E5%8E%86%E5%8F%B2%E6%8F%90%E4%BA%A4/)。\n\n## git revert\n\n`git revert` 命令用来撤销一个已经提交的快照。但是，它是通过搞清楚如何撤销这个提交引入的更改，然后在最后加上一个撤销了更改的 *新* 提交，而不是从项目历史中移除这个提交。这避免了Git丢失项目历史，这一点对于你的版本历史和协作的可靠性来说是很重要的。\n\n![Git Tutorial: git revert](https://wac-cdn.atlassian.com/dam/jcr:b6fcf82b-5b15-4569-8f4f-a76454f9ca5b/03%20(7)\n\n\n### 用法\n\n```\ngit revert <commit>\n```\n\n生成一个撤消了 `<commit>` 引入的修改的新提交，然后应用到当前分支。\n\n### 讨论\n\n撤销（revert）应该用在你想要在项目历史中移除一整个提交的时候。比如说，你在追踪一个 bug，然后你发现它是由一个提交造成的，这时候撤销就很有用。与其说自己去修复它，然后提交一个新的快照，不如用 `git revert`，它帮你做了所有的事情。\n\n#### 撤销（revert）和重设（reset）对比\n\n理解这一点很重要。`git revert` 回滚了「单独一个提交」，它没有移除后面的提交，然后回到项目之前的状态。在 Git 中，后者实际上被称为 `reset`，而不是 `revert`。\n\n![Git Tutorial: Revert vs Reset](https://wac-cdn.atlassian.com/dam/jcr:a6a50d78-48e3-4765-8492-9e48dec8fd2f/04%20(2).svg)\n\n撤销和重设相比有两个重要的优点。首先，它不会改变项目历史，对那些已经发布到共享仓库的提交来说这是一个安全的操作。至于为什么改变共享的历史是危险\b的，请参阅 `git reset` 一节。\n\n其次，`git revert` 可以针对历史中任何一个提交，而 `git reset` 只能从当前提交向前回溯。比如，你想用 `git reset` 重设一个旧的提交，你不得不移除那个提交后的所有提交，再移除那个提交，然后重新提交后面的所有提交。不用说，这并不是一个优雅的回滚方案。\n\n\n## git reset\n\n如果说 `git revert` 是一个撤销更改安全的方式，你可以将 `git reset` 看做一个 *危险* 的方式。当你用 `git reset` 来重设更改时(提交不再被任何引用或引用日志所引用)，我们无法获得原来的样子——这个撤销是永远的。使用这个工具的时候务必要小心，因为这是少数几个可能会造成工作丢失的命令之一。\n\n和 `git checkout` 一样，`git reset` 有很多种用法。它可以被用来移除提交快照，尽管它通常被用来撤销缓存区和工作目录的修改。不管是哪种情况，它应该只被用于 *本地* 修改——你永远不应该重设和其他开发者共享的快照。\n\n### 用法\n\n```\ngit reset <file>\n```\n\n从缓存区移除特定文件，但不改变工作目录。它会取消这个文件的缓存，而不覆盖任何更改。\n\n```\ngit reset\n```\n\n重设缓冲区，匹配最近的一次提交，但工作目录不变。它会取消 *所有* 文件的缓存，而不会覆盖任何修改，给你了一个重设缓存快照的机会。\n\n```\ngit reset --hard\n```\n\n重设缓冲区和工作目录，匹配最近的一次提交。除了取消缓存之外，`--hard` 标记告诉 Git 还要重写所有工作目录中的更改。换句话说：它清除了所有未提交的更改，所以在使用前确定你想扔掉你所有本地的开发。\n\n```\ngit reset <commit>\n```\n\n将当前分支的末端移到 `<commit>`，将缓存区重设到这个提交，但不改变工作目录。所有 `<commit>` 之后的更改会保留在工作目录中，这允许你用更干净、原子性的快照重新提交项目历史。\n\n```\ngit reset --hard <commit>\n```\n\n将当前分支的末端移到 `<commit>`，将缓存区和工作目录都重设到这个提交。它不仅清除了未提交的更改，同时还清除了 `<commit>` 之后的所有提交。\n\n### 讨论\n\n上面所有的调用都是用来移除仓库中的修改。没有 `--hard` 标记时 `git reset` 通过取消缓存或取消一系列的提交，然后重新构建提交来清理仓库。而加上 `--hard` 标记对于作了大死之后想要重头再来尤其方便。\n\n撤销(revert)被设计为撤销 *公开* 的提交的安全方式，`git reset`被设计为重设 *本地* 更改。因为两个命令的目的不同，它们的实现也不一样：重设完全地移除了一堆更改，而撤销保留了原来的更改，用一个新的提交来实现撤销。\n\n![Git Tutorial: Revert vs Reset](https://www.atlassian.com/git/images/tutorials/getting-started/undoing-changes/06.svg)\n\n#### 不要重设公共历史\n\n当有 `<commit>` 之后的提交被推送到公共仓库后，你绝不应该使用 `git reset`。发布一个提交之后，你必须假设其他开发者会依赖于它。\n\n移除一个其他团队成员在上面继续开发的提交在协作时会引发严重的问题。当他们试着和你的仓库同步时，他们会发现项目历史的一部分突然消失了。下面的序列展示了如果你尝试重设公共提交时会发生什么。`origin/master` 是你本地 `master` 分支对应的中央仓库中的分支。\n\n![Git Tutorial: Resetting an Public Commit](https://wac-cdn.atlassian.com/dam/jcr:b616f03d-5257-4ea8-a6eb-db1a0207a78a/07%20(1).svg)\n\n一旦你在重设之后又增加了新的提交，Git 会认为你的本地历史已经和 `origin/master` 分叉了，同步你的仓库时的合并提交（merge commit）会使你的同事困惑。\n\n重点是，确保你只对本地的修改使用 `git reset`，而不是公共更改。如果你需要修复一个公共提交，`git revert` 命令正是被设计来做这个的。\n\n### 例子\n\n#### 取消文件缓存\n\n`git reset` 命令在准备缓存快照时经常被用到。下面的例子假设你有两个文件，`hello.py` 和 `main.py`它们已经被加入了仓库中。\n\n```\n# 编辑了hello.py和main.py\n\n# 缓存了目录下所有文件\ngit add .\n\n# 意识到hello.py和main.py中的修改\n# 应该在不同的快照中提交\n\n# 取消main.py缓存\ngit reset main.py\n\n# 只提交hello.py\ngit commit -m \"Make some changes to hello.py\"\n\n# 在另一份快照中提交main.py\ngit add main.py\ngit commit -m \"Edit main.py\"\n```\n\n如你所见，`git reset` 帮助你取消和这次提交无关的修改，让提交能够专注于某一特定的范围。\n\n#### 移除本地修改\n\n下面的这个栗子显示了一个更高端的用法。它展示了你作了大死之后应该如何扔掉那几个更新。\n\n```\n# 创建一个叫`foo.py`的新文件，增加代码\n\n# 提交到项目历史\ngit add foo.py\ngit commit -m \"Start developing a crazy feature\"\n\n# 再次编辑`foo.py`，修改其他文件\n\n# 提交另一份快照\ngit commit -a -m \"Continue my crazy feature\"\n\n# 决定废弃这个功能，并删除相关的更改\ngit reset --hard HEAD~2\n```\n\n`git reset HEAD~2` 命令将当前分支向前倒退两个提交，相当于在项目历史中移除刚创建的这两个提交。记住，这种重设只能用在 *非公开* 的提交中。绝不要在将提交推送到共享仓库之后执行上面的操作。\n\n## git clean\n\n`git clean` 命令将未跟踪的文件从你的工作目录中移除。它只是提供了一条捷径，因为用 `git status` 查看哪些文件还未跟踪然后手动移除它们也很方便。和一般的 `rm` 命令一样，`git clean` 是无法撤消的，所以在删除未跟踪的文件之前想清楚，你是否真的要这么做。\n\n`git clean` 命令经常和 `git reset --hard` 一起使用。记住，reset 只影响被跟踪的文件，所以还需要一个单独的命令来清理未被跟踪的文件。这个两个命令相结合，你就可以将工作目录回到之前特定提交时的状态。\n\n### 用法\n\n```\ngit clean -n\n```\n\n执行一次git clean的『演习』。它会告诉你那些文件在命令执行后会被移除，而不是真的删除它。\n\n```\ngit clean -f\n```\n\n移除当前目录下未被跟踪的文件。`-f`（强制）标记是必需的，除非 `clean.requireForce` 配置项被设为了 `false`（默认为 `true`）。它 *不会* 删除 `.gitignore` 中指定的未跟踪的文件。\n\n```\ngit clean -f <path>\n```\n\n移除未跟踪的文件，但限制在某个路径下。\n\n```\ngit clean -df\n```\n\n移除未跟踪的文件，以及目录。\n\n```\ngit clean -xf\n```\n\n移除当前目录下未跟踪的文件，以及 Git 一般忽略的文件。\n\n### 讨论\n\n如果你在本地仓库中作死之后想要毁尸灭迹，`git reset --hard` 和 `git clean -f` 是你最好的选择。运行这两个命令使工作目录和最近的提交相匹配，让你在干净的状态下继续工作。\n\n`git clean` 命令对于 build 后清理工作目录十分有用。比如，它可以轻易地删除 C 编译器生成的 `.o` 和 `.exe` 二进制文件。这通常是打包发布前需要的一步。`-x` 命令在这种情况下特别方便。\n\n请牢记，和 `git reset` 一样， `git clean` 是仅有的几个可以永久删除提交的命令之一，所以要小心使用。事实上，它太容易丢掉重要的修改了，以至于 Git 厂商 *强制* 你用 `-f` 标志来进行最基本的操作。这可以避免你用一个 `git clean` 就不小心删除了所有东西。\n\n### 例子\n\n下面的栗子清除了工作目录中的所有更改，包括新建还没加入缓存的文件。它假设你已经提交了一些快照，准备开始一些新的实验。\n\n```\n# 编辑了一些文件\n# 新增了一些文件\n# 『糟糕』\n\n# 将跟踪的文件回滚回去\ngit reset --hard\n\n# 移除未跟踪的文件\ngit clean -df\n```\n\n在执行了 reset/clean 的流程之后，工作目录和缓存区和最近一次提交看上去一模一样，而  `git status`会认为这是一个干净的工作目录。你可以重新来过了。\n\n注意，不像 `git reset` 的第二个栗子，新的文件没有被加入到仓库中。因此，它们不会受到 `git reset --hard` 的影响，需要 `git clean` 来删除它们。\n\n> 这是一篇在[原文（BY atlassian）](https://www.atlassian.com/git/tutorials/undoing-changes)基础上演绎的译文。","slug":"7-回滚错误的修改","published":1,"updated":"2023-03-01T15:02:22.352Z","_id":"clifr2v1r001214uo8qzp5a15","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"回滚错误的修改\"><a href=\"#回滚错误的修改\" class=\"headerlink\" title=\"回滚错误的修改\"></a>回滚错误的修改</h2><p>这章教程提供了和项目旧版本打交道所需要的所有技巧。首先，你会知道如何浏览旧的提交，然后了解回滚项目历史中的公有提交和回滚本地机器上的私有更改之间的区别。</p>\n<h2 id=\"git-checkout\"><a href=\"#git-checkout\" class=\"headerlink\" title=\"git checkout\"></a>git checkout</h2><p>见上一章<a href=\"https://jinbilianshao.github.io/wikicode/wiki/6-%E6%A3%80%E5%87%BA%E5%8E%86%E5%8F%B2%E6%8F%90%E4%BA%A4/\">「6.检出历史提交」</a>。</p>\n<h2 id=\"git-revert\"><a href=\"#git-revert\" class=\"headerlink\" title=\"git revert\"></a>git revert</h2><p><code>git revert</code> 命令用来撤销一个已经提交的快照。但是，它是通过搞清楚如何撤销这个提交引入的更改，然后在最后加上一个撤销了更改的 <em>新</em> 提交，而不是从项目历史中移除这个提交。这避免了Git丢失项目历史，这一点对于你的版本历史和协作的可靠性来说是很重要的。</p>\n<p><img src=\"https://wac-cdn.atlassian.com/dam/jcr:b6fcf82b-5b15-4569-8f4f-a76454f9ca5b/03%20(7\" alt=\"Git Tutorial: git revert\"></p>\n<h3 id=\"用法\"><a href=\"#用法\" class=\"headerlink\" title=\"用法\"></a>用法</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git revert &lt;commit&gt;</span><br></pre></td></tr></table></figure>\n\n<p>生成一个撤消了 <code>&lt;commit&gt;</code> 引入的修改的新提交，然后应用到当前分支。</p>\n<h3 id=\"讨论\"><a href=\"#讨论\" class=\"headerlink\" title=\"讨论\"></a>讨论</h3><p>撤销（revert）应该用在你想要在项目历史中移除一整个提交的时候。比如说，你在追踪一个 bug，然后你发现它是由一个提交造成的，这时候撤销就很有用。与其说自己去修复它，然后提交一个新的快照，不如用 <code>git revert</code>，它帮你做了所有的事情。</p>\n<h4 id=\"撤销（revert）和重设（reset）对比\"><a href=\"#撤销（revert）和重设（reset）对比\" class=\"headerlink\" title=\"撤销（revert）和重设（reset）对比\"></a>撤销（revert）和重设（reset）对比</h4><p>理解这一点很重要。<code>git revert</code> 回滚了「单独一个提交」，它没有移除后面的提交，然后回到项目之前的状态。在 Git 中，后者实际上被称为 <code>reset</code>，而不是 <code>revert</code>。</p>\n<p><img src=\"https://wac-cdn.atlassian.com/dam/jcr:a6a50d78-48e3-4765-8492-9e48dec8fd2f/04%20(2).svg\" alt=\"Git Tutorial: Revert vs Reset\"></p>\n<p>撤销和重设相比有两个重要的优点。首先，它不会改变项目历史，对那些已经发布到共享仓库的提交来说这是一个安全的操作。至于为什么改变共享的历史是危险\b的，请参阅 <code>git reset</code> 一节。</p>\n<p>其次，<code>git revert</code> 可以针对历史中任何一个提交，而 <code>git reset</code> 只能从当前提交向前回溯。比如，你想用 <code>git reset</code> 重设一个旧的提交，你不得不移除那个提交后的所有提交，再移除那个提交，然后重新提交后面的所有提交。不用说，这并不是一个优雅的回滚方案。</p>\n<h2 id=\"git-reset\"><a href=\"#git-reset\" class=\"headerlink\" title=\"git reset\"></a>git reset</h2><p>如果说 <code>git revert</code> 是一个撤销更改安全的方式，你可以将 <code>git reset</code> 看做一个 <em>危险</em> 的方式。当你用 <code>git reset</code> 来重设更改时(提交不再被任何引用或引用日志所引用)，我们无法获得原来的样子——这个撤销是永远的。使用这个工具的时候务必要小心，因为这是少数几个可能会造成工作丢失的命令之一。</p>\n<p>和 <code>git checkout</code> 一样，<code>git reset</code> 有很多种用法。它可以被用来移除提交快照，尽管它通常被用来撤销缓存区和工作目录的修改。不管是哪种情况，它应该只被用于 <em>本地</em> 修改——你永远不应该重设和其他开发者共享的快照。</p>\n<h3 id=\"用法-1\"><a href=\"#用法-1\" class=\"headerlink\" title=\"用法\"></a>用法</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git reset &lt;file&gt;</span><br></pre></td></tr></table></figure>\n\n<p>从缓存区移除特定文件，但不改变工作目录。它会取消这个文件的缓存，而不覆盖任何更改。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git reset</span><br></pre></td></tr></table></figure>\n\n<p>重设缓冲区，匹配最近的一次提交，但工作目录不变。它会取消 <em>所有</em> 文件的缓存，而不会覆盖任何修改，给你了一个重设缓存快照的机会。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git reset --hard</span><br></pre></td></tr></table></figure>\n\n<p>重设缓冲区和工作目录，匹配最近的一次提交。除了取消缓存之外，<code>--hard</code> 标记告诉 Git 还要重写所有工作目录中的更改。换句话说：它清除了所有未提交的更改，所以在使用前确定你想扔掉你所有本地的开发。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git reset &lt;commit&gt;</span><br></pre></td></tr></table></figure>\n\n<p>将当前分支的末端移到 <code>&lt;commit&gt;</code>，将缓存区重设到这个提交，但不改变工作目录。所有 <code>&lt;commit&gt;</code> 之后的更改会保留在工作目录中，这允许你用更干净、原子性的快照重新提交项目历史。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git reset --hard &lt;commit&gt;</span><br></pre></td></tr></table></figure>\n\n<p>将当前分支的末端移到 <code>&lt;commit&gt;</code>，将缓存区和工作目录都重设到这个提交。它不仅清除了未提交的更改，同时还清除了 <code>&lt;commit&gt;</code> 之后的所有提交。</p>\n<h3 id=\"讨论-1\"><a href=\"#讨论-1\" class=\"headerlink\" title=\"讨论\"></a>讨论</h3><p>上面所有的调用都是用来移除仓库中的修改。没有 <code>--hard</code> 标记时 <code>git reset</code> 通过取消缓存或取消一系列的提交，然后重新构建提交来清理仓库。而加上 <code>--hard</code> 标记对于作了大死之后想要重头再来尤其方便。</p>\n<p>撤销(revert)被设计为撤销 <em>公开</em> 的提交的安全方式，<code>git reset</code>被设计为重设 <em>本地</em> 更改。因为两个命令的目的不同，它们的实现也不一样：重设完全地移除了一堆更改，而撤销保留了原来的更改，用一个新的提交来实现撤销。</p>\n<p><img src=\"https://www.atlassian.com/git/images/tutorials/getting-started/undoing-changes/06.svg\" alt=\"Git Tutorial: Revert vs Reset\"></p>\n<h4 id=\"不要重设公共历史\"><a href=\"#不要重设公共历史\" class=\"headerlink\" title=\"不要重设公共历史\"></a>不要重设公共历史</h4><p>当有 <code>&lt;commit&gt;</code> 之后的提交被推送到公共仓库后，你绝不应该使用 <code>git reset</code>。发布一个提交之后，你必须假设其他开发者会依赖于它。</p>\n<p>移除一个其他团队成员在上面继续开发的提交在协作时会引发严重的问题。当他们试着和你的仓库同步时，他们会发现项目历史的一部分突然消失了。下面的序列展示了如果你尝试重设公共提交时会发生什么。<code>origin/master</code> 是你本地 <code>master</code> 分支对应的中央仓库中的分支。</p>\n<p><img src=\"https://wac-cdn.atlassian.com/dam/jcr:b616f03d-5257-4ea8-a6eb-db1a0207a78a/07%20(1).svg\" alt=\"Git Tutorial: Resetting an Public Commit\"></p>\n<p>一旦你在重设之后又增加了新的提交，Git 会认为你的本地历史已经和 <code>origin/master</code> 分叉了，同步你的仓库时的合并提交（merge commit）会使你的同事困惑。</p>\n<p>重点是，确保你只对本地的修改使用 <code>git reset</code>，而不是公共更改。如果你需要修复一个公共提交，<code>git revert</code> 命令正是被设计来做这个的。</p>\n<h3 id=\"例子\"><a href=\"#例子\" class=\"headerlink\" title=\"例子\"></a>例子</h3><h4 id=\"取消文件缓存\"><a href=\"#取消文件缓存\" class=\"headerlink\" title=\"取消文件缓存\"></a>取消文件缓存</h4><p><code>git reset</code> 命令在准备缓存快照时经常被用到。下面的例子假设你有两个文件，<code>hello.py</code> 和 <code>main.py</code>它们已经被加入了仓库中。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 编辑了hello.py和main.py</span><br><span class=\"line\"></span><br><span class=\"line\"># 缓存了目录下所有文件</span><br><span class=\"line\">git add .</span><br><span class=\"line\"></span><br><span class=\"line\"># 意识到hello.py和main.py中的修改</span><br><span class=\"line\"># 应该在不同的快照中提交</span><br><span class=\"line\"></span><br><span class=\"line\"># 取消main.py缓存</span><br><span class=\"line\">git reset main.py</span><br><span class=\"line\"></span><br><span class=\"line\"># 只提交hello.py</span><br><span class=\"line\">git commit -m &quot;Make some changes to hello.py&quot;</span><br><span class=\"line\"></span><br><span class=\"line\"># 在另一份快照中提交main.py</span><br><span class=\"line\">git add main.py</span><br><span class=\"line\">git commit -m &quot;Edit main.py&quot;</span><br></pre></td></tr></table></figure>\n\n<p>如你所见，<code>git reset</code> 帮助你取消和这次提交无关的修改，让提交能够专注于某一特定的范围。</p>\n<h4 id=\"移除本地修改\"><a href=\"#移除本地修改\" class=\"headerlink\" title=\"移除本地修改\"></a>移除本地修改</h4><p>下面的这个栗子显示了一个更高端的用法。它展示了你作了大死之后应该如何扔掉那几个更新。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 创建一个叫`foo.py`的新文件，增加代码</span><br><span class=\"line\"></span><br><span class=\"line\"># 提交到项目历史</span><br><span class=\"line\">git add foo.py</span><br><span class=\"line\">git commit -m &quot;Start developing a crazy feature&quot;</span><br><span class=\"line\"></span><br><span class=\"line\"># 再次编辑`foo.py`，修改其他文件</span><br><span class=\"line\"></span><br><span class=\"line\"># 提交另一份快照</span><br><span class=\"line\">git commit -a -m &quot;Continue my crazy feature&quot;</span><br><span class=\"line\"></span><br><span class=\"line\"># 决定废弃这个功能，并删除相关的更改</span><br><span class=\"line\">git reset --hard HEAD~2</span><br></pre></td></tr></table></figure>\n\n<p><code>git reset HEAD~2</code> 命令将当前分支向前倒退两个提交，相当于在项目历史中移除刚创建的这两个提交。记住，这种重设只能用在 <em>非公开</em> 的提交中。绝不要在将提交推送到共享仓库之后执行上面的操作。</p>\n<h2 id=\"git-clean\"><a href=\"#git-clean\" class=\"headerlink\" title=\"git clean\"></a>git clean</h2><p><code>git clean</code> 命令将未跟踪的文件从你的工作目录中移除。它只是提供了一条捷径，因为用 <code>git status</code> 查看哪些文件还未跟踪然后手动移除它们也很方便。和一般的 <code>rm</code> 命令一样，<code>git clean</code> 是无法撤消的，所以在删除未跟踪的文件之前想清楚，你是否真的要这么做。</p>\n<p><code>git clean</code> 命令经常和 <code>git reset --hard</code> 一起使用。记住，reset 只影响被跟踪的文件，所以还需要一个单独的命令来清理未被跟踪的文件。这个两个命令相结合，你就可以将工作目录回到之前特定提交时的状态。</p>\n<h3 id=\"用法-2\"><a href=\"#用法-2\" class=\"headerlink\" title=\"用法\"></a>用法</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clean -n</span><br></pre></td></tr></table></figure>\n\n<p>执行一次git clean的『演习』。它会告诉你那些文件在命令执行后会被移除，而不是真的删除它。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clean -f</span><br></pre></td></tr></table></figure>\n\n<p>移除当前目录下未被跟踪的文件。<code>-f</code>（强制）标记是必需的，除非 <code>clean.requireForce</code> 配置项被设为了 <code>false</code>（默认为 <code>true</code>）。它 <em>不会</em> 删除 <code>.gitignore</code> 中指定的未跟踪的文件。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clean -f &lt;path&gt;</span><br></pre></td></tr></table></figure>\n\n<p>移除未跟踪的文件，但限制在某个路径下。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clean -df</span><br></pre></td></tr></table></figure>\n\n<p>移除未跟踪的文件，以及目录。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clean -xf</span><br></pre></td></tr></table></figure>\n\n<p>移除当前目录下未跟踪的文件，以及 Git 一般忽略的文件。</p>\n<h3 id=\"讨论-2\"><a href=\"#讨论-2\" class=\"headerlink\" title=\"讨论\"></a>讨论</h3><p>如果你在本地仓库中作死之后想要毁尸灭迹，<code>git reset --hard</code> 和 <code>git clean -f</code> 是你最好的选择。运行这两个命令使工作目录和最近的提交相匹配，让你在干净的状态下继续工作。</p>\n<p><code>git clean</code> 命令对于 build 后清理工作目录十分有用。比如，它可以轻易地删除 C 编译器生成的 <code>.o</code> 和 <code>.exe</code> 二进制文件。这通常是打包发布前需要的一步。<code>-x</code> 命令在这种情况下特别方便。</p>\n<p>请牢记，和 <code>git reset</code> 一样， <code>git clean</code> 是仅有的几个可以永久删除提交的命令之一，所以要小心使用。事实上，它太容易丢掉重要的修改了，以至于 Git 厂商 <em>强制</em> 你用 <code>-f</code> 标志来进行最基本的操作。这可以避免你用一个 <code>git clean</code> 就不小心删除了所有东西。</p>\n<h3 id=\"例子-1\"><a href=\"#例子-1\" class=\"headerlink\" title=\"例子\"></a>例子</h3><p>下面的栗子清除了工作目录中的所有更改，包括新建还没加入缓存的文件。它假设你已经提交了一些快照，准备开始一些新的实验。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 编辑了一些文件</span><br><span class=\"line\"># 新增了一些文件</span><br><span class=\"line\"># 『糟糕』</span><br><span class=\"line\"></span><br><span class=\"line\"># 将跟踪的文件回滚回去</span><br><span class=\"line\">git reset --hard</span><br><span class=\"line\"></span><br><span class=\"line\"># 移除未跟踪的文件</span><br><span class=\"line\">git clean -df</span><br></pre></td></tr></table></figure>\n\n<p>在执行了 reset/clean 的流程之后，工作目录和缓存区和最近一次提交看上去一模一样，而  <code>git status</code>会认为这是一个干净的工作目录。你可以重新来过了。</p>\n<p>注意，不像 <code>git reset</code> 的第二个栗子，新的文件没有被加入到仓库中。因此，它们不会受到 <code>git reset --hard</code> 的影响，需要 <code>git clean</code> 来删除它们。</p>\n<blockquote>\n<p>这是一篇在<a href=\"https://www.atlassian.com/git/tutorials/undoing-changes\">原文（BY atlassian）</a>基础上演绎的译文。</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"回滚错误的修改\"><a href=\"#回滚错误的修改\" class=\"headerlink\" title=\"回滚错误的修改\"></a>回滚错误的修改</h2><p>这章教程提供了和项目旧版本打交道所需要的所有技巧。首先，你会知道如何浏览旧的提交，然后了解回滚项目历史中的公有提交和回滚本地机器上的私有更改之间的区别。</p>\n<h2 id=\"git-checkout\"><a href=\"#git-checkout\" class=\"headerlink\" title=\"git checkout\"></a>git checkout</h2><p>见上一章<a href=\"https://jinbilianshao.github.io/wikicode/wiki/6-%E6%A3%80%E5%87%BA%E5%8E%86%E5%8F%B2%E6%8F%90%E4%BA%A4/\">「6.检出历史提交」</a>。</p>\n<h2 id=\"git-revert\"><a href=\"#git-revert\" class=\"headerlink\" title=\"git revert\"></a>git revert</h2><p><code>git revert</code> 命令用来撤销一个已经提交的快照。但是，它是通过搞清楚如何撤销这个提交引入的更改，然后在最后加上一个撤销了更改的 <em>新</em> 提交，而不是从项目历史中移除这个提交。这避免了Git丢失项目历史，这一点对于你的版本历史和协作的可靠性来说是很重要的。</p>\n<p><img src=\"https://wac-cdn.atlassian.com/dam/jcr:b6fcf82b-5b15-4569-8f4f-a76454f9ca5b/03%20(7\" alt=\"Git Tutorial: git revert\"></p>\n<h3 id=\"用法\"><a href=\"#用法\" class=\"headerlink\" title=\"用法\"></a>用法</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git revert &lt;commit&gt;</span><br></pre></td></tr></table></figure>\n\n<p>生成一个撤消了 <code>&lt;commit&gt;</code> 引入的修改的新提交，然后应用到当前分支。</p>\n<h3 id=\"讨论\"><a href=\"#讨论\" class=\"headerlink\" title=\"讨论\"></a>讨论</h3><p>撤销（revert）应该用在你想要在项目历史中移除一整个提交的时候。比如说，你在追踪一个 bug，然后你发现它是由一个提交造成的，这时候撤销就很有用。与其说自己去修复它，然后提交一个新的快照，不如用 <code>git revert</code>，它帮你做了所有的事情。</p>\n<h4 id=\"撤销（revert）和重设（reset）对比\"><a href=\"#撤销（revert）和重设（reset）对比\" class=\"headerlink\" title=\"撤销（revert）和重设（reset）对比\"></a>撤销（revert）和重设（reset）对比</h4><p>理解这一点很重要。<code>git revert</code> 回滚了「单独一个提交」，它没有移除后面的提交，然后回到项目之前的状态。在 Git 中，后者实际上被称为 <code>reset</code>，而不是 <code>revert</code>。</p>\n<p><img src=\"https://wac-cdn.atlassian.com/dam/jcr:a6a50d78-48e3-4765-8492-9e48dec8fd2f/04%20(2).svg\" alt=\"Git Tutorial: Revert vs Reset\"></p>\n<p>撤销和重设相比有两个重要的优点。首先，它不会改变项目历史，对那些已经发布到共享仓库的提交来说这是一个安全的操作。至于为什么改变共享的历史是危险\b的，请参阅 <code>git reset</code> 一节。</p>\n<p>其次，<code>git revert</code> 可以针对历史中任何一个提交，而 <code>git reset</code> 只能从当前提交向前回溯。比如，你想用 <code>git reset</code> 重设一个旧的提交，你不得不移除那个提交后的所有提交，再移除那个提交，然后重新提交后面的所有提交。不用说，这并不是一个优雅的回滚方案。</p>\n<h2 id=\"git-reset\"><a href=\"#git-reset\" class=\"headerlink\" title=\"git reset\"></a>git reset</h2><p>如果说 <code>git revert</code> 是一个撤销更改安全的方式，你可以将 <code>git reset</code> 看做一个 <em>危险</em> 的方式。当你用 <code>git reset</code> 来重设更改时(提交不再被任何引用或引用日志所引用)，我们无法获得原来的样子——这个撤销是永远的。使用这个工具的时候务必要小心，因为这是少数几个可能会造成工作丢失的命令之一。</p>\n<p>和 <code>git checkout</code> 一样，<code>git reset</code> 有很多种用法。它可以被用来移除提交快照，尽管它通常被用来撤销缓存区和工作目录的修改。不管是哪种情况，它应该只被用于 <em>本地</em> 修改——你永远不应该重设和其他开发者共享的快照。</p>\n<h3 id=\"用法-1\"><a href=\"#用法-1\" class=\"headerlink\" title=\"用法\"></a>用法</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git reset &lt;file&gt;</span><br></pre></td></tr></table></figure>\n\n<p>从缓存区移除特定文件，但不改变工作目录。它会取消这个文件的缓存，而不覆盖任何更改。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git reset</span><br></pre></td></tr></table></figure>\n\n<p>重设缓冲区，匹配最近的一次提交，但工作目录不变。它会取消 <em>所有</em> 文件的缓存，而不会覆盖任何修改，给你了一个重设缓存快照的机会。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git reset --hard</span><br></pre></td></tr></table></figure>\n\n<p>重设缓冲区和工作目录，匹配最近的一次提交。除了取消缓存之外，<code>--hard</code> 标记告诉 Git 还要重写所有工作目录中的更改。换句话说：它清除了所有未提交的更改，所以在使用前确定你想扔掉你所有本地的开发。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git reset &lt;commit&gt;</span><br></pre></td></tr></table></figure>\n\n<p>将当前分支的末端移到 <code>&lt;commit&gt;</code>，将缓存区重设到这个提交，但不改变工作目录。所有 <code>&lt;commit&gt;</code> 之后的更改会保留在工作目录中，这允许你用更干净、原子性的快照重新提交项目历史。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git reset --hard &lt;commit&gt;</span><br></pre></td></tr></table></figure>\n\n<p>将当前分支的末端移到 <code>&lt;commit&gt;</code>，将缓存区和工作目录都重设到这个提交。它不仅清除了未提交的更改，同时还清除了 <code>&lt;commit&gt;</code> 之后的所有提交。</p>\n<h3 id=\"讨论-1\"><a href=\"#讨论-1\" class=\"headerlink\" title=\"讨论\"></a>讨论</h3><p>上面所有的调用都是用来移除仓库中的修改。没有 <code>--hard</code> 标记时 <code>git reset</code> 通过取消缓存或取消一系列的提交，然后重新构建提交来清理仓库。而加上 <code>--hard</code> 标记对于作了大死之后想要重头再来尤其方便。</p>\n<p>撤销(revert)被设计为撤销 <em>公开</em> 的提交的安全方式，<code>git reset</code>被设计为重设 <em>本地</em> 更改。因为两个命令的目的不同，它们的实现也不一样：重设完全地移除了一堆更改，而撤销保留了原来的更改，用一个新的提交来实现撤销。</p>\n<p><img src=\"https://www.atlassian.com/git/images/tutorials/getting-started/undoing-changes/06.svg\" alt=\"Git Tutorial: Revert vs Reset\"></p>\n<h4 id=\"不要重设公共历史\"><a href=\"#不要重设公共历史\" class=\"headerlink\" title=\"不要重设公共历史\"></a>不要重设公共历史</h4><p>当有 <code>&lt;commit&gt;</code> 之后的提交被推送到公共仓库后，你绝不应该使用 <code>git reset</code>。发布一个提交之后，你必须假设其他开发者会依赖于它。</p>\n<p>移除一个其他团队成员在上面继续开发的提交在协作时会引发严重的问题。当他们试着和你的仓库同步时，他们会发现项目历史的一部分突然消失了。下面的序列展示了如果你尝试重设公共提交时会发生什么。<code>origin/master</code> 是你本地 <code>master</code> 分支对应的中央仓库中的分支。</p>\n<p><img src=\"https://wac-cdn.atlassian.com/dam/jcr:b616f03d-5257-4ea8-a6eb-db1a0207a78a/07%20(1).svg\" alt=\"Git Tutorial: Resetting an Public Commit\"></p>\n<p>一旦你在重设之后又增加了新的提交，Git 会认为你的本地历史已经和 <code>origin/master</code> 分叉了，同步你的仓库时的合并提交（merge commit）会使你的同事困惑。</p>\n<p>重点是，确保你只对本地的修改使用 <code>git reset</code>，而不是公共更改。如果你需要修复一个公共提交，<code>git revert</code> 命令正是被设计来做这个的。</p>\n<h3 id=\"例子\"><a href=\"#例子\" class=\"headerlink\" title=\"例子\"></a>例子</h3><h4 id=\"取消文件缓存\"><a href=\"#取消文件缓存\" class=\"headerlink\" title=\"取消文件缓存\"></a>取消文件缓存</h4><p><code>git reset</code> 命令在准备缓存快照时经常被用到。下面的例子假设你有两个文件，<code>hello.py</code> 和 <code>main.py</code>它们已经被加入了仓库中。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 编辑了hello.py和main.py</span><br><span class=\"line\"></span><br><span class=\"line\"># 缓存了目录下所有文件</span><br><span class=\"line\">git add .</span><br><span class=\"line\"></span><br><span class=\"line\"># 意识到hello.py和main.py中的修改</span><br><span class=\"line\"># 应该在不同的快照中提交</span><br><span class=\"line\"></span><br><span class=\"line\"># 取消main.py缓存</span><br><span class=\"line\">git reset main.py</span><br><span class=\"line\"></span><br><span class=\"line\"># 只提交hello.py</span><br><span class=\"line\">git commit -m &quot;Make some changes to hello.py&quot;</span><br><span class=\"line\"></span><br><span class=\"line\"># 在另一份快照中提交main.py</span><br><span class=\"line\">git add main.py</span><br><span class=\"line\">git commit -m &quot;Edit main.py&quot;</span><br></pre></td></tr></table></figure>\n\n<p>如你所见，<code>git reset</code> 帮助你取消和这次提交无关的修改，让提交能够专注于某一特定的范围。</p>\n<h4 id=\"移除本地修改\"><a href=\"#移除本地修改\" class=\"headerlink\" title=\"移除本地修改\"></a>移除本地修改</h4><p>下面的这个栗子显示了一个更高端的用法。它展示了你作了大死之后应该如何扔掉那几个更新。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 创建一个叫`foo.py`的新文件，增加代码</span><br><span class=\"line\"></span><br><span class=\"line\"># 提交到项目历史</span><br><span class=\"line\">git add foo.py</span><br><span class=\"line\">git commit -m &quot;Start developing a crazy feature&quot;</span><br><span class=\"line\"></span><br><span class=\"line\"># 再次编辑`foo.py`，修改其他文件</span><br><span class=\"line\"></span><br><span class=\"line\"># 提交另一份快照</span><br><span class=\"line\">git commit -a -m &quot;Continue my crazy feature&quot;</span><br><span class=\"line\"></span><br><span class=\"line\"># 决定废弃这个功能，并删除相关的更改</span><br><span class=\"line\">git reset --hard HEAD~2</span><br></pre></td></tr></table></figure>\n\n<p><code>git reset HEAD~2</code> 命令将当前分支向前倒退两个提交，相当于在项目历史中移除刚创建的这两个提交。记住，这种重设只能用在 <em>非公开</em> 的提交中。绝不要在将提交推送到共享仓库之后执行上面的操作。</p>\n<h2 id=\"git-clean\"><a href=\"#git-clean\" class=\"headerlink\" title=\"git clean\"></a>git clean</h2><p><code>git clean</code> 命令将未跟踪的文件从你的工作目录中移除。它只是提供了一条捷径，因为用 <code>git status</code> 查看哪些文件还未跟踪然后手动移除它们也很方便。和一般的 <code>rm</code> 命令一样，<code>git clean</code> 是无法撤消的，所以在删除未跟踪的文件之前想清楚，你是否真的要这么做。</p>\n<p><code>git clean</code> 命令经常和 <code>git reset --hard</code> 一起使用。记住，reset 只影响被跟踪的文件，所以还需要一个单独的命令来清理未被跟踪的文件。这个两个命令相结合，你就可以将工作目录回到之前特定提交时的状态。</p>\n<h3 id=\"用法-2\"><a href=\"#用法-2\" class=\"headerlink\" title=\"用法\"></a>用法</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clean -n</span><br></pre></td></tr></table></figure>\n\n<p>执行一次git clean的『演习』。它会告诉你那些文件在命令执行后会被移除，而不是真的删除它。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clean -f</span><br></pre></td></tr></table></figure>\n\n<p>移除当前目录下未被跟踪的文件。<code>-f</code>（强制）标记是必需的，除非 <code>clean.requireForce</code> 配置项被设为了 <code>false</code>（默认为 <code>true</code>）。它 <em>不会</em> 删除 <code>.gitignore</code> 中指定的未跟踪的文件。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clean -f &lt;path&gt;</span><br></pre></td></tr></table></figure>\n\n<p>移除未跟踪的文件，但限制在某个路径下。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clean -df</span><br></pre></td></tr></table></figure>\n\n<p>移除未跟踪的文件，以及目录。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clean -xf</span><br></pre></td></tr></table></figure>\n\n<p>移除当前目录下未跟踪的文件，以及 Git 一般忽略的文件。</p>\n<h3 id=\"讨论-2\"><a href=\"#讨论-2\" class=\"headerlink\" title=\"讨论\"></a>讨论</h3><p>如果你在本地仓库中作死之后想要毁尸灭迹，<code>git reset --hard</code> 和 <code>git clean -f</code> 是你最好的选择。运行这两个命令使工作目录和最近的提交相匹配，让你在干净的状态下继续工作。</p>\n<p><code>git clean</code> 命令对于 build 后清理工作目录十分有用。比如，它可以轻易地删除 C 编译器生成的 <code>.o</code> 和 <code>.exe</code> 二进制文件。这通常是打包发布前需要的一步。<code>-x</code> 命令在这种情况下特别方便。</p>\n<p>请牢记，和 <code>git reset</code> 一样， <code>git clean</code> 是仅有的几个可以永久删除提交的命令之一，所以要小心使用。事实上，它太容易丢掉重要的修改了，以至于 Git 厂商 <em>强制</em> 你用 <code>-f</code> 标志来进行最基本的操作。这可以避免你用一个 <code>git clean</code> 就不小心删除了所有东西。</p>\n<h3 id=\"例子-1\"><a href=\"#例子-1\" class=\"headerlink\" title=\"例子\"></a>例子</h3><p>下面的栗子清除了工作目录中的所有更改，包括新建还没加入缓存的文件。它假设你已经提交了一些快照，准备开始一些新的实验。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 编辑了一些文件</span><br><span class=\"line\"># 新增了一些文件</span><br><span class=\"line\"># 『糟糕』</span><br><span class=\"line\"></span><br><span class=\"line\"># 将跟踪的文件回滚回去</span><br><span class=\"line\">git reset --hard</span><br><span class=\"line\"></span><br><span class=\"line\"># 移除未跟踪的文件</span><br><span class=\"line\">git clean -df</span><br></pre></td></tr></table></figure>\n\n<p>在执行了 reset/clean 的流程之后，工作目录和缓存区和最近一次提交看上去一模一样，而  <code>git status</code>会认为这是一个干净的工作目录。你可以重新来过了。</p>\n<p>注意，不像 <code>git reset</code> 的第二个栗子，新的文件没有被加入到仓库中。因此，它们不会受到 <code>git reset --hard</code> 的影响，需要 <code>git clean</code> 来删除它们。</p>\n<blockquote>\n<p>这是一篇在<a href=\"https://www.atlassian.com/git/tutorials/undoing-changes\">原文（BY atlassian）</a>基础上演绎的译文。</p>\n</blockquote>\n"},{"title":"8.设置编译器选项","author":"连思鑫","date":"2023-03-02T11:24:00.000Z","_content":"### 8.设置编译器选项\n\n#### 设置编译器选项\n\n---\n\n前面的示例展示了如何探测 CMake，从而获得关于编译器的信息，以及如何切换项目中的编译器。后一个任务是控制项目的编译器标志。CMake为调整或扩展编译器标志提供了很大的灵活性，您可以选择下面两种方法:\n\t\tCMake 将编译选项视为目标属性。因此，可以根据每个目标设置编译选项，而不需要覆盖 CMake 默认值。\n\t\t可以使用 -D CLI 标志直接修改 CMAKE\\_<LANG>\\_FLAGS\\_<CONFIG> 变量。这将影响项目中的所有目标，并覆盖或扩展 CMake 默认值。\n\n#### 具体实施\n\n----\n\n1. 设置CMake的最低版本:\n\n   ``` cmake\n   cmake_minimum_required(VERSION 3.5)\n   ```\n\n2. 声明项目名称和语言\n\n   ``` cmake\n   project(hello-cmake LANGUAGES CXX)\n   ```\n\n3. 然后，打印当前编译器标志。CMake将对所有C++目标使用这些\n\n   ``` cmake\n   message(STATUS \"C++ compiler flags is: \t\t\t${CMAKE_CXX_FLAGS}\")\n   ```\n\n4. 为目标准备了标志列表，其中一些将无法在Windows上使用\n\n   ``` cmake\n   list(APPEND flags \"-fPIC\" \"-Wall\")\n   \n   if (NOT WIN32)\n   \tlist(APPEND flags \"-Wextra\" \"-Wpedantic\")\n   endif()\n   ```\n\n5. 添加了一个新的目标—— message 库，并列出它的源依赖关系\n\n   ``` cmake\n   add_library(message \n   \tSTATIC\n   \tMessage.h\n   \tMessage.cpp\n   )\n   ```\n\n6. 为这个库目标设置了编译选项\n\n   ``` cmake\n   target_compile_options(message\n   \tPRIVATE\n   \t${flags}\n   )\n   ```\n\n7. 然后，将生成 hello-cmake 可执行文件作为一个目标\n\n   ``` cmake\n   add_executable(hello-cmake hello-cmake.cpp)\n   ```\n\n8. 还为可执行目标设置了编译选项\n\n   ``` cmake\n   target_compile_options(hello-cmake\n   \tPRIVATE\n   \t\"-fPIC\"\n   )\n   ```\n\n9. 最后，将可执行文件链接到 message 库\n\n   ``` cmake\n   target_link_libraries(hello-cmake message)\n   ```\n\n#### 如何工作\n\n---\n\n``` cmake\n# 本例中，警告标志有 -Wall 、 -Wextra 和 -Wpedantic ，将这些标示添加到 geometry 目标的编译选项中； compute-areas 和 geometry 目标都将使用 -fPIC 标志。\n# 编译选项可以添加三个级别的可见性：INTERFACE、PUBLIC 和 PRIVATE 。\n# 可见性的含义如下:\n\n# PRIVATE，编译选项会应用于给定的目标，不会传递给与目标相关的目标。\n# 我们的示例中， 即使 compute-areas 将链接到 geometry 库， compute-areas 也不会继承 geometry 目标上设置的编译器选项。\n\n# INTERFACE，给定的编译选项将只应用于指定目标，并传递给与目标相关的目标。\n\n# PUBLIC，编译选项将应用于指定目标和使用它的目标。\n# 目标属性的可见性 CMake 的核心，我们将在本书中经常讨论这个话题。\n# 以这种方式添加编译选项，不会影响全局CMake变量 CMAKE_<LANG>_FLAGS_<CONFIG> ，并能更细粒度控制在哪些目标上使用哪些选项。\n```\n","source":"_posts/8-设置编译器选项.md","raw":"title: 8.设置编译器选项\nauthor: 连思鑫\ntags:\n  - cmake\ncategories:\n  - ..\n  - cmake\n  - 第一章：从简单的可执行文件到库\ndate: 2023-03-02 19:24:00\n---\n### 8.设置编译器选项\n\n#### 设置编译器选项\n\n---\n\n前面的示例展示了如何探测 CMake，从而获得关于编译器的信息，以及如何切换项目中的编译器。后一个任务是控制项目的编译器标志。CMake为调整或扩展编译器标志提供了很大的灵活性，您可以选择下面两种方法:\n\t\tCMake 将编译选项视为目标属性。因此，可以根据每个目标设置编译选项，而不需要覆盖 CMake 默认值。\n\t\t可以使用 -D CLI 标志直接修改 CMAKE\\_<LANG>\\_FLAGS\\_<CONFIG> 变量。这将影响项目中的所有目标，并覆盖或扩展 CMake 默认值。\n\n#### 具体实施\n\n----\n\n1. 设置CMake的最低版本:\n\n   ``` cmake\n   cmake_minimum_required(VERSION 3.5)\n   ```\n\n2. 声明项目名称和语言\n\n   ``` cmake\n   project(hello-cmake LANGUAGES CXX)\n   ```\n\n3. 然后，打印当前编译器标志。CMake将对所有C++目标使用这些\n\n   ``` cmake\n   message(STATUS \"C++ compiler flags is: \t\t\t${CMAKE_CXX_FLAGS}\")\n   ```\n\n4. 为目标准备了标志列表，其中一些将无法在Windows上使用\n\n   ``` cmake\n   list(APPEND flags \"-fPIC\" \"-Wall\")\n   \n   if (NOT WIN32)\n   \tlist(APPEND flags \"-Wextra\" \"-Wpedantic\")\n   endif()\n   ```\n\n5. 添加了一个新的目标—— message 库，并列出它的源依赖关系\n\n   ``` cmake\n   add_library(message \n   \tSTATIC\n   \tMessage.h\n   \tMessage.cpp\n   )\n   ```\n\n6. 为这个库目标设置了编译选项\n\n   ``` cmake\n   target_compile_options(message\n   \tPRIVATE\n   \t${flags}\n   )\n   ```\n\n7. 然后，将生成 hello-cmake 可执行文件作为一个目标\n\n   ``` cmake\n   add_executable(hello-cmake hello-cmake.cpp)\n   ```\n\n8. 还为可执行目标设置了编译选项\n\n   ``` cmake\n   target_compile_options(hello-cmake\n   \tPRIVATE\n   \t\"-fPIC\"\n   )\n   ```\n\n9. 最后，将可执行文件链接到 message 库\n\n   ``` cmake\n   target_link_libraries(hello-cmake message)\n   ```\n\n#### 如何工作\n\n---\n\n``` cmake\n# 本例中，警告标志有 -Wall 、 -Wextra 和 -Wpedantic ，将这些标示添加到 geometry 目标的编译选项中； compute-areas 和 geometry 目标都将使用 -fPIC 标志。\n# 编译选项可以添加三个级别的可见性：INTERFACE、PUBLIC 和 PRIVATE 。\n# 可见性的含义如下:\n\n# PRIVATE，编译选项会应用于给定的目标，不会传递给与目标相关的目标。\n# 我们的示例中， 即使 compute-areas 将链接到 geometry 库， compute-areas 也不会继承 geometry 目标上设置的编译器选项。\n\n# INTERFACE，给定的编译选项将只应用于指定目标，并传递给与目标相关的目标。\n\n# PUBLIC，编译选项将应用于指定目标和使用它的目标。\n# 目标属性的可见性 CMake 的核心，我们将在本书中经常讨论这个话题。\n# 以这种方式添加编译选项，不会影响全局CMake变量 CMAKE_<LANG>_FLAGS_<CONFIG> ，并能更细粒度控制在哪些目标上使用哪些选项。\n```\n","slug":"8-设置编译器选项","published":1,"updated":"2023-03-02T11:25:07.281Z","_id":"clifr2v1s001514uocss17jqv","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"8-设置编译器选项\"><a href=\"#8-设置编译器选项\" class=\"headerlink\" title=\"8.设置编译器选项\"></a>8.设置编译器选项</h3><h4 id=\"设置编译器选项\"><a href=\"#设置编译器选项\" class=\"headerlink\" title=\"设置编译器选项\"></a>设置编译器选项</h4><hr>\n<p>前面的示例展示了如何探测 CMake，从而获得关于编译器的信息，以及如何切换项目中的编译器。后一个任务是控制项目的编译器标志。CMake为调整或扩展编译器标志提供了很大的灵活性，您可以选择下面两种方法:<br>        CMake 将编译选项视为目标属性。因此，可以根据每个目标设置编译选项，而不需要覆盖 CMake 默认值。<br>        可以使用 -D CLI 标志直接修改 CMAKE_<LANG>_FLAGS_<CONFIG> 变量。这将影响项目中的所有目标，并覆盖或扩展 CMake 默认值。</p>\n<h4 id=\"具体实施\"><a href=\"#具体实施\" class=\"headerlink\" title=\"具体实施\"></a>具体实施</h4><hr>\n<ol>\n<li><p>设置CMake的最低版本:</p>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">cmake_minimum_required</span>(VERSION <span class=\"number\">3.5</span>)</span><br></pre></td></tr></table></figure></li>\n<li><p>声明项目名称和语言</p>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">project</span>(hello-cmake LANGUAGES CXX)</span><br></pre></td></tr></table></figure></li>\n<li><p>然后，打印当前编译器标志。CMake将对所有C++目标使用这些</p>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">message</span>(STATUS <span class=\"string\">&quot;C++ compiler flags is: \t\t\t$&#123;CMAKE_CXX_FLAGS&#125;&quot;</span>)</span><br></pre></td></tr></table></figure></li>\n<li><p>为目标准备了标志列表，其中一些将无法在Windows上使用</p>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">list</span>(APPEND flags <span class=\"string\">&quot;-fPIC&quot;</span> <span class=\"string\">&quot;-Wall&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"keyword\">NOT</span> WIN32)</span><br><span class=\"line\">\t<span class=\"keyword\">list</span>(APPEND flags <span class=\"string\">&quot;-Wextra&quot;</span> <span class=\"string\">&quot;-Wpedantic&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">endif</span>()</span><br></pre></td></tr></table></figure></li>\n<li><p>添加了一个新的目标—— message 库，并列出它的源依赖关系</p>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">add_library</span>(<span class=\"keyword\">message</span> </span><br><span class=\"line\">\tSTATIC</span><br><span class=\"line\">\t<span class=\"keyword\">Message</span>.h</span><br><span class=\"line\">\t<span class=\"keyword\">Message</span>.cpp</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure></li>\n<li><p>为这个库目标设置了编译选项</p>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">target_compile_options</span>(<span class=\"keyword\">message</span></span><br><span class=\"line\">\tPRIVATE</span><br><span class=\"line\">\t<span class=\"variable\">$&#123;flags&#125;</span></span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure></li>\n<li><p>然后，将生成 hello-cmake 可执行文件作为一个目标</p>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">add_executable</span>(hello-cmake hello-cmake.cpp)</span><br></pre></td></tr></table></figure></li>\n<li><p>还为可执行目标设置了编译选项</p>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">target_compile_options</span>(hello-cmake</span><br><span class=\"line\">\tPRIVATE</span><br><span class=\"line\">\t<span class=\"string\">&quot;-fPIC&quot;</span></span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure></li>\n<li><p>最后，将可执行文件链接到 message 库</p>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">target_link_libraries</span>(hello-cmake <span class=\"keyword\">message</span>)</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h4 id=\"如何工作\"><a href=\"#如何工作\" class=\"headerlink\" title=\"如何工作\"></a>如何工作</h4><hr>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 本例中，警告标志有 -Wall 、 -Wextra 和 -Wpedantic ，将这些标示添加到 geometry 目标的编译选项中； compute-areas 和 geometry 目标都将使用 -fPIC 标志。</span></span><br><span class=\"line\"><span class=\"comment\"># 编译选项可以添加三个级别的可见性：INTERFACE、PUBLIC 和 PRIVATE 。</span></span><br><span class=\"line\"><span class=\"comment\"># 可见性的含义如下:</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># PRIVATE，编译选项会应用于给定的目标，不会传递给与目标相关的目标。</span></span><br><span class=\"line\"><span class=\"comment\"># 我们的示例中， 即使 compute-areas 将链接到 geometry 库， compute-areas 也不会继承 geometry 目标上设置的编译器选项。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># INTERFACE，给定的编译选项将只应用于指定目标，并传递给与目标相关的目标。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># PUBLIC，编译选项将应用于指定目标和使用它的目标。</span></span><br><span class=\"line\"><span class=\"comment\"># 目标属性的可见性 CMake 的核心，我们将在本书中经常讨论这个话题。</span></span><br><span class=\"line\"><span class=\"comment\"># 以这种方式添加编译选项，不会影响全局CMake变量 CMAKE_&lt;LANG&gt;_FLAGS_&lt;CONFIG&gt; ，并能更细粒度控制在哪些目标上使用哪些选项。</span></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"8-设置编译器选项\"><a href=\"#8-设置编译器选项\" class=\"headerlink\" title=\"8.设置编译器选项\"></a>8.设置编译器选项</h3><h4 id=\"设置编译器选项\"><a href=\"#设置编译器选项\" class=\"headerlink\" title=\"设置编译器选项\"></a>设置编译器选项</h4><hr>\n<p>前面的示例展示了如何探测 CMake，从而获得关于编译器的信息，以及如何切换项目中的编译器。后一个任务是控制项目的编译器标志。CMake为调整或扩展编译器标志提供了很大的灵活性，您可以选择下面两种方法:<br>        CMake 将编译选项视为目标属性。因此，可以根据每个目标设置编译选项，而不需要覆盖 CMake 默认值。<br>        可以使用 -D CLI 标志直接修改 CMAKE_<LANG>_FLAGS_<CONFIG> 变量。这将影响项目中的所有目标，并覆盖或扩展 CMake 默认值。</p>\n<h4 id=\"具体实施\"><a href=\"#具体实施\" class=\"headerlink\" title=\"具体实施\"></a>具体实施</h4><hr>\n<ol>\n<li><p>设置CMake的最低版本:</p>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">cmake_minimum_required</span>(VERSION <span class=\"number\">3.5</span>)</span><br></pre></td></tr></table></figure></li>\n<li><p>声明项目名称和语言</p>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">project</span>(hello-cmake LANGUAGES CXX)</span><br></pre></td></tr></table></figure></li>\n<li><p>然后，打印当前编译器标志。CMake将对所有C++目标使用这些</p>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">message</span>(STATUS <span class=\"string\">&quot;C++ compiler flags is: \t\t\t$&#123;CMAKE_CXX_FLAGS&#125;&quot;</span>)</span><br></pre></td></tr></table></figure></li>\n<li><p>为目标准备了标志列表，其中一些将无法在Windows上使用</p>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">list</span>(APPEND flags <span class=\"string\">&quot;-fPIC&quot;</span> <span class=\"string\">&quot;-Wall&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"keyword\">NOT</span> WIN32)</span><br><span class=\"line\">\t<span class=\"keyword\">list</span>(APPEND flags <span class=\"string\">&quot;-Wextra&quot;</span> <span class=\"string\">&quot;-Wpedantic&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">endif</span>()</span><br></pre></td></tr></table></figure></li>\n<li><p>添加了一个新的目标—— message 库，并列出它的源依赖关系</p>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">add_library</span>(<span class=\"keyword\">message</span> </span><br><span class=\"line\">\tSTATIC</span><br><span class=\"line\">\t<span class=\"keyword\">Message</span>.h</span><br><span class=\"line\">\t<span class=\"keyword\">Message</span>.cpp</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure></li>\n<li><p>为这个库目标设置了编译选项</p>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">target_compile_options</span>(<span class=\"keyword\">message</span></span><br><span class=\"line\">\tPRIVATE</span><br><span class=\"line\">\t<span class=\"variable\">$&#123;flags&#125;</span></span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure></li>\n<li><p>然后，将生成 hello-cmake 可执行文件作为一个目标</p>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">add_executable</span>(hello-cmake hello-cmake.cpp)</span><br></pre></td></tr></table></figure></li>\n<li><p>还为可执行目标设置了编译选项</p>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">target_compile_options</span>(hello-cmake</span><br><span class=\"line\">\tPRIVATE</span><br><span class=\"line\">\t<span class=\"string\">&quot;-fPIC&quot;</span></span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure></li>\n<li><p>最后，将可执行文件链接到 message 库</p>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">target_link_libraries</span>(hello-cmake <span class=\"keyword\">message</span>)</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h4 id=\"如何工作\"><a href=\"#如何工作\" class=\"headerlink\" title=\"如何工作\"></a>如何工作</h4><hr>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 本例中，警告标志有 -Wall 、 -Wextra 和 -Wpedantic ，将这些标示添加到 geometry 目标的编译选项中； compute-areas 和 geometry 目标都将使用 -fPIC 标志。</span></span><br><span class=\"line\"><span class=\"comment\"># 编译选项可以添加三个级别的可见性：INTERFACE、PUBLIC 和 PRIVATE 。</span></span><br><span class=\"line\"><span class=\"comment\"># 可见性的含义如下:</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># PRIVATE，编译选项会应用于给定的目标，不会传递给与目标相关的目标。</span></span><br><span class=\"line\"><span class=\"comment\"># 我们的示例中， 即使 compute-areas 将链接到 geometry 库， compute-areas 也不会继承 geometry 目标上设置的编译器选项。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># INTERFACE，给定的编译选项将只应用于指定目标，并传递给与目标相关的目标。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># PUBLIC，编译选项将应用于指定目标和使用它的目标。</span></span><br><span class=\"line\"><span class=\"comment\"># 目标属性的可见性 CMake 的核心，我们将在本书中经常讨论这个话题。</span></span><br><span class=\"line\"><span class=\"comment\"># 以这种方式添加编译选项，不会影响全局CMake变量 CMAKE_&lt;LANG&gt;_FLAGS_&lt;CONFIG&gt; ，并能更细粒度控制在哪些目标上使用哪些选项。</span></span><br></pre></td></tr></table></figure>\n"},{"title":"8.重写项目历史","author":"连思鑫","date":"2023-03-01T15:03:00.000Z","_content":"# 重写项目历史\n\n\n\n## 概述\n\nGit 的主要职责是保证你不会丢失提交的修改。但是，它同样被设计成让你完全掌控开发工作流。这包括了让你自定义你的项目历史，而这也创造了丢失提交的可能性。Git 提供了可以重写项目历史的命令，但也警告你这些命令可能会让你丢失内容。\n\n这份教程讨论了重写提交快照的一些常见原因，并告诉你如何避免不好的影响。\n\n## git commit --amend\n\n`git commit --amend` 命令是修复最新提交的便捷方式。它允许你将缓存的修改和之前的提交合并到一起，而不是提交一个全新的快照。它还可以用来简单地编辑上一次提交的信息而不改变快照。\n\n![Git Tutorial: git commit --amend](https://wac-cdn.atlassian.com/dam/jcr:a4de784b-3572-4d23-8c68-cea9ad4f205f/01.svg)\n\n但是，amend 不只是修改了最新的提交——它进行了一次替换。对于 Git 来说，这看上去像一个全新的提交，即上图中用星号表示的那一个。在公共仓库工作时一定要牢记这一点。\n\n### 用法\n\n```\ngit commit --amend\n```\n\n合并缓存的修改和上一次的提交，用新的快照替换上一个提交。缓存区没有文件时运行这个命令可以用来编辑上次提交的提交信息，而不会更改快照。\n\n### 讨论\n\n仓促的提交在你日常开发过程中时常会发生。很容易就忘记了缓存一个文件或者弄错了提交信息的格式。`--amend` 标记是修复这些小意外的便捷方式。\n\n#### 不要修复公共提交\n\n在[`git reset`](https://jinbilianshao.github.io/wikicode/wiki/7-%E5%9B%9E%E6%BB%9A%E9%94%99%E8%AF%AF%E7%9A%84%E4%BF%AE%E6%94%B9/)这节中，我们说过永远不要重设和其他开发者共享的提交。对于修复也是一样：永远不要修复一个已经推送到公共仓库中的提交。\n\n修复过的提交事实上是全新的提交，之前的提交会被移除出项目历史。这和重设公共快照的后果是一样的。如果你修复了其他开发者在之后继续开发的一个提交，看上去他们的工作基础从项目历史中消失了一样。对于在这上面的开发者来说这是很困惑的，而且很难恢复。\n\n### 栗子\n\n下面这个🌰展示了 Git 开发工作流中的一个常见情形。我们编辑了一些希望在同一个快照中提交的文件，但我们忘记添加了其中的一个。修复错误只需要缓存那个文件并且用 `--amend` 标记提交：\n\n```\n# 编辑 hello.py 和 main.py\ngit add hello.py\ngit commit\n\n# 意识到你忘记添加 main.py 的更改\ngit add main.py\ngit commit --amend --no-edit\n```\n\n编辑器会弹出上一次提交的信息，加入 `--no-edit` 标记会修复提交但不修改提交信息。需要的话你可以修改，不然的话就像往常一样保存并关闭文件。完整的提交会替换之前不完整的提交，看上去就像我们在同一个快照中提交了 `hello.py` 和 `main.py`。\n\n## git rebase\n\n变基（rebase, 事实上这个名字十分诡异, 所以在大多数时候直接用英文术语）是将分支移到一个新的基提交的过程。过程一般如下所示：\n\n![Git Tutorial: Rebase to maintain a linear project history.](https://wac-cdn.atlassian.com/dam/jcr:e4a40899-636b-4988-9774-eaa8a440575b/02.svg)\n\n从内容的角度来看，rebase 只不过是将分支从一个提交移到了另一个。但从内部机制来看，Git 是通过在选定的基上创建新提交来完成这件事的——它事实上重写了你的项目历史。理解这一点很重要，尽管分支看上去是一样的，但它包含了全新的提交。\n\n### 用法\n\n```\ngit rebase <base>\n```\n\n将当前分支 rebase 到 `<base>`，这里可以是任何类型的提交引用（ID、分支名、标签，或是 `HEAD` 的相对引用）。\n\n### 讨论\n\nrebase 的主要目的是为了保持一个线性的项目历史。比如说，当你在 feature 分支工作时 master 分支取得了一些进展：\n\n![Git Rebase Branch onto Master](https://wac-cdn.atlassian.com/dam/jcr:d3b2abde-d06a-47b6-8955-5f3ef34e0237/03.svg)\n\n要将你的 feature 分支整合进 `master` 分支，你有两个选择：直接 merge，或者先 rebase 后 merge。前者会产生一个三路合并（3-way merge）和一个合并提交，而后者产生的是一个快速向前的合并以及完美的线性历史。下图展示了为什么 rebase 到 `master` 分支会促成一个快速向前的合并。\n\n![Git Tutorial: Fast-forward merge](https://www.atlassian.com/git/images/tutorials/getting-started/rewriting-history/04.svg)\n\nrebase 是将上游更改合并进本地仓库的通常方法。你每次想查看上游进展时，用 `git merge` 拉取上游更新会导致一个多余的合并提交。在另一方面，rebase 就好像是说「我想将我的更改建立在其他人的进展之上」。\n\n#### 不要 rebase 公共历史\n\n和我们讨论过的 `git commit --amend` 和 `git reset` 一样，你永远不应该 rebase 那些已经推送到公共仓库的提交。rebase 会用新的提交替换旧的提交，你的项目历史会像突然消失了一样。\n\n### 栗子\n\n下面这个🌰同时使用 git rebase 和 git merge 来保持线性的项目历史。这是一个确认你的合并都是快速向前的方法。\n\n```\n# 开始新的功能分支\ngit checkout -b new-feature master\n# 编辑文件\ngit commit -a -m \"Start developing a feature\"\n```\n\n在 feature 分支开发了一半的时候，我们意识到项目中有一个安全漏洞:\n\n```\n# 基于master分支创建一个快速修复分支\ngit checkout -b hotfix master\n# 编辑文件\ngit commit -a -m \"Fix security hole\"\n# 合并回master\ngit checkout master\ngit merge hotfix\ngit branch -d hotfix\n```\n\n将 hotfix 分支并回之后 master，我们有了一个分叉的项目历史。我们用 rebase 整合 feature 分支以获得线性的历史，而不是使用普通的 git merge。\n\n```\ngit checkout new-feature\ngit rebase master\n```\n\n它将 new-feature 分支移到了 master 分支的末端，现在我们可以在 master 上进行标准的快速向前合并了:\n\n```\ngit checkout master\ngit merge new-feature\n```\n\n## git rebase -i\n\n用 `-i` 标记运行 `git rebase` 开始交互式 rebase。交互式 rebase 给你在过程中修改单个提交的机会，而不是盲目地将所有提交都移到新的基上。你可以移除、分割提交，更改提交的顺序。它就像是打了鸡血的 `git commit --amend` 一样。\n\n### 用法\n\n```\ngit rebase -i <base>\n```\n\n将当前分支 rebase 到 `base`，但使用可交互的形式。它会打开一个编辑器，你可以为每个将要 rebase 的提交输入命令（见后文）。这些命令决定了每个提交将会怎样被转移到新的基上去。你还可以对这些提交进行排序。\n\n### 讨论\n\n交互式 rebase 给你了控制项目历史的完全掌控。它给了开发人员很大的自由，因为他们可以提交一个「混乱」的历史而只需专注于写代码，然后回去恢复干净。\n\n大多数开发者喜欢在并入主代码库之前用交互式 rebase 来完善他们的 feature 分支。他们可以将不重要的提交合在一起，删除不需要的，确保所有东西在提交到「正式」的项目历史前都是整齐的。对其他人来说，这个功能的开发看上去是由一系列精心安排的提交组成的。\n\n### 栗子\n\n下面这个🌰是 `非交互式rebase` 一节中🌰的可交互升级版本。\n\n```\n# 开始新的功能分支\ngit checkout -b new-feature master\n# 编辑文件\ngit commit -a -m \"Start developing a feature\"\n# 编辑更多文件\ngit commit -a -m \"Fix something from the previous commit\"\n\n# 直接在 master 上添加文件\ngit checkout master\n# 编辑文件\ngit commit -a -m \"Fix security hole\"\n\n# 开始交互式 rebase\ngit checkout new-feature\ngit rebase -i master\n```\n\n最后的那个命令会打开一个编辑器，包含 new-feature 的两个提交，和一些指示：\n\n```\npick 32618c4 Start developing a feature\npick 62eed47 Fix something from the previous commit\n```\n\n你可以更改每个提交前的 pick 命令来决定在 rebase 时提交移动的方式。在我们的例子中，我们只需要用 squash 命令把两个提交并在一起就可以了：\n\n```\npick 32618c4 Start developing a feature\nsquash 62eed47 Fix something from the previous commit\n```\n\n保存并关闭编辑器以开始 rebase。另一个编辑器会打开，询问你合并后的快照的提交信息。在定义了提交信息之后，rebase 就完成了，你可以在 `git log` 输出中看到那个提交。整个过程可以用下图可视化：\n\n![Git Tutorial: git rebase -i example](https://www.atlassian.com/git/images/tutorials/getting-started/rewriting-history/05.svg)\n\n注意缩并的提交和原来的两个提交的 ID 都不一样，告诉我们这确实是个新的提交。\n\n最后，你可以执行一个快速向前的合并，来将完善的 feature 分支整合进主代码库：\n\n```\ngit checkout master\ngit merge new-feature\n```\n\n交互式 rebase 强大的能力可以从整合后的 master 分支看出——额外的 `62eed47` 提交找不到了。对其他人来说，你就像是一个天才，用完美数量的提交完成了 `new-feature`。这就是交互式提交如何保持项目历史干净和合意。\n\n## git reflog\n\nGit 用引用日志这种机制来记录分支顶端的更新。它允许你回到那些不被任何分支或标签引用的更改。在重写历史后，引用日志包含了分支旧状态的信息，有需要的话你可以回到这个状态。\n\n### 用法\n\n```\ngit reflog\n```\n\n显示本地仓库的引用日志。\n\n```\ngit reflog --relative-date\n```\n\n用相对的日期显示引用日志。(如 2 周前）。\n\n### 讨论\n\n每次当前的 HEAD 更新时（如切换分支、拉取新更改、重写历史或只是添加新的提交），引用日志都会添加一个新条目。\n\n### 栗子\n\n为了理解 `git reflog`，我们来看一个🌰。\n\n```\n0a2e358 HEAD@{0}: reset: moving to HEAD~2\n0254ea7 HEAD@{1}: checkout: moving from 2.2 to master\nc10f740 HEAD@{2}: checkout: moving from master to 2.2\n```\n\n上面的引用日志显示了 master 和 2.2 的 branch 之间的相互切换。还有对一个更老的提交的强制重设。最近的活动用 `HEAD@{0}` 标记在上方显示。\n\n如果事实上你是不小心切换回去的，引用日志包含了你意外地丢掉两个提交之前 master 指向的提交 0254ea7。\n\n```\ngit reset --hard 0254ea7\n```\n\n使用 [`git reset`](https://jinbilianshao.github.io/wikicode/wiki/7-%E5%9B%9E%E6%BB%9A%E9%94%99%E8%AF%AF%E7%9A%84%E4%BF%AE%E6%94%B9/)，就有可能能将master变回之前的那个提交。它提供了一张安全网，以防历史发生意外更改。\n\n务必记住，引用日志提供的安全网只对提交到本地仓库的更改有效，而且只有移动操作会被记录。\n\n> 这篇文章参考于[**「git-recipes」**](https://github.com/geeeeeeeeek/git-recipes/)","source":"_posts/8-重写项目历史.md","raw":"title: 8.重写项目历史\nauthor: 连思鑫\ntags:\n  - git\ncategories:\n  - ..\n  - git\n  - ''\ndate: 2023-03-01 23:03:00\n---\n# 重写项目历史\n\n\n\n## 概述\n\nGit 的主要职责是保证你不会丢失提交的修改。但是，它同样被设计成让你完全掌控开发工作流。这包括了让你自定义你的项目历史，而这也创造了丢失提交的可能性。Git 提供了可以重写项目历史的命令，但也警告你这些命令可能会让你丢失内容。\n\n这份教程讨论了重写提交快照的一些常见原因，并告诉你如何避免不好的影响。\n\n## git commit --amend\n\n`git commit --amend` 命令是修复最新提交的便捷方式。它允许你将缓存的修改和之前的提交合并到一起，而不是提交一个全新的快照。它还可以用来简单地编辑上一次提交的信息而不改变快照。\n\n![Git Tutorial: git commit --amend](https://wac-cdn.atlassian.com/dam/jcr:a4de784b-3572-4d23-8c68-cea9ad4f205f/01.svg)\n\n但是，amend 不只是修改了最新的提交——它进行了一次替换。对于 Git 来说，这看上去像一个全新的提交，即上图中用星号表示的那一个。在公共仓库工作时一定要牢记这一点。\n\n### 用法\n\n```\ngit commit --amend\n```\n\n合并缓存的修改和上一次的提交，用新的快照替换上一个提交。缓存区没有文件时运行这个命令可以用来编辑上次提交的提交信息，而不会更改快照。\n\n### 讨论\n\n仓促的提交在你日常开发过程中时常会发生。很容易就忘记了缓存一个文件或者弄错了提交信息的格式。`--amend` 标记是修复这些小意外的便捷方式。\n\n#### 不要修复公共提交\n\n在[`git reset`](https://jinbilianshao.github.io/wikicode/wiki/7-%E5%9B%9E%E6%BB%9A%E9%94%99%E8%AF%AF%E7%9A%84%E4%BF%AE%E6%94%B9/)这节中，我们说过永远不要重设和其他开发者共享的提交。对于修复也是一样：永远不要修复一个已经推送到公共仓库中的提交。\n\n修复过的提交事实上是全新的提交，之前的提交会被移除出项目历史。这和重设公共快照的后果是一样的。如果你修复了其他开发者在之后继续开发的一个提交，看上去他们的工作基础从项目历史中消失了一样。对于在这上面的开发者来说这是很困惑的，而且很难恢复。\n\n### 栗子\n\n下面这个🌰展示了 Git 开发工作流中的一个常见情形。我们编辑了一些希望在同一个快照中提交的文件，但我们忘记添加了其中的一个。修复错误只需要缓存那个文件并且用 `--amend` 标记提交：\n\n```\n# 编辑 hello.py 和 main.py\ngit add hello.py\ngit commit\n\n# 意识到你忘记添加 main.py 的更改\ngit add main.py\ngit commit --amend --no-edit\n```\n\n编辑器会弹出上一次提交的信息，加入 `--no-edit` 标记会修复提交但不修改提交信息。需要的话你可以修改，不然的话就像往常一样保存并关闭文件。完整的提交会替换之前不完整的提交，看上去就像我们在同一个快照中提交了 `hello.py` 和 `main.py`。\n\n## git rebase\n\n变基（rebase, 事实上这个名字十分诡异, 所以在大多数时候直接用英文术语）是将分支移到一个新的基提交的过程。过程一般如下所示：\n\n![Git Tutorial: Rebase to maintain a linear project history.](https://wac-cdn.atlassian.com/dam/jcr:e4a40899-636b-4988-9774-eaa8a440575b/02.svg)\n\n从内容的角度来看，rebase 只不过是将分支从一个提交移到了另一个。但从内部机制来看，Git 是通过在选定的基上创建新提交来完成这件事的——它事实上重写了你的项目历史。理解这一点很重要，尽管分支看上去是一样的，但它包含了全新的提交。\n\n### 用法\n\n```\ngit rebase <base>\n```\n\n将当前分支 rebase 到 `<base>`，这里可以是任何类型的提交引用（ID、分支名、标签，或是 `HEAD` 的相对引用）。\n\n### 讨论\n\nrebase 的主要目的是为了保持一个线性的项目历史。比如说，当你在 feature 分支工作时 master 分支取得了一些进展：\n\n![Git Rebase Branch onto Master](https://wac-cdn.atlassian.com/dam/jcr:d3b2abde-d06a-47b6-8955-5f3ef34e0237/03.svg)\n\n要将你的 feature 分支整合进 `master` 分支，你有两个选择：直接 merge，或者先 rebase 后 merge。前者会产生一个三路合并（3-way merge）和一个合并提交，而后者产生的是一个快速向前的合并以及完美的线性历史。下图展示了为什么 rebase 到 `master` 分支会促成一个快速向前的合并。\n\n![Git Tutorial: Fast-forward merge](https://www.atlassian.com/git/images/tutorials/getting-started/rewriting-history/04.svg)\n\nrebase 是将上游更改合并进本地仓库的通常方法。你每次想查看上游进展时，用 `git merge` 拉取上游更新会导致一个多余的合并提交。在另一方面，rebase 就好像是说「我想将我的更改建立在其他人的进展之上」。\n\n#### 不要 rebase 公共历史\n\n和我们讨论过的 `git commit --amend` 和 `git reset` 一样，你永远不应该 rebase 那些已经推送到公共仓库的提交。rebase 会用新的提交替换旧的提交，你的项目历史会像突然消失了一样。\n\n### 栗子\n\n下面这个🌰同时使用 git rebase 和 git merge 来保持线性的项目历史。这是一个确认你的合并都是快速向前的方法。\n\n```\n# 开始新的功能分支\ngit checkout -b new-feature master\n# 编辑文件\ngit commit -a -m \"Start developing a feature\"\n```\n\n在 feature 分支开发了一半的时候，我们意识到项目中有一个安全漏洞:\n\n```\n# 基于master分支创建一个快速修复分支\ngit checkout -b hotfix master\n# 编辑文件\ngit commit -a -m \"Fix security hole\"\n# 合并回master\ngit checkout master\ngit merge hotfix\ngit branch -d hotfix\n```\n\n将 hotfix 分支并回之后 master，我们有了一个分叉的项目历史。我们用 rebase 整合 feature 分支以获得线性的历史，而不是使用普通的 git merge。\n\n```\ngit checkout new-feature\ngit rebase master\n```\n\n它将 new-feature 分支移到了 master 分支的末端，现在我们可以在 master 上进行标准的快速向前合并了:\n\n```\ngit checkout master\ngit merge new-feature\n```\n\n## git rebase -i\n\n用 `-i` 标记运行 `git rebase` 开始交互式 rebase。交互式 rebase 给你在过程中修改单个提交的机会，而不是盲目地将所有提交都移到新的基上。你可以移除、分割提交，更改提交的顺序。它就像是打了鸡血的 `git commit --amend` 一样。\n\n### 用法\n\n```\ngit rebase -i <base>\n```\n\n将当前分支 rebase 到 `base`，但使用可交互的形式。它会打开一个编辑器，你可以为每个将要 rebase 的提交输入命令（见后文）。这些命令决定了每个提交将会怎样被转移到新的基上去。你还可以对这些提交进行排序。\n\n### 讨论\n\n交互式 rebase 给你了控制项目历史的完全掌控。它给了开发人员很大的自由，因为他们可以提交一个「混乱」的历史而只需专注于写代码，然后回去恢复干净。\n\n大多数开发者喜欢在并入主代码库之前用交互式 rebase 来完善他们的 feature 分支。他们可以将不重要的提交合在一起，删除不需要的，确保所有东西在提交到「正式」的项目历史前都是整齐的。对其他人来说，这个功能的开发看上去是由一系列精心安排的提交组成的。\n\n### 栗子\n\n下面这个🌰是 `非交互式rebase` 一节中🌰的可交互升级版本。\n\n```\n# 开始新的功能分支\ngit checkout -b new-feature master\n# 编辑文件\ngit commit -a -m \"Start developing a feature\"\n# 编辑更多文件\ngit commit -a -m \"Fix something from the previous commit\"\n\n# 直接在 master 上添加文件\ngit checkout master\n# 编辑文件\ngit commit -a -m \"Fix security hole\"\n\n# 开始交互式 rebase\ngit checkout new-feature\ngit rebase -i master\n```\n\n最后的那个命令会打开一个编辑器，包含 new-feature 的两个提交，和一些指示：\n\n```\npick 32618c4 Start developing a feature\npick 62eed47 Fix something from the previous commit\n```\n\n你可以更改每个提交前的 pick 命令来决定在 rebase 时提交移动的方式。在我们的例子中，我们只需要用 squash 命令把两个提交并在一起就可以了：\n\n```\npick 32618c4 Start developing a feature\nsquash 62eed47 Fix something from the previous commit\n```\n\n保存并关闭编辑器以开始 rebase。另一个编辑器会打开，询问你合并后的快照的提交信息。在定义了提交信息之后，rebase 就完成了，你可以在 `git log` 输出中看到那个提交。整个过程可以用下图可视化：\n\n![Git Tutorial: git rebase -i example](https://www.atlassian.com/git/images/tutorials/getting-started/rewriting-history/05.svg)\n\n注意缩并的提交和原来的两个提交的 ID 都不一样，告诉我们这确实是个新的提交。\n\n最后，你可以执行一个快速向前的合并，来将完善的 feature 分支整合进主代码库：\n\n```\ngit checkout master\ngit merge new-feature\n```\n\n交互式 rebase 强大的能力可以从整合后的 master 分支看出——额外的 `62eed47` 提交找不到了。对其他人来说，你就像是一个天才，用完美数量的提交完成了 `new-feature`。这就是交互式提交如何保持项目历史干净和合意。\n\n## git reflog\n\nGit 用引用日志这种机制来记录分支顶端的更新。它允许你回到那些不被任何分支或标签引用的更改。在重写历史后，引用日志包含了分支旧状态的信息，有需要的话你可以回到这个状态。\n\n### 用法\n\n```\ngit reflog\n```\n\n显示本地仓库的引用日志。\n\n```\ngit reflog --relative-date\n```\n\n用相对的日期显示引用日志。(如 2 周前）。\n\n### 讨论\n\n每次当前的 HEAD 更新时（如切换分支、拉取新更改、重写历史或只是添加新的提交），引用日志都会添加一个新条目。\n\n### 栗子\n\n为了理解 `git reflog`，我们来看一个🌰。\n\n```\n0a2e358 HEAD@{0}: reset: moving to HEAD~2\n0254ea7 HEAD@{1}: checkout: moving from 2.2 to master\nc10f740 HEAD@{2}: checkout: moving from master to 2.2\n```\n\n上面的引用日志显示了 master 和 2.2 的 branch 之间的相互切换。还有对一个更老的提交的强制重设。最近的活动用 `HEAD@{0}` 标记在上方显示。\n\n如果事实上你是不小心切换回去的，引用日志包含了你意外地丢掉两个提交之前 master 指向的提交 0254ea7。\n\n```\ngit reset --hard 0254ea7\n```\n\n使用 [`git reset`](https://jinbilianshao.github.io/wikicode/wiki/7-%E5%9B%9E%E6%BB%9A%E9%94%99%E8%AF%AF%E7%9A%84%E4%BF%AE%E6%94%B9/)，就有可能能将master变回之前的那个提交。它提供了一张安全网，以防历史发生意外更改。\n\n务必记住，引用日志提供的安全网只对提交到本地仓库的更改有效，而且只有移动操作会被记录。\n\n> 这篇文章参考于[**「git-recipes」**](https://github.com/geeeeeeeeek/git-recipes/)","slug":"8-重写项目历史","published":1,"updated":"2023-03-01T15:06:52.642Z","_id":"clifr2v1s001714uogjzd051n","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"重写项目历史\"><a href=\"#重写项目历史\" class=\"headerlink\" title=\"重写项目历史\"></a>重写项目历史</h1><h2 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h2><p>Git 的主要职责是保证你不会丢失提交的修改。但是，它同样被设计成让你完全掌控开发工作流。这包括了让你自定义你的项目历史，而这也创造了丢失提交的可能性。Git 提供了可以重写项目历史的命令，但也警告你这些命令可能会让你丢失内容。</p>\n<p>这份教程讨论了重写提交快照的一些常见原因，并告诉你如何避免不好的影响。</p>\n<h2 id=\"git-commit-–amend\"><a href=\"#git-commit-–amend\" class=\"headerlink\" title=\"git commit –amend\"></a>git commit –amend</h2><p><code>git commit --amend</code> 命令是修复最新提交的便捷方式。它允许你将缓存的修改和之前的提交合并到一起，而不是提交一个全新的快照。它还可以用来简单地编辑上一次提交的信息而不改变快照。</p>\n<p><img src=\"https://wac-cdn.atlassian.com/dam/jcr:a4de784b-3572-4d23-8c68-cea9ad4f205f/01.svg\" alt=\"Git Tutorial: git commit --amend\"></p>\n<p>但是，amend 不只是修改了最新的提交——它进行了一次替换。对于 Git 来说，这看上去像一个全新的提交，即上图中用星号表示的那一个。在公共仓库工作时一定要牢记这一点。</p>\n<h3 id=\"用法\"><a href=\"#用法\" class=\"headerlink\" title=\"用法\"></a>用法</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git commit --amend</span><br></pre></td></tr></table></figure>\n\n<p>合并缓存的修改和上一次的提交，用新的快照替换上一个提交。缓存区没有文件时运行这个命令可以用来编辑上次提交的提交信息，而不会更改快照。</p>\n<h3 id=\"讨论\"><a href=\"#讨论\" class=\"headerlink\" title=\"讨论\"></a>讨论</h3><p>仓促的提交在你日常开发过程中时常会发生。很容易就忘记了缓存一个文件或者弄错了提交信息的格式。<code>--amend</code> 标记是修复这些小意外的便捷方式。</p>\n<h4 id=\"不要修复公共提交\"><a href=\"#不要修复公共提交\" class=\"headerlink\" title=\"不要修复公共提交\"></a>不要修复公共提交</h4><p>在<a href=\"https://jinbilianshao.github.io/wikicode/wiki/7-%E5%9B%9E%E6%BB%9A%E9%94%99%E8%AF%AF%E7%9A%84%E4%BF%AE%E6%94%B9/\"><code>git reset</code></a>这节中，我们说过永远不要重设和其他开发者共享的提交。对于修复也是一样：永远不要修复一个已经推送到公共仓库中的提交。</p>\n<p>修复过的提交事实上是全新的提交，之前的提交会被移除出项目历史。这和重设公共快照的后果是一样的。如果你修复了其他开发者在之后继续开发的一个提交，看上去他们的工作基础从项目历史中消失了一样。对于在这上面的开发者来说这是很困惑的，而且很难恢复。</p>\n<h3 id=\"栗子\"><a href=\"#栗子\" class=\"headerlink\" title=\"栗子\"></a>栗子</h3><p>下面这个🌰展示了 Git 开发工作流中的一个常见情形。我们编辑了一些希望在同一个快照中提交的文件，但我们忘记添加了其中的一个。修复错误只需要缓存那个文件并且用 <code>--amend</code> 标记提交：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 编辑 hello.py 和 main.py</span><br><span class=\"line\">git add hello.py</span><br><span class=\"line\">git commit</span><br><span class=\"line\"></span><br><span class=\"line\"># 意识到你忘记添加 main.py 的更改</span><br><span class=\"line\">git add main.py</span><br><span class=\"line\">git commit --amend --no-edit</span><br></pre></td></tr></table></figure>\n\n<p>编辑器会弹出上一次提交的信息，加入 <code>--no-edit</code> 标记会修复提交但不修改提交信息。需要的话你可以修改，不然的话就像往常一样保存并关闭文件。完整的提交会替换之前不完整的提交，看上去就像我们在同一个快照中提交了 <code>hello.py</code> 和 <code>main.py</code>。</p>\n<h2 id=\"git-rebase\"><a href=\"#git-rebase\" class=\"headerlink\" title=\"git rebase\"></a>git rebase</h2><p>变基（rebase, 事实上这个名字十分诡异, 所以在大多数时候直接用英文术语）是将分支移到一个新的基提交的过程。过程一般如下所示：</p>\n<p><img src=\"https://wac-cdn.atlassian.com/dam/jcr:e4a40899-636b-4988-9774-eaa8a440575b/02.svg\" alt=\"Git Tutorial: Rebase to maintain a linear project history.\"></p>\n<p>从内容的角度来看，rebase 只不过是将分支从一个提交移到了另一个。但从内部机制来看，Git 是通过在选定的基上创建新提交来完成这件事的——它事实上重写了你的项目历史。理解这一点很重要，尽管分支看上去是一样的，但它包含了全新的提交。</p>\n<h3 id=\"用法-1\"><a href=\"#用法-1\" class=\"headerlink\" title=\"用法\"></a>用法</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git rebase &lt;base&gt;</span><br></pre></td></tr></table></figure>\n\n<p>将当前分支 rebase 到 <code>&lt;base&gt;</code>，这里可以是任何类型的提交引用（ID、分支名、标签，或是 <code>HEAD</code> 的相对引用）。</p>\n<h3 id=\"讨论-1\"><a href=\"#讨论-1\" class=\"headerlink\" title=\"讨论\"></a>讨论</h3><p>rebase 的主要目的是为了保持一个线性的项目历史。比如说，当你在 feature 分支工作时 master 分支取得了一些进展：</p>\n<p><img src=\"https://wac-cdn.atlassian.com/dam/jcr:d3b2abde-d06a-47b6-8955-5f3ef34e0237/03.svg\" alt=\"Git Rebase Branch onto Master\"></p>\n<p>要将你的 feature 分支整合进 <code>master</code> 分支，你有两个选择：直接 merge，或者先 rebase 后 merge。前者会产生一个三路合并（3-way merge）和一个合并提交，而后者产生的是一个快速向前的合并以及完美的线性历史。下图展示了为什么 rebase 到 <code>master</code> 分支会促成一个快速向前的合并。</p>\n<p><img src=\"https://www.atlassian.com/git/images/tutorials/getting-started/rewriting-history/04.svg\" alt=\"Git Tutorial: Fast-forward merge\"></p>\n<p>rebase 是将上游更改合并进本地仓库的通常方法。你每次想查看上游进展时，用 <code>git merge</code> 拉取上游更新会导致一个多余的合并提交。在另一方面，rebase 就好像是说「我想将我的更改建立在其他人的进展之上」。</p>\n<h4 id=\"不要-rebase-公共历史\"><a href=\"#不要-rebase-公共历史\" class=\"headerlink\" title=\"不要 rebase 公共历史\"></a>不要 rebase 公共历史</h4><p>和我们讨论过的 <code>git commit --amend</code> 和 <code>git reset</code> 一样，你永远不应该 rebase 那些已经推送到公共仓库的提交。rebase 会用新的提交替换旧的提交，你的项目历史会像突然消失了一样。</p>\n<h3 id=\"栗子-1\"><a href=\"#栗子-1\" class=\"headerlink\" title=\"栗子\"></a>栗子</h3><p>下面这个🌰同时使用 git rebase 和 git merge 来保持线性的项目历史。这是一个确认你的合并都是快速向前的方法。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 开始新的功能分支</span><br><span class=\"line\">git checkout -b new-feature master</span><br><span class=\"line\"># 编辑文件</span><br><span class=\"line\">git commit -a -m &quot;Start developing a feature&quot;</span><br></pre></td></tr></table></figure>\n\n<p>在 feature 分支开发了一半的时候，我们意识到项目中有一个安全漏洞:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 基于master分支创建一个快速修复分支</span><br><span class=\"line\">git checkout -b hotfix master</span><br><span class=\"line\"># 编辑文件</span><br><span class=\"line\">git commit -a -m &quot;Fix security hole&quot;</span><br><span class=\"line\"># 合并回master</span><br><span class=\"line\">git checkout master</span><br><span class=\"line\">git merge hotfix</span><br><span class=\"line\">git branch -d hotfix</span><br></pre></td></tr></table></figure>\n\n<p>将 hotfix 分支并回之后 master，我们有了一个分叉的项目历史。我们用 rebase 整合 feature 分支以获得线性的历史，而不是使用普通的 git merge。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout new-feature</span><br><span class=\"line\">git rebase master</span><br></pre></td></tr></table></figure>\n\n<p>它将 new-feature 分支移到了 master 分支的末端，现在我们可以在 master 上进行标准的快速向前合并了:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout master</span><br><span class=\"line\">git merge new-feature</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"git-rebase-i\"><a href=\"#git-rebase-i\" class=\"headerlink\" title=\"git rebase -i\"></a>git rebase -i</h2><p>用 <code>-i</code> 标记运行 <code>git rebase</code> 开始交互式 rebase。交互式 rebase 给你在过程中修改单个提交的机会，而不是盲目地将所有提交都移到新的基上。你可以移除、分割提交，更改提交的顺序。它就像是打了鸡血的 <code>git commit --amend</code> 一样。</p>\n<h3 id=\"用法-2\"><a href=\"#用法-2\" class=\"headerlink\" title=\"用法\"></a>用法</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git rebase -i &lt;base&gt;</span><br></pre></td></tr></table></figure>\n\n<p>将当前分支 rebase 到 <code>base</code>，但使用可交互的形式。它会打开一个编辑器，你可以为每个将要 rebase 的提交输入命令（见后文）。这些命令决定了每个提交将会怎样被转移到新的基上去。你还可以对这些提交进行排序。</p>\n<h3 id=\"讨论-2\"><a href=\"#讨论-2\" class=\"headerlink\" title=\"讨论\"></a>讨论</h3><p>交互式 rebase 给你了控制项目历史的完全掌控。它给了开发人员很大的自由，因为他们可以提交一个「混乱」的历史而只需专注于写代码，然后回去恢复干净。</p>\n<p>大多数开发者喜欢在并入主代码库之前用交互式 rebase 来完善他们的 feature 分支。他们可以将不重要的提交合在一起，删除不需要的，确保所有东西在提交到「正式」的项目历史前都是整齐的。对其他人来说，这个功能的开发看上去是由一系列精心安排的提交组成的。</p>\n<h3 id=\"栗子-2\"><a href=\"#栗子-2\" class=\"headerlink\" title=\"栗子\"></a>栗子</h3><p>下面这个🌰是 <code>非交互式rebase</code> 一节中🌰的可交互升级版本。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 开始新的功能分支</span><br><span class=\"line\">git checkout -b new-feature master</span><br><span class=\"line\"># 编辑文件</span><br><span class=\"line\">git commit -a -m &quot;Start developing a feature&quot;</span><br><span class=\"line\"># 编辑更多文件</span><br><span class=\"line\">git commit -a -m &quot;Fix something from the previous commit&quot;</span><br><span class=\"line\"></span><br><span class=\"line\"># 直接在 master 上添加文件</span><br><span class=\"line\">git checkout master</span><br><span class=\"line\"># 编辑文件</span><br><span class=\"line\">git commit -a -m &quot;Fix security hole&quot;</span><br><span class=\"line\"></span><br><span class=\"line\"># 开始交互式 rebase</span><br><span class=\"line\">git checkout new-feature</span><br><span class=\"line\">git rebase -i master</span><br></pre></td></tr></table></figure>\n\n<p>最后的那个命令会打开一个编辑器，包含 new-feature 的两个提交，和一些指示：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pick 32618c4 Start developing a feature</span><br><span class=\"line\">pick 62eed47 Fix something from the previous commit</span><br></pre></td></tr></table></figure>\n\n<p>你可以更改每个提交前的 pick 命令来决定在 rebase 时提交移动的方式。在我们的例子中，我们只需要用 squash 命令把两个提交并在一起就可以了：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pick 32618c4 Start developing a feature</span><br><span class=\"line\">squash 62eed47 Fix something from the previous commit</span><br></pre></td></tr></table></figure>\n\n<p>保存并关闭编辑器以开始 rebase。另一个编辑器会打开，询问你合并后的快照的提交信息。在定义了提交信息之后，rebase 就完成了，你可以在 <code>git log</code> 输出中看到那个提交。整个过程可以用下图可视化：</p>\n<p><img src=\"https://www.atlassian.com/git/images/tutorials/getting-started/rewriting-history/05.svg\" alt=\"Git Tutorial: git rebase -i example\"></p>\n<p>注意缩并的提交和原来的两个提交的 ID 都不一样，告诉我们这确实是个新的提交。</p>\n<p>最后，你可以执行一个快速向前的合并，来将完善的 feature 分支整合进主代码库：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout master</span><br><span class=\"line\">git merge new-feature</span><br></pre></td></tr></table></figure>\n\n<p>交互式 rebase 强大的能力可以从整合后的 master 分支看出——额外的 <code>62eed47</code> 提交找不到了。对其他人来说，你就像是一个天才，用完美数量的提交完成了 <code>new-feature</code>。这就是交互式提交如何保持项目历史干净和合意。</p>\n<h2 id=\"git-reflog\"><a href=\"#git-reflog\" class=\"headerlink\" title=\"git reflog\"></a>git reflog</h2><p>Git 用引用日志这种机制来记录分支顶端的更新。它允许你回到那些不被任何分支或标签引用的更改。在重写历史后，引用日志包含了分支旧状态的信息，有需要的话你可以回到这个状态。</p>\n<h3 id=\"用法-3\"><a href=\"#用法-3\" class=\"headerlink\" title=\"用法\"></a>用法</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git reflog</span><br></pre></td></tr></table></figure>\n\n<p>显示本地仓库的引用日志。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git reflog --relative-date</span><br></pre></td></tr></table></figure>\n\n<p>用相对的日期显示引用日志。(如 2 周前）。</p>\n<h3 id=\"讨论-3\"><a href=\"#讨论-3\" class=\"headerlink\" title=\"讨论\"></a>讨论</h3><p>每次当前的 HEAD 更新时（如切换分支、拉取新更改、重写历史或只是添加新的提交），引用日志都会添加一个新条目。</p>\n<h3 id=\"栗子-3\"><a href=\"#栗子-3\" class=\"headerlink\" title=\"栗子\"></a>栗子</h3><p>为了理解 <code>git reflog</code>，我们来看一个🌰。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">0a2e358 HEAD@&#123;0&#125;: reset: moving to HEAD~2</span><br><span class=\"line\">0254ea7 HEAD@&#123;1&#125;: checkout: moving from 2.2 to master</span><br><span class=\"line\">c10f740 HEAD@&#123;2&#125;: checkout: moving from master to 2.2</span><br></pre></td></tr></table></figure>\n\n<p>上面的引用日志显示了 master 和 2.2 的 branch 之间的相互切换。还有对一个更老的提交的强制重设。最近的活动用 <code>HEAD@&#123;0&#125;</code> 标记在上方显示。</p>\n<p>如果事实上你是不小心切换回去的，引用日志包含了你意外地丢掉两个提交之前 master 指向的提交 0254ea7。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git reset --hard 0254ea7</span><br></pre></td></tr></table></figure>\n\n<p>使用 <a href=\"https://jinbilianshao.github.io/wikicode/wiki/7-%E5%9B%9E%E6%BB%9A%E9%94%99%E8%AF%AF%E7%9A%84%E4%BF%AE%E6%94%B9/\"><code>git reset</code></a>，就有可能能将master变回之前的那个提交。它提供了一张安全网，以防历史发生意外更改。</p>\n<p>务必记住，引用日志提供的安全网只对提交到本地仓库的更改有效，而且只有移动操作会被记录。</p>\n<blockquote>\n<p>这篇文章参考于<a href=\"https://github.com/geeeeeeeeek/git-recipes/\"><strong>「git-recipes」</strong></a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"重写项目历史\"><a href=\"#重写项目历史\" class=\"headerlink\" title=\"重写项目历史\"></a>重写项目历史</h1><h2 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h2><p>Git 的主要职责是保证你不会丢失提交的修改。但是，它同样被设计成让你完全掌控开发工作流。这包括了让你自定义你的项目历史，而这也创造了丢失提交的可能性。Git 提供了可以重写项目历史的命令，但也警告你这些命令可能会让你丢失内容。</p>\n<p>这份教程讨论了重写提交快照的一些常见原因，并告诉你如何避免不好的影响。</p>\n<h2 id=\"git-commit-–amend\"><a href=\"#git-commit-–amend\" class=\"headerlink\" title=\"git commit –amend\"></a>git commit –amend</h2><p><code>git commit --amend</code> 命令是修复最新提交的便捷方式。它允许你将缓存的修改和之前的提交合并到一起，而不是提交一个全新的快照。它还可以用来简单地编辑上一次提交的信息而不改变快照。</p>\n<p><img src=\"https://wac-cdn.atlassian.com/dam/jcr:a4de784b-3572-4d23-8c68-cea9ad4f205f/01.svg\" alt=\"Git Tutorial: git commit --amend\"></p>\n<p>但是，amend 不只是修改了最新的提交——它进行了一次替换。对于 Git 来说，这看上去像一个全新的提交，即上图中用星号表示的那一个。在公共仓库工作时一定要牢记这一点。</p>\n<h3 id=\"用法\"><a href=\"#用法\" class=\"headerlink\" title=\"用法\"></a>用法</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git commit --amend</span><br></pre></td></tr></table></figure>\n\n<p>合并缓存的修改和上一次的提交，用新的快照替换上一个提交。缓存区没有文件时运行这个命令可以用来编辑上次提交的提交信息，而不会更改快照。</p>\n<h3 id=\"讨论\"><a href=\"#讨论\" class=\"headerlink\" title=\"讨论\"></a>讨论</h3><p>仓促的提交在你日常开发过程中时常会发生。很容易就忘记了缓存一个文件或者弄错了提交信息的格式。<code>--amend</code> 标记是修复这些小意外的便捷方式。</p>\n<h4 id=\"不要修复公共提交\"><a href=\"#不要修复公共提交\" class=\"headerlink\" title=\"不要修复公共提交\"></a>不要修复公共提交</h4><p>在<a href=\"https://jinbilianshao.github.io/wikicode/wiki/7-%E5%9B%9E%E6%BB%9A%E9%94%99%E8%AF%AF%E7%9A%84%E4%BF%AE%E6%94%B9/\"><code>git reset</code></a>这节中，我们说过永远不要重设和其他开发者共享的提交。对于修复也是一样：永远不要修复一个已经推送到公共仓库中的提交。</p>\n<p>修复过的提交事实上是全新的提交，之前的提交会被移除出项目历史。这和重设公共快照的后果是一样的。如果你修复了其他开发者在之后继续开发的一个提交，看上去他们的工作基础从项目历史中消失了一样。对于在这上面的开发者来说这是很困惑的，而且很难恢复。</p>\n<h3 id=\"栗子\"><a href=\"#栗子\" class=\"headerlink\" title=\"栗子\"></a>栗子</h3><p>下面这个🌰展示了 Git 开发工作流中的一个常见情形。我们编辑了一些希望在同一个快照中提交的文件，但我们忘记添加了其中的一个。修复错误只需要缓存那个文件并且用 <code>--amend</code> 标记提交：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 编辑 hello.py 和 main.py</span><br><span class=\"line\">git add hello.py</span><br><span class=\"line\">git commit</span><br><span class=\"line\"></span><br><span class=\"line\"># 意识到你忘记添加 main.py 的更改</span><br><span class=\"line\">git add main.py</span><br><span class=\"line\">git commit --amend --no-edit</span><br></pre></td></tr></table></figure>\n\n<p>编辑器会弹出上一次提交的信息，加入 <code>--no-edit</code> 标记会修复提交但不修改提交信息。需要的话你可以修改，不然的话就像往常一样保存并关闭文件。完整的提交会替换之前不完整的提交，看上去就像我们在同一个快照中提交了 <code>hello.py</code> 和 <code>main.py</code>。</p>\n<h2 id=\"git-rebase\"><a href=\"#git-rebase\" class=\"headerlink\" title=\"git rebase\"></a>git rebase</h2><p>变基（rebase, 事实上这个名字十分诡异, 所以在大多数时候直接用英文术语）是将分支移到一个新的基提交的过程。过程一般如下所示：</p>\n<p><img src=\"https://wac-cdn.atlassian.com/dam/jcr:e4a40899-636b-4988-9774-eaa8a440575b/02.svg\" alt=\"Git Tutorial: Rebase to maintain a linear project history.\"></p>\n<p>从内容的角度来看，rebase 只不过是将分支从一个提交移到了另一个。但从内部机制来看，Git 是通过在选定的基上创建新提交来完成这件事的——它事实上重写了你的项目历史。理解这一点很重要，尽管分支看上去是一样的，但它包含了全新的提交。</p>\n<h3 id=\"用法-1\"><a href=\"#用法-1\" class=\"headerlink\" title=\"用法\"></a>用法</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git rebase &lt;base&gt;</span><br></pre></td></tr></table></figure>\n\n<p>将当前分支 rebase 到 <code>&lt;base&gt;</code>，这里可以是任何类型的提交引用（ID、分支名、标签，或是 <code>HEAD</code> 的相对引用）。</p>\n<h3 id=\"讨论-1\"><a href=\"#讨论-1\" class=\"headerlink\" title=\"讨论\"></a>讨论</h3><p>rebase 的主要目的是为了保持一个线性的项目历史。比如说，当你在 feature 分支工作时 master 分支取得了一些进展：</p>\n<p><img src=\"https://wac-cdn.atlassian.com/dam/jcr:d3b2abde-d06a-47b6-8955-5f3ef34e0237/03.svg\" alt=\"Git Rebase Branch onto Master\"></p>\n<p>要将你的 feature 分支整合进 <code>master</code> 分支，你有两个选择：直接 merge，或者先 rebase 后 merge。前者会产生一个三路合并（3-way merge）和一个合并提交，而后者产生的是一个快速向前的合并以及完美的线性历史。下图展示了为什么 rebase 到 <code>master</code> 分支会促成一个快速向前的合并。</p>\n<p><img src=\"https://www.atlassian.com/git/images/tutorials/getting-started/rewriting-history/04.svg\" alt=\"Git Tutorial: Fast-forward merge\"></p>\n<p>rebase 是将上游更改合并进本地仓库的通常方法。你每次想查看上游进展时，用 <code>git merge</code> 拉取上游更新会导致一个多余的合并提交。在另一方面，rebase 就好像是说「我想将我的更改建立在其他人的进展之上」。</p>\n<h4 id=\"不要-rebase-公共历史\"><a href=\"#不要-rebase-公共历史\" class=\"headerlink\" title=\"不要 rebase 公共历史\"></a>不要 rebase 公共历史</h4><p>和我们讨论过的 <code>git commit --amend</code> 和 <code>git reset</code> 一样，你永远不应该 rebase 那些已经推送到公共仓库的提交。rebase 会用新的提交替换旧的提交，你的项目历史会像突然消失了一样。</p>\n<h3 id=\"栗子-1\"><a href=\"#栗子-1\" class=\"headerlink\" title=\"栗子\"></a>栗子</h3><p>下面这个🌰同时使用 git rebase 和 git merge 来保持线性的项目历史。这是一个确认你的合并都是快速向前的方法。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 开始新的功能分支</span><br><span class=\"line\">git checkout -b new-feature master</span><br><span class=\"line\"># 编辑文件</span><br><span class=\"line\">git commit -a -m &quot;Start developing a feature&quot;</span><br></pre></td></tr></table></figure>\n\n<p>在 feature 分支开发了一半的时候，我们意识到项目中有一个安全漏洞:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 基于master分支创建一个快速修复分支</span><br><span class=\"line\">git checkout -b hotfix master</span><br><span class=\"line\"># 编辑文件</span><br><span class=\"line\">git commit -a -m &quot;Fix security hole&quot;</span><br><span class=\"line\"># 合并回master</span><br><span class=\"line\">git checkout master</span><br><span class=\"line\">git merge hotfix</span><br><span class=\"line\">git branch -d hotfix</span><br></pre></td></tr></table></figure>\n\n<p>将 hotfix 分支并回之后 master，我们有了一个分叉的项目历史。我们用 rebase 整合 feature 分支以获得线性的历史，而不是使用普通的 git merge。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout new-feature</span><br><span class=\"line\">git rebase master</span><br></pre></td></tr></table></figure>\n\n<p>它将 new-feature 分支移到了 master 分支的末端，现在我们可以在 master 上进行标准的快速向前合并了:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout master</span><br><span class=\"line\">git merge new-feature</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"git-rebase-i\"><a href=\"#git-rebase-i\" class=\"headerlink\" title=\"git rebase -i\"></a>git rebase -i</h2><p>用 <code>-i</code> 标记运行 <code>git rebase</code> 开始交互式 rebase。交互式 rebase 给你在过程中修改单个提交的机会，而不是盲目地将所有提交都移到新的基上。你可以移除、分割提交，更改提交的顺序。它就像是打了鸡血的 <code>git commit --amend</code> 一样。</p>\n<h3 id=\"用法-2\"><a href=\"#用法-2\" class=\"headerlink\" title=\"用法\"></a>用法</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git rebase -i &lt;base&gt;</span><br></pre></td></tr></table></figure>\n\n<p>将当前分支 rebase 到 <code>base</code>，但使用可交互的形式。它会打开一个编辑器，你可以为每个将要 rebase 的提交输入命令（见后文）。这些命令决定了每个提交将会怎样被转移到新的基上去。你还可以对这些提交进行排序。</p>\n<h3 id=\"讨论-2\"><a href=\"#讨论-2\" class=\"headerlink\" title=\"讨论\"></a>讨论</h3><p>交互式 rebase 给你了控制项目历史的完全掌控。它给了开发人员很大的自由，因为他们可以提交一个「混乱」的历史而只需专注于写代码，然后回去恢复干净。</p>\n<p>大多数开发者喜欢在并入主代码库之前用交互式 rebase 来完善他们的 feature 分支。他们可以将不重要的提交合在一起，删除不需要的，确保所有东西在提交到「正式」的项目历史前都是整齐的。对其他人来说，这个功能的开发看上去是由一系列精心安排的提交组成的。</p>\n<h3 id=\"栗子-2\"><a href=\"#栗子-2\" class=\"headerlink\" title=\"栗子\"></a>栗子</h3><p>下面这个🌰是 <code>非交互式rebase</code> 一节中🌰的可交互升级版本。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 开始新的功能分支</span><br><span class=\"line\">git checkout -b new-feature master</span><br><span class=\"line\"># 编辑文件</span><br><span class=\"line\">git commit -a -m &quot;Start developing a feature&quot;</span><br><span class=\"line\"># 编辑更多文件</span><br><span class=\"line\">git commit -a -m &quot;Fix something from the previous commit&quot;</span><br><span class=\"line\"></span><br><span class=\"line\"># 直接在 master 上添加文件</span><br><span class=\"line\">git checkout master</span><br><span class=\"line\"># 编辑文件</span><br><span class=\"line\">git commit -a -m &quot;Fix security hole&quot;</span><br><span class=\"line\"></span><br><span class=\"line\"># 开始交互式 rebase</span><br><span class=\"line\">git checkout new-feature</span><br><span class=\"line\">git rebase -i master</span><br></pre></td></tr></table></figure>\n\n<p>最后的那个命令会打开一个编辑器，包含 new-feature 的两个提交，和一些指示：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pick 32618c4 Start developing a feature</span><br><span class=\"line\">pick 62eed47 Fix something from the previous commit</span><br></pre></td></tr></table></figure>\n\n<p>你可以更改每个提交前的 pick 命令来决定在 rebase 时提交移动的方式。在我们的例子中，我们只需要用 squash 命令把两个提交并在一起就可以了：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pick 32618c4 Start developing a feature</span><br><span class=\"line\">squash 62eed47 Fix something from the previous commit</span><br></pre></td></tr></table></figure>\n\n<p>保存并关闭编辑器以开始 rebase。另一个编辑器会打开，询问你合并后的快照的提交信息。在定义了提交信息之后，rebase 就完成了，你可以在 <code>git log</code> 输出中看到那个提交。整个过程可以用下图可视化：</p>\n<p><img src=\"https://www.atlassian.com/git/images/tutorials/getting-started/rewriting-history/05.svg\" alt=\"Git Tutorial: git rebase -i example\"></p>\n<p>注意缩并的提交和原来的两个提交的 ID 都不一样，告诉我们这确实是个新的提交。</p>\n<p>最后，你可以执行一个快速向前的合并，来将完善的 feature 分支整合进主代码库：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout master</span><br><span class=\"line\">git merge new-feature</span><br></pre></td></tr></table></figure>\n\n<p>交互式 rebase 强大的能力可以从整合后的 master 分支看出——额外的 <code>62eed47</code> 提交找不到了。对其他人来说，你就像是一个天才，用完美数量的提交完成了 <code>new-feature</code>。这就是交互式提交如何保持项目历史干净和合意。</p>\n<h2 id=\"git-reflog\"><a href=\"#git-reflog\" class=\"headerlink\" title=\"git reflog\"></a>git reflog</h2><p>Git 用引用日志这种机制来记录分支顶端的更新。它允许你回到那些不被任何分支或标签引用的更改。在重写历史后，引用日志包含了分支旧状态的信息，有需要的话你可以回到这个状态。</p>\n<h3 id=\"用法-3\"><a href=\"#用法-3\" class=\"headerlink\" title=\"用法\"></a>用法</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git reflog</span><br></pre></td></tr></table></figure>\n\n<p>显示本地仓库的引用日志。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git reflog --relative-date</span><br></pre></td></tr></table></figure>\n\n<p>用相对的日期显示引用日志。(如 2 周前）。</p>\n<h3 id=\"讨论-3\"><a href=\"#讨论-3\" class=\"headerlink\" title=\"讨论\"></a>讨论</h3><p>每次当前的 HEAD 更新时（如切换分支、拉取新更改、重写历史或只是添加新的提交），引用日志都会添加一个新条目。</p>\n<h3 id=\"栗子-3\"><a href=\"#栗子-3\" class=\"headerlink\" title=\"栗子\"></a>栗子</h3><p>为了理解 <code>git reflog</code>，我们来看一个🌰。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">0a2e358 HEAD@&#123;0&#125;: reset: moving to HEAD~2</span><br><span class=\"line\">0254ea7 HEAD@&#123;1&#125;: checkout: moving from 2.2 to master</span><br><span class=\"line\">c10f740 HEAD@&#123;2&#125;: checkout: moving from master to 2.2</span><br></pre></td></tr></table></figure>\n\n<p>上面的引用日志显示了 master 和 2.2 的 branch 之间的相互切换。还有对一个更老的提交的强制重设。最近的活动用 <code>HEAD@&#123;0&#125;</code> 标记在上方显示。</p>\n<p>如果事实上你是不小心切换回去的，引用日志包含了你意外地丢掉两个提交之前 master 指向的提交 0254ea7。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git reset --hard 0254ea7</span><br></pre></td></tr></table></figure>\n\n<p>使用 <a href=\"https://jinbilianshao.github.io/wikicode/wiki/7-%E5%9B%9E%E6%BB%9A%E9%94%99%E8%AF%AF%E7%9A%84%E4%BF%AE%E6%94%B9/\"><code>git reset</code></a>，就有可能能将master变回之前的那个提交。它提供了一张安全网，以防历史发生意外更改。</p>\n<p>务必记住，引用日志提供的安全网只对提交到本地仓库的更改有效，而且只有移动操作会被记录。</p>\n<blockquote>\n<p>这篇文章参考于<a href=\"https://github.com/geeeeeeeeek/git-recipes/\"><strong>「git-recipes」</strong></a></p>\n</blockquote>\n"},{"title":"9.为语言设定标准","author":"连思鑫","date":"2023-03-02T11:25:00.000Z","_content":"### 9.为语言设定标准\n\n#### 设置编译器选项\n\n---\n\n编程语言有不同的标准，即提供改进的语言版本。启用新标准是通过设置适当的编译器标志来实现的。\n前面的示例中，我们已经展示了如何为每个目标或全局进行配置。\n\n3.1版本中，CMake引入了一个独立于平台和编译器的机制，用于为 C++ 和 C 设置语言标准：为目标设置 <LANG>_STANDARD 属性。\n\n#### 具体实施\n\n----\n\n1. 声明最低要求的 CMake 版本，项目名称和语言\n\n   ``` cmake\n   cmake_minimum_required(VERSION 3.5)\n   project(download LIANGUAGES CXX)\n   ```\n\n2. 要求在 Windows 上导出所有库符号\n\n   ``` cmake\n   ser(CMAKE_WINDOWS_EXPORT_ALL_SYMBOLS ON)\n   ```\n\n3. 需要为库添加一个目标，这将编译源代码为一个动态库\n\n   ``` cmake\n   add_library(progressbar\n   \tSHARED\n   \tProgressBar.h\n   \tProgressBar.cpp\n   )\n   ```\n\n4. 现在，为目标设置了 CXX_STANDARD 、 CXX_EXTENSIONS 和 CXX_STANDARD_REQUIRED 属性。\n\n   还设置了 position_independent ent_code 属性，以避免在使用一些编译器构建 DSO 时出现问题\n\n   ``` cmake\n   set_target_properties(\n   \tPROPERTIES\n   \tCXX_STANDARD 14\n   \tCXX_EXTENSIONS OFF\n   \tCXX_STANDARD_REQUIRED ON\n   \tPOSITION_INDEPENDENT_CODE 1\n   )\n   ```\n\n5. 然后，为 download 的可执行文件添加一个新目标，并设置它的属性\n\n   ``` cmake \n   add_executable(download download.cpp)\n   set_target_properties(progressbar\n   \tPROPERTIES\n   \tCXX_STANDARD 14\n   \tCXX_EXTENSIONS OFF\n   \tCXX_STANDARD_REQUIRED ON\n   )\n   ```\n\n6. 最后，将可执行文件链接到库\n\n   ``` cmake\n   target_link_libraries(download progressbar)\n   ```\n\n#### 工作原理\n\n- CXX_STANDARD 会设置我们想要的标准。\n\n- CXX_EXTENSIONS 告诉 CMake，只启用 ISO C++ 标准的编译器标志，而不使用特定编译器的扩展。\n\n- CXX_STANDARD_REQUIRED 指定所选标准的版本。如果这个版本不可用，CMake将停止配置并出现错误。\n\n  当这个属性被设置为 OFF 时，CMake将寻找下一个标准的最新版本，直到一个合适的标志。\n\n  这意味着，首先查找 C++14 ，然后是 C++11 ，然后是 C++98 。\n","source":"_posts/9-为语言设定标准.md","raw":"title: 9.为语言设定标准\nauthor: 连思鑫\ntags:\n  - cmake\ncategories:\n  - ..\n  - cmake\n  - 第一章：从简单的可执行文件到库\ndate: 2023-03-02 19:25:00\n---\n### 9.为语言设定标准\n\n#### 设置编译器选项\n\n---\n\n编程语言有不同的标准，即提供改进的语言版本。启用新标准是通过设置适当的编译器标志来实现的。\n前面的示例中，我们已经展示了如何为每个目标或全局进行配置。\n\n3.1版本中，CMake引入了一个独立于平台和编译器的机制，用于为 C++ 和 C 设置语言标准：为目标设置 <LANG>_STANDARD 属性。\n\n#### 具体实施\n\n----\n\n1. 声明最低要求的 CMake 版本，项目名称和语言\n\n   ``` cmake\n   cmake_minimum_required(VERSION 3.5)\n   project(download LIANGUAGES CXX)\n   ```\n\n2. 要求在 Windows 上导出所有库符号\n\n   ``` cmake\n   ser(CMAKE_WINDOWS_EXPORT_ALL_SYMBOLS ON)\n   ```\n\n3. 需要为库添加一个目标，这将编译源代码为一个动态库\n\n   ``` cmake\n   add_library(progressbar\n   \tSHARED\n   \tProgressBar.h\n   \tProgressBar.cpp\n   )\n   ```\n\n4. 现在，为目标设置了 CXX_STANDARD 、 CXX_EXTENSIONS 和 CXX_STANDARD_REQUIRED 属性。\n\n   还设置了 position_independent ent_code 属性，以避免在使用一些编译器构建 DSO 时出现问题\n\n   ``` cmake\n   set_target_properties(\n   \tPROPERTIES\n   \tCXX_STANDARD 14\n   \tCXX_EXTENSIONS OFF\n   \tCXX_STANDARD_REQUIRED ON\n   \tPOSITION_INDEPENDENT_CODE 1\n   )\n   ```\n\n5. 然后，为 download 的可执行文件添加一个新目标，并设置它的属性\n\n   ``` cmake \n   add_executable(download download.cpp)\n   set_target_properties(progressbar\n   \tPROPERTIES\n   \tCXX_STANDARD 14\n   \tCXX_EXTENSIONS OFF\n   \tCXX_STANDARD_REQUIRED ON\n   )\n   ```\n\n6. 最后，将可执行文件链接到库\n\n   ``` cmake\n   target_link_libraries(download progressbar)\n   ```\n\n#### 工作原理\n\n- CXX_STANDARD 会设置我们想要的标准。\n\n- CXX_EXTENSIONS 告诉 CMake，只启用 ISO C++ 标准的编译器标志，而不使用特定编译器的扩展。\n\n- CXX_STANDARD_REQUIRED 指定所选标准的版本。如果这个版本不可用，CMake将停止配置并出现错误。\n\n  当这个属性被设置为 OFF 时，CMake将寻找下一个标准的最新版本，直到一个合适的标志。\n\n  这意味着，首先查找 C++14 ，然后是 C++11 ，然后是 C++98 。\n","slug":"9-为语言设定标准","published":1,"updated":"2023-03-02T11:26:53.000Z","_id":"clifr2v1t001b14uo0sa1301p","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"9-为语言设定标准\"><a href=\"#9-为语言设定标准\" class=\"headerlink\" title=\"9.为语言设定标准\"></a>9.为语言设定标准</h3><h4 id=\"设置编译器选项\"><a href=\"#设置编译器选项\" class=\"headerlink\" title=\"设置编译器选项\"></a>设置编译器选项</h4><hr>\n<p>编程语言有不同的标准，即提供改进的语言版本。启用新标准是通过设置适当的编译器标志来实现的。<br>前面的示例中，我们已经展示了如何为每个目标或全局进行配置。</p>\n<p>3.1版本中，CMake引入了一个独立于平台和编译器的机制，用于为 C++ 和 C 设置语言标准：为目标设置 <LANG>_STANDARD 属性。</p>\n<h4 id=\"具体实施\"><a href=\"#具体实施\" class=\"headerlink\" title=\"具体实施\"></a>具体实施</h4><hr>\n<ol>\n<li><p>声明最低要求的 CMake 版本，项目名称和语言</p>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">cmake_minimum_required</span>(VERSION <span class=\"number\">3.5</span>)</span><br><span class=\"line\"><span class=\"keyword\">project</span>(download LIANGUAGES CXX)</span><br></pre></td></tr></table></figure></li>\n<li><p>要求在 Windows 上导出所有库符号</p>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ser(CMAKE_WINDOWS_EXPORT_ALL_SYMBOLS <span class=\"keyword\">ON</span>)</span><br></pre></td></tr></table></figure></li>\n<li><p>需要为库添加一个目标，这将编译源代码为一个动态库</p>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">add_library</span>(progressbar</span><br><span class=\"line\">\tSHARED</span><br><span class=\"line\">\tProgressBar.h</span><br><span class=\"line\">\tProgressBar.cpp</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure></li>\n<li><p>现在，为目标设置了 CXX_STANDARD 、 CXX_EXTENSIONS 和 CXX_STANDARD_REQUIRED 属性。</p>\n<p>还设置了 position_independent ent_code 属性，以避免在使用一些编译器构建 DSO 时出现问题</p>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">set_target_properties</span>(</span><br><span class=\"line\">\tPROPERTIES</span><br><span class=\"line\">\tCXX_STANDARD <span class=\"number\">14</span></span><br><span class=\"line\">\tCXX_EXTENSIONS <span class=\"keyword\">OFF</span></span><br><span class=\"line\">\tCXX_STANDARD_REQUIRED <span class=\"keyword\">ON</span></span><br><span class=\"line\">\tPOSITION_INDEPENDENT_CODE <span class=\"number\">1</span></span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure></li>\n<li><p>然后，为 download 的可执行文件添加一个新目标，并设置它的属性</p>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">add_executable</span>(download download.cpp)</span><br><span class=\"line\"><span class=\"keyword\">set_target_properties</span>(progressbar</span><br><span class=\"line\">\tPROPERTIES</span><br><span class=\"line\">\tCXX_STANDARD <span class=\"number\">14</span></span><br><span class=\"line\">\tCXX_EXTENSIONS <span class=\"keyword\">OFF</span></span><br><span class=\"line\">\tCXX_STANDARD_REQUIRED <span class=\"keyword\">ON</span></span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure></li>\n<li><p>最后，将可执行文件链接到库</p>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">target_link_libraries</span>(download progressbar)</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h4 id=\"工作原理\"><a href=\"#工作原理\" class=\"headerlink\" title=\"工作原理\"></a>工作原理</h4><ul>\n<li><p>CXX_STANDARD 会设置我们想要的标准。</p>\n</li>\n<li><p>CXX_EXTENSIONS 告诉 CMake，只启用 ISO C++ 标准的编译器标志，而不使用特定编译器的扩展。</p>\n</li>\n<li><p>CXX_STANDARD_REQUIRED 指定所选标准的版本。如果这个版本不可用，CMake将停止配置并出现错误。</p>\n<p>当这个属性被设置为 OFF 时，CMake将寻找下一个标准的最新版本，直到一个合适的标志。</p>\n<p>这意味着，首先查找 C++14 ，然后是 C++11 ，然后是 C++98 。</p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"9-为语言设定标准\"><a href=\"#9-为语言设定标准\" class=\"headerlink\" title=\"9.为语言设定标准\"></a>9.为语言设定标准</h3><h4 id=\"设置编译器选项\"><a href=\"#设置编译器选项\" class=\"headerlink\" title=\"设置编译器选项\"></a>设置编译器选项</h4><hr>\n<p>编程语言有不同的标准，即提供改进的语言版本。启用新标准是通过设置适当的编译器标志来实现的。<br>前面的示例中，我们已经展示了如何为每个目标或全局进行配置。</p>\n<p>3.1版本中，CMake引入了一个独立于平台和编译器的机制，用于为 C++ 和 C 设置语言标准：为目标设置 <LANG>_STANDARD 属性。</p>\n<h4 id=\"具体实施\"><a href=\"#具体实施\" class=\"headerlink\" title=\"具体实施\"></a>具体实施</h4><hr>\n<ol>\n<li><p>声明最低要求的 CMake 版本，项目名称和语言</p>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">cmake_minimum_required</span>(VERSION <span class=\"number\">3.5</span>)</span><br><span class=\"line\"><span class=\"keyword\">project</span>(download LIANGUAGES CXX)</span><br></pre></td></tr></table></figure></li>\n<li><p>要求在 Windows 上导出所有库符号</p>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ser(CMAKE_WINDOWS_EXPORT_ALL_SYMBOLS <span class=\"keyword\">ON</span>)</span><br></pre></td></tr></table></figure></li>\n<li><p>需要为库添加一个目标，这将编译源代码为一个动态库</p>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">add_library</span>(progressbar</span><br><span class=\"line\">\tSHARED</span><br><span class=\"line\">\tProgressBar.h</span><br><span class=\"line\">\tProgressBar.cpp</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure></li>\n<li><p>现在，为目标设置了 CXX_STANDARD 、 CXX_EXTENSIONS 和 CXX_STANDARD_REQUIRED 属性。</p>\n<p>还设置了 position_independent ent_code 属性，以避免在使用一些编译器构建 DSO 时出现问题</p>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">set_target_properties</span>(</span><br><span class=\"line\">\tPROPERTIES</span><br><span class=\"line\">\tCXX_STANDARD <span class=\"number\">14</span></span><br><span class=\"line\">\tCXX_EXTENSIONS <span class=\"keyword\">OFF</span></span><br><span class=\"line\">\tCXX_STANDARD_REQUIRED <span class=\"keyword\">ON</span></span><br><span class=\"line\">\tPOSITION_INDEPENDENT_CODE <span class=\"number\">1</span></span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure></li>\n<li><p>然后，为 download 的可执行文件添加一个新目标，并设置它的属性</p>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">add_executable</span>(download download.cpp)</span><br><span class=\"line\"><span class=\"keyword\">set_target_properties</span>(progressbar</span><br><span class=\"line\">\tPROPERTIES</span><br><span class=\"line\">\tCXX_STANDARD <span class=\"number\">14</span></span><br><span class=\"line\">\tCXX_EXTENSIONS <span class=\"keyword\">OFF</span></span><br><span class=\"line\">\tCXX_STANDARD_REQUIRED <span class=\"keyword\">ON</span></span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure></li>\n<li><p>最后，将可执行文件链接到库</p>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">target_link_libraries</span>(download progressbar)</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h4 id=\"工作原理\"><a href=\"#工作原理\" class=\"headerlink\" title=\"工作原理\"></a>工作原理</h4><ul>\n<li><p>CXX_STANDARD 会设置我们想要的标准。</p>\n</li>\n<li><p>CXX_EXTENSIONS 告诉 CMake，只启用 ISO C++ 标准的编译器标志，而不使用特定编译器的扩展。</p>\n</li>\n<li><p>CXX_STANDARD_REQUIRED 指定所选标准的版本。如果这个版本不可用，CMake将停止配置并出现错误。</p>\n<p>当这个属性被设置为 OFF 时，CMake将寻找下一个标准的最新版本，直到一个合适的标志。</p>\n<p>这意味着，首先查找 C++14 ，然后是 C++11 ，然后是 C++98 。</p>\n</li>\n</ul>\n"},{"title":"一.C++初识","author":"连思鑫","date":"2023-02-27T09:59:00.000Z","_content":"## 1 C++初识\n\n### 1.1  第一个C++程序\n\n编写一个C++程序总共分为4个步骤\n\n* 创建项目\n* 创建文件\n* 编写代码\n* 运行程序\n\n#### 1.1.1 创建项目\n\n​\tVisual Studio是我们用来编写C++程序的主要工具，我们先将它打开\n\n![1541383178746](/assets/1541383178746.png)\n\n\n\n![1541384366413](/assets/1541384366413.png)\n\n#### 1.1.2 创建文件\n\n右键源文件，选择添加->新建项\n\n![1541383817248](/assets/1541383817248.png)\n\n给C++文件起个名称，然后点击添加即可。\n\n![1541384140042](/assets/1541384140042.png)\n\n\n\n#### 1.1.3 编写代码\n\n```c++\n#include<iostream>\nusing namespace std;\n\nint main() {\n\n\tcout << \"Hello world\" << endl;\n\n\tsystem(\"pause\");\n\n\treturn 0;\n}\n```\n\n#### 1.1.4 运行程序\n\n![1541384818688](/assets/1541384818688.png)\n\n\n\n### 1.2 注释\n\n**作用**：在代码中加一些说明和解释，方便自己或其他程序员程序员阅读代码\n\n**两种格式**\n\n1. **单行注释**：`// 描述信息` \n   - 通常放在一行代码的上方，或者一条语句的末尾，==对该行代码说明==\n2. **多行注释**： `/* 描述信息 */`\n   - 通常放在一段代码的上方，==对该段代码做整体说明==\n\n> 提示：编译器在编译代码时，会忽略注释的内容\n\n\n\n### 1.3 变量\n\n**作用**：给一段指定的内存空间起名，方便操作这段内存\n\n**语法**：`数据类型 变量名 = 初始值;`\n\n**示例：**\n\n```C++\n#include<iostream>\nusing namespace std;\n\nint main() {\n\n\t//变量的定义\n\t//语法：数据类型  变量名 = 初始值\n\n\tint a = 10;\n\n\tcout << \"a = \" << a << endl;\n\t\n\tsystem(\"pause\");\n\n\treturn 0;\n}\n```\n\n\n\n> 注意：C++在创建变量时，必须给变量一个初始值，否则会报错\n\n\n\n\n### 1.4  常量\n\n**作用**：用于记录程序中不可更改的数据\n\nC++定义常量两种方式\n\n1. **\\#define** 宏常量： `#define 常量名 常量值`\n   * ==通常在文件上方定义==，表示一个常量\n\n\n2. **const**修饰的变量 `const 数据类型 常量名 = 常量值`\n   * ==通常在变量定义前加关键字const==，修饰该变量为常量，不可修改\n\n\n\n**示例：**\n\n```C++\n//1、宏常量\n#define day 7\n\nint main() {\n\n\tcout << \"一周里总共有 \" << day << \" 天\" << endl;\n\t//day = 8;  //报错，宏常量不可以修改\n\n\t//2、const修饰变量\n\tconst int month = 12;\n\tcout << \"一年里总共有 \" << month << \" 个月份\" << endl;\n\t//month = 24; //报错，常量是不可以修改的\n\t\n\t\n\tsystem(\"pause\");\n\n\treturn 0;\n}\n```\n\n\n\n\n### 1.5 关键字\n\n**作用：**关键字是C++中预先保留的单词（标识符）\n\n* **在定义变量或者常量时候，不要用关键字**\n\n\n\nC++关键字如下：\n\n| asm        | do           | if               | return      | typedef  |\n| ---------- | ------------ | ---------------- | ----------- | -------- |\n| auto       | double       | inline           | short       | typeid   |\n| bool       | dynamic_cast | int              | signed      | typename |\n| break      | else         | long             | sizeof      | union    |\n| case       | enum         | mutable          | static      | unsigned |\n| catch      | explicit     | namespace        | static_cast | using    |\n| char       | export       | new              | struct      | virtual  |\n| class      | extern       | operator         | switch      | void     |\n| const      | false        | private          | template    | volatile |\n| const_cast | float        | protected        | this        | wchar_t  |\n| continue   | for          | public           | throw       | while    |\n| default    | friend       | register         | true        |          |\n| delete     | goto         | reinterpret_cast | try         |          |\n\n`提示：在给变量或者常量起名称时候，不要用C++得关键字，否则会产生歧义。`\n\n\n\n\n\n### 1.6 标识符命名规则\n\n**作用**：C++规定给标识符（变量、常量）命名时，有一套自己的规则\n\n* 标识符不能是关键字\n* 标识符只能由字母、数字、下划线组成\n* 第一个字符必须为字母或下划线\n* 标识符中字母区分大小写\n\n> 建议：给标识符命名时，争取做到见名知意的效果，方便自己和他人的阅读\n\n","source":"_posts/C.md","raw":"title: 一.C++初识\nauthor: 连思鑫\ntags:\n  - c++\n  - 变量常量标识符\ncategories:\n  - ..\n  - C++\n  - ''\n  - C++基础教程\n  - ''\ndate: 2023-02-27 17:59:00\n---\n## 1 C++初识\n\n### 1.1  第一个C++程序\n\n编写一个C++程序总共分为4个步骤\n\n* 创建项目\n* 创建文件\n* 编写代码\n* 运行程序\n\n#### 1.1.1 创建项目\n\n​\tVisual Studio是我们用来编写C++程序的主要工具，我们先将它打开\n\n![1541383178746](/assets/1541383178746.png)\n\n\n\n![1541384366413](/assets/1541384366413.png)\n\n#### 1.1.2 创建文件\n\n右键源文件，选择添加->新建项\n\n![1541383817248](/assets/1541383817248.png)\n\n给C++文件起个名称，然后点击添加即可。\n\n![1541384140042](/assets/1541384140042.png)\n\n\n\n#### 1.1.3 编写代码\n\n```c++\n#include<iostream>\nusing namespace std;\n\nint main() {\n\n\tcout << \"Hello world\" << endl;\n\n\tsystem(\"pause\");\n\n\treturn 0;\n}\n```\n\n#### 1.1.4 运行程序\n\n![1541384818688](/assets/1541384818688.png)\n\n\n\n### 1.2 注释\n\n**作用**：在代码中加一些说明和解释，方便自己或其他程序员程序员阅读代码\n\n**两种格式**\n\n1. **单行注释**：`// 描述信息` \n   - 通常放在一行代码的上方，或者一条语句的末尾，==对该行代码说明==\n2. **多行注释**： `/* 描述信息 */`\n   - 通常放在一段代码的上方，==对该段代码做整体说明==\n\n> 提示：编译器在编译代码时，会忽略注释的内容\n\n\n\n### 1.3 变量\n\n**作用**：给一段指定的内存空间起名，方便操作这段内存\n\n**语法**：`数据类型 变量名 = 初始值;`\n\n**示例：**\n\n```C++\n#include<iostream>\nusing namespace std;\n\nint main() {\n\n\t//变量的定义\n\t//语法：数据类型  变量名 = 初始值\n\n\tint a = 10;\n\n\tcout << \"a = \" << a << endl;\n\t\n\tsystem(\"pause\");\n\n\treturn 0;\n}\n```\n\n\n\n> 注意：C++在创建变量时，必须给变量一个初始值，否则会报错\n\n\n\n\n### 1.4  常量\n\n**作用**：用于记录程序中不可更改的数据\n\nC++定义常量两种方式\n\n1. **\\#define** 宏常量： `#define 常量名 常量值`\n   * ==通常在文件上方定义==，表示一个常量\n\n\n2. **const**修饰的变量 `const 数据类型 常量名 = 常量值`\n   * ==通常在变量定义前加关键字const==，修饰该变量为常量，不可修改\n\n\n\n**示例：**\n\n```C++\n//1、宏常量\n#define day 7\n\nint main() {\n\n\tcout << \"一周里总共有 \" << day << \" 天\" << endl;\n\t//day = 8;  //报错，宏常量不可以修改\n\n\t//2、const修饰变量\n\tconst int month = 12;\n\tcout << \"一年里总共有 \" << month << \" 个月份\" << endl;\n\t//month = 24; //报错，常量是不可以修改的\n\t\n\t\n\tsystem(\"pause\");\n\n\treturn 0;\n}\n```\n\n\n\n\n### 1.5 关键字\n\n**作用：**关键字是C++中预先保留的单词（标识符）\n\n* **在定义变量或者常量时候，不要用关键字**\n\n\n\nC++关键字如下：\n\n| asm        | do           | if               | return      | typedef  |\n| ---------- | ------------ | ---------------- | ----------- | -------- |\n| auto       | double       | inline           | short       | typeid   |\n| bool       | dynamic_cast | int              | signed      | typename |\n| break      | else         | long             | sizeof      | union    |\n| case       | enum         | mutable          | static      | unsigned |\n| catch      | explicit     | namespace        | static_cast | using    |\n| char       | export       | new              | struct      | virtual  |\n| class      | extern       | operator         | switch      | void     |\n| const      | false        | private          | template    | volatile |\n| const_cast | float        | protected        | this        | wchar_t  |\n| continue   | for          | public           | throw       | while    |\n| default    | friend       | register         | true        |          |\n| delete     | goto         | reinterpret_cast | try         |          |\n\n`提示：在给变量或者常量起名称时候，不要用C++得关键字，否则会产生歧义。`\n\n\n\n\n\n### 1.6 标识符命名规则\n\n**作用**：C++规定给标识符（变量、常量）命名时，有一套自己的规则\n\n* 标识符不能是关键字\n* 标识符只能由字母、数字、下划线组成\n* 第一个字符必须为字母或下划线\n* 标识符中字母区分大小写\n\n> 建议：给标识符命名时，争取做到见名知意的效果，方便自己和他人的阅读\n\n","slug":"C","published":1,"updated":"2023-03-01T12:01:14.428Z","_id":"clifr2v1t001e14uo4iqs8uhh","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"1-C-初识\"><a href=\"#1-C-初识\" class=\"headerlink\" title=\"1 C++初识\"></a>1 C++初识</h2><h3 id=\"1-1-第一个C-程序\"><a href=\"#1-1-第一个C-程序\" class=\"headerlink\" title=\"1.1  第一个C++程序\"></a>1.1  第一个C++程序</h3><p>编写一个C++程序总共分为4个步骤</p>\n<ul>\n<li>创建项目</li>\n<li>创建文件</li>\n<li>编写代码</li>\n<li>运行程序</li>\n</ul>\n<h4 id=\"1-1-1-创建项目\"><a href=\"#1-1-1-创建项目\" class=\"headerlink\" title=\"1.1.1 创建项目\"></a>1.1.1 创建项目</h4><p>​    Visual Studio是我们用来编写C++程序的主要工具，我们先将它打开</p>\n<p><img src=\"/assets/1541383178746.png\" alt=\"1541383178746\"></p>\n<p><img src=\"/assets/1541384366413.png\" alt=\"1541384366413\"></p>\n<h4 id=\"1-1-2-创建文件\"><a href=\"#1-1-2-创建文件\" class=\"headerlink\" title=\"1.1.2 创建文件\"></a>1.1.2 创建文件</h4><p>右键源文件，选择添加-&gt;新建项</p>\n<p><img src=\"/assets/1541383817248.png\" alt=\"1541383817248\"></p>\n<p>给C++文件起个名称，然后点击添加即可。</p>\n<p><img src=\"/assets/1541384140042.png\" alt=\"1541384140042\"></p>\n<h4 id=\"1-1-3-编写代码\"><a href=\"#1-1-3-编写代码\" class=\"headerlink\" title=\"1.1.3 编写代码\"></a>1.1.3 编写代码</h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;Hello world&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">system</span>(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"1-1-4-运行程序\"><a href=\"#1-1-4-运行程序\" class=\"headerlink\" title=\"1.1.4 运行程序\"></a>1.1.4 运行程序</h4><p><img src=\"/assets/1541384818688.png\" alt=\"1541384818688\"></p>\n<h3 id=\"1-2-注释\"><a href=\"#1-2-注释\" class=\"headerlink\" title=\"1.2 注释\"></a>1.2 注释</h3><p><strong>作用</strong>：在代码中加一些说明和解释，方便自己或其他程序员程序员阅读代码</p>\n<p><strong>两种格式</strong></p>\n<ol>\n<li><strong>单行注释</strong>：<code>// 描述信息</code> <ul>\n<li>通常放在一行代码的上方，或者一条语句的末尾，==对该行代码说明==</li>\n</ul>\n</li>\n<li><strong>多行注释</strong>： <code>/* 描述信息 */</code><ul>\n<li>通常放在一段代码的上方，==对该段代码做整体说明==</li>\n</ul>\n</li>\n</ol>\n<blockquote>\n<p>提示：编译器在编译代码时，会忽略注释的内容</p>\n</blockquote>\n<h3 id=\"1-3-变量\"><a href=\"#1-3-变量\" class=\"headerlink\" title=\"1.3 变量\"></a>1.3 变量</h3><p><strong>作用</strong>：给一段指定的内存空间起名，方便操作这段内存</p>\n<p><strong>语法</strong>：<code>数据类型 变量名 = 初始值;</code></p>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//变量的定义</span></span><br><span class=\"line\">\t<span class=\"comment\">//语法：数据类型  变量名 = 初始值</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"type\">int</span> a = <span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;a = &quot;</span> &lt;&lt; a &lt;&lt; endl;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"built_in\">system</span>(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<blockquote>\n<p>注意：C++在创建变量时，必须给变量一个初始值，否则会报错</p>\n</blockquote>\n<h3 id=\"1-4-常量\"><a href=\"#1-4-常量\" class=\"headerlink\" title=\"1.4  常量\"></a>1.4  常量</h3><p><strong>作用</strong>：用于记录程序中不可更改的数据</p>\n<p>C++定义常量两种方式</p>\n<ol>\n<li><strong>#define</strong> 宏常量： <code>#define 常量名 常量值</code><ul>\n<li>==通常在文件上方定义==，表示一个常量</li>\n</ul>\n</li>\n</ol>\n<ol start=\"2\">\n<li><strong>const</strong>修饰的变量 <code>const 数据类型 常量名 = 常量值</code><ul>\n<li>==通常在变量定义前加关键字const==，修饰该变量为常量，不可修改</li>\n</ul>\n</li>\n</ol>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//1、宏常量</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> day 7</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;一周里总共有 &quot;</span> &lt;&lt; day &lt;&lt; <span class=\"string\">&quot; 天&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\t<span class=\"comment\">//day = 8;  //报错，宏常量不可以修改</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//2、const修饰变量</span></span><br><span class=\"line\">\t<span class=\"type\">const</span> <span class=\"type\">int</span> month = <span class=\"number\">12</span>;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;一年里总共有 &quot;</span> &lt;&lt; month &lt;&lt; <span class=\"string\">&quot; 个月份&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\t<span class=\"comment\">//month = 24; //报错，常量是不可以修改的</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"built_in\">system</span>(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n<h3 id=\"1-5-关键字\"><a href=\"#1-5-关键字\" class=\"headerlink\" title=\"1.5 关键字\"></a>1.5 关键字</h3><p><strong>作用：</strong>关键字是C++中预先保留的单词（标识符）</p>\n<ul>\n<li><strong>在定义变量或者常量时候，不要用关键字</strong></li>\n</ul>\n<p>C++关键字如下：</p>\n<table>\n<thead>\n<tr>\n<th>asm</th>\n<th>do</th>\n<th>if</th>\n<th>return</th>\n<th>typedef</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>auto</td>\n<td>double</td>\n<td>inline</td>\n<td>short</td>\n<td>typeid</td>\n</tr>\n<tr>\n<td>bool</td>\n<td>dynamic_cast</td>\n<td>int</td>\n<td>signed</td>\n<td>typename</td>\n</tr>\n<tr>\n<td>break</td>\n<td>else</td>\n<td>long</td>\n<td>sizeof</td>\n<td>union</td>\n</tr>\n<tr>\n<td>case</td>\n<td>enum</td>\n<td>mutable</td>\n<td>static</td>\n<td>unsigned</td>\n</tr>\n<tr>\n<td>catch</td>\n<td>explicit</td>\n<td>namespace</td>\n<td>static_cast</td>\n<td>using</td>\n</tr>\n<tr>\n<td>char</td>\n<td>export</td>\n<td>new</td>\n<td>struct</td>\n<td>virtual</td>\n</tr>\n<tr>\n<td>class</td>\n<td>extern</td>\n<td>operator</td>\n<td>switch</td>\n<td>void</td>\n</tr>\n<tr>\n<td>const</td>\n<td>false</td>\n<td>private</td>\n<td>template</td>\n<td>volatile</td>\n</tr>\n<tr>\n<td>const_cast</td>\n<td>float</td>\n<td>protected</td>\n<td>this</td>\n<td>wchar_t</td>\n</tr>\n<tr>\n<td>continue</td>\n<td>for</td>\n<td>public</td>\n<td>throw</td>\n<td>while</td>\n</tr>\n<tr>\n<td>default</td>\n<td>friend</td>\n<td>register</td>\n<td>true</td>\n<td></td>\n</tr>\n<tr>\n<td>delete</td>\n<td>goto</td>\n<td>reinterpret_cast</td>\n<td>try</td>\n<td></td>\n</tr>\n</tbody></table>\n<p><code>提示：在给变量或者常量起名称时候，不要用C++得关键字，否则会产生歧义。</code></p>\n<h3 id=\"1-6-标识符命名规则\"><a href=\"#1-6-标识符命名规则\" class=\"headerlink\" title=\"1.6 标识符命名规则\"></a>1.6 标识符命名规则</h3><p><strong>作用</strong>：C++规定给标识符（变量、常量）命名时，有一套自己的规则</p>\n<ul>\n<li>标识符不能是关键字</li>\n<li>标识符只能由字母、数字、下划线组成</li>\n<li>第一个字符必须为字母或下划线</li>\n<li>标识符中字母区分大小写</li>\n</ul>\n<blockquote>\n<p>建议：给标识符命名时，争取做到见名知意的效果，方便自己和他人的阅读</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"1-C-初识\"><a href=\"#1-C-初识\" class=\"headerlink\" title=\"1 C++初识\"></a>1 C++初识</h2><h3 id=\"1-1-第一个C-程序\"><a href=\"#1-1-第一个C-程序\" class=\"headerlink\" title=\"1.1  第一个C++程序\"></a>1.1  第一个C++程序</h3><p>编写一个C++程序总共分为4个步骤</p>\n<ul>\n<li>创建项目</li>\n<li>创建文件</li>\n<li>编写代码</li>\n<li>运行程序</li>\n</ul>\n<h4 id=\"1-1-1-创建项目\"><a href=\"#1-1-1-创建项目\" class=\"headerlink\" title=\"1.1.1 创建项目\"></a>1.1.1 创建项目</h4><p>​    Visual Studio是我们用来编写C++程序的主要工具，我们先将它打开</p>\n<p><img src=\"/assets/1541383178746.png\" alt=\"1541383178746\"></p>\n<p><img src=\"/assets/1541384366413.png\" alt=\"1541384366413\"></p>\n<h4 id=\"1-1-2-创建文件\"><a href=\"#1-1-2-创建文件\" class=\"headerlink\" title=\"1.1.2 创建文件\"></a>1.1.2 创建文件</h4><p>右键源文件，选择添加-&gt;新建项</p>\n<p><img src=\"/assets/1541383817248.png\" alt=\"1541383817248\"></p>\n<p>给C++文件起个名称，然后点击添加即可。</p>\n<p><img src=\"/assets/1541384140042.png\" alt=\"1541384140042\"></p>\n<h4 id=\"1-1-3-编写代码\"><a href=\"#1-1-3-编写代码\" class=\"headerlink\" title=\"1.1.3 编写代码\"></a>1.1.3 编写代码</h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;Hello world&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">system</span>(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"1-1-4-运行程序\"><a href=\"#1-1-4-运行程序\" class=\"headerlink\" title=\"1.1.4 运行程序\"></a>1.1.4 运行程序</h4><p><img src=\"/assets/1541384818688.png\" alt=\"1541384818688\"></p>\n<h3 id=\"1-2-注释\"><a href=\"#1-2-注释\" class=\"headerlink\" title=\"1.2 注释\"></a>1.2 注释</h3><p><strong>作用</strong>：在代码中加一些说明和解释，方便自己或其他程序员程序员阅读代码</p>\n<p><strong>两种格式</strong></p>\n<ol>\n<li><strong>单行注释</strong>：<code>// 描述信息</code> <ul>\n<li>通常放在一行代码的上方，或者一条语句的末尾，==对该行代码说明==</li>\n</ul>\n</li>\n<li><strong>多行注释</strong>： <code>/* 描述信息 */</code><ul>\n<li>通常放在一段代码的上方，==对该段代码做整体说明==</li>\n</ul>\n</li>\n</ol>\n<blockquote>\n<p>提示：编译器在编译代码时，会忽略注释的内容</p>\n</blockquote>\n<h3 id=\"1-3-变量\"><a href=\"#1-3-变量\" class=\"headerlink\" title=\"1.3 变量\"></a>1.3 变量</h3><p><strong>作用</strong>：给一段指定的内存空间起名，方便操作这段内存</p>\n<p><strong>语法</strong>：<code>数据类型 变量名 = 初始值;</code></p>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//变量的定义</span></span><br><span class=\"line\">\t<span class=\"comment\">//语法：数据类型  变量名 = 初始值</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"type\">int</span> a = <span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;a = &quot;</span> &lt;&lt; a &lt;&lt; endl;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"built_in\">system</span>(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<blockquote>\n<p>注意：C++在创建变量时，必须给变量一个初始值，否则会报错</p>\n</blockquote>\n<h3 id=\"1-4-常量\"><a href=\"#1-4-常量\" class=\"headerlink\" title=\"1.4  常量\"></a>1.4  常量</h3><p><strong>作用</strong>：用于记录程序中不可更改的数据</p>\n<p>C++定义常量两种方式</p>\n<ol>\n<li><strong>#define</strong> 宏常量： <code>#define 常量名 常量值</code><ul>\n<li>==通常在文件上方定义==，表示一个常量</li>\n</ul>\n</li>\n</ol>\n<ol start=\"2\">\n<li><strong>const</strong>修饰的变量 <code>const 数据类型 常量名 = 常量值</code><ul>\n<li>==通常在变量定义前加关键字const==，修饰该变量为常量，不可修改</li>\n</ul>\n</li>\n</ol>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//1、宏常量</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> day 7</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;一周里总共有 &quot;</span> &lt;&lt; day &lt;&lt; <span class=\"string\">&quot; 天&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\t<span class=\"comment\">//day = 8;  //报错，宏常量不可以修改</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//2、const修饰变量</span></span><br><span class=\"line\">\t<span class=\"type\">const</span> <span class=\"type\">int</span> month = <span class=\"number\">12</span>;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;一年里总共有 &quot;</span> &lt;&lt; month &lt;&lt; <span class=\"string\">&quot; 个月份&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\t<span class=\"comment\">//month = 24; //报错，常量是不可以修改的</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"built_in\">system</span>(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n<h3 id=\"1-5-关键字\"><a href=\"#1-5-关键字\" class=\"headerlink\" title=\"1.5 关键字\"></a>1.5 关键字</h3><p><strong>作用：</strong>关键字是C++中预先保留的单词（标识符）</p>\n<ul>\n<li><strong>在定义变量或者常量时候，不要用关键字</strong></li>\n</ul>\n<p>C++关键字如下：</p>\n<table>\n<thead>\n<tr>\n<th>asm</th>\n<th>do</th>\n<th>if</th>\n<th>return</th>\n<th>typedef</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>auto</td>\n<td>double</td>\n<td>inline</td>\n<td>short</td>\n<td>typeid</td>\n</tr>\n<tr>\n<td>bool</td>\n<td>dynamic_cast</td>\n<td>int</td>\n<td>signed</td>\n<td>typename</td>\n</tr>\n<tr>\n<td>break</td>\n<td>else</td>\n<td>long</td>\n<td>sizeof</td>\n<td>union</td>\n</tr>\n<tr>\n<td>case</td>\n<td>enum</td>\n<td>mutable</td>\n<td>static</td>\n<td>unsigned</td>\n</tr>\n<tr>\n<td>catch</td>\n<td>explicit</td>\n<td>namespace</td>\n<td>static_cast</td>\n<td>using</td>\n</tr>\n<tr>\n<td>char</td>\n<td>export</td>\n<td>new</td>\n<td>struct</td>\n<td>virtual</td>\n</tr>\n<tr>\n<td>class</td>\n<td>extern</td>\n<td>operator</td>\n<td>switch</td>\n<td>void</td>\n</tr>\n<tr>\n<td>const</td>\n<td>false</td>\n<td>private</td>\n<td>template</td>\n<td>volatile</td>\n</tr>\n<tr>\n<td>const_cast</td>\n<td>float</td>\n<td>protected</td>\n<td>this</td>\n<td>wchar_t</td>\n</tr>\n<tr>\n<td>continue</td>\n<td>for</td>\n<td>public</td>\n<td>throw</td>\n<td>while</td>\n</tr>\n<tr>\n<td>default</td>\n<td>friend</td>\n<td>register</td>\n<td>true</td>\n<td></td>\n</tr>\n<tr>\n<td>delete</td>\n<td>goto</td>\n<td>reinterpret_cast</td>\n<td>try</td>\n<td></td>\n</tr>\n</tbody></table>\n<p><code>提示：在给变量或者常量起名称时候，不要用C++得关键字，否则会产生歧义。</code></p>\n<h3 id=\"1-6-标识符命名规则\"><a href=\"#1-6-标识符命名规则\" class=\"headerlink\" title=\"1.6 标识符命名规则\"></a>1.6 标识符命名规则</h3><p><strong>作用</strong>：C++规定给标识符（变量、常量）命名时，有一套自己的规则</p>\n<ul>\n<li>标识符不能是关键字</li>\n<li>标识符只能由字母、数字、下划线组成</li>\n<li>第一个字符必须为字母或下划线</li>\n<li>标识符中字母区分大小写</li>\n</ul>\n<blockquote>\n<p>建议：给标识符命名时，争取做到见名知意的效果，方便自己和他人的阅读</p>\n</blockquote>\n"},{"title":"vi使用教程","author":"连思鑫","date":"2023-03-06T07:05:00.000Z","_content":"# 一、关于vi\nvi是最强大的文本编辑器，没有之一。\n\n尽管vi已经是古董级的软件，但还是有无数新人迎着困难去学习使用，可见其经典与受欢迎的程度。\n\n无论是小说中还是电视剧，真正强大的武器都不容易驾驭，需要付出一些努力才能收获到更加强大的力量，对于vi这种上古神器来说更是如此。\n\n由于它全程使用键盘操作，很多首次接触 vi的人会觉得不习惯而中途放弃。然而，坚持下来的朋友就会渐渐地发现这种键盘操作的设计绝妙，经典之所以能成为经典，必然有它的道理，不用解释太多。\n\n观察一个程序员对vi的熟练程度，可以判断它的技术水平，如果他对vi不熟悉，就肯定不是Linux平台下的程序员，说vi不好用的人也肯定不熟悉vi和Linux，没有例外。\n\n# 二、创建/打开文件\n\nvi 文件名\n\n打开一个文件，如果文件不存在，就创建它。\n\n示例：\n```bash\nvi book.c\n```\n\n# 三、vi的三种模式\n\nvi 有三种模式：\n1. 命令行模式\n2. 插入模式\n3. 替换模式\n\n在命令行模式下，任何键盘输入都是命令，在插入模式和替换模式下，键盘输入的才是字符。\n\n插入模式和替换模式也合称为编辑模式。\n\n# 四、vi的常用命令\n\n`Esc` ：从编辑模式切换到命令行模式。\n\n`i` ：在光标所在位置前面开始插入。\n\n`a`\t： 在光标所在的位置后面开始插入。\n\n`o` ：在光标所在位置行的下面插入空白行。\n\n`O` ：在光标所在位置行的上面插入空白行。\n\n`I` ：在光标所在位置行的行首开始插入。\n\n`A` ：在光标所在位置行的行末开始插入。\n\n`k` ：类似方向键上。\n\n`j` ：类似方向键下。\n\n`h` ：类似方向键左。\n\n`l` ：类是方向键右。\n\n`Ctrl+u` ：向上翻半页。\n\n`Ctrl+d` ：向下翻页。\n\n`Ctrl+g` ：显示光标所在位置的行号和文件的总行数。\n\n`nG` ：光标跳到文件的第n行行首。\n\n`G` \t光标跳到文件最后一行。\n\n`:5回车`   光标跳到第5行。\n\n`:n回车`   光标跳到第n行。\n\n`0` ：光标跳到当前行的行首。\n\n`$` ：光标跳到当前行的行尾。\n\n`w` ：光标跳到下个单词的开头。\n\n`b` ：光标跳到上个单词的开头。\n\n`e` ：光标跳到本单词的尾部。\n\n`x` ：每按一次，删除光标所在位置的一个字符。\n\n`nx` ：如\"3x\"表示删除光标所在位置开始的3个字符。\n\n`dw` ：删除光标所在位置到本单词结尾的字符。\n\n`D` ：删除本行光标所在位置后面全部的内容。\n\n`dd` ：删除光标所在位置的一行。\n\n`ndd` ：如\"3dd\"表示删除光标所在位置开始的3行。\n\n`yy` ：将光标所在位置的一行复制到缓冲区。\n\n`nyy` ：将光标所在位置的n行复制到缓冲区。\n\n`p` ：将缓冲区里的内容粘贴到光标所在位置。\n\n`r` ：替换光标所在位置的一个字符 replace。\n\n`R` ：从光标所在位置开始替换，直到按下\"Esc\"。\n\n`cw` ：从光标所在位置开始替换单词，直到按下\"Esc\"。\n\n`u` ：撤销命令，可多次撤销。\n\n`J` ：把当前行的下一行接到当前行的尾部。\n\n`/abcd` ：在当前打开的文件中查找“abcd”文本内容。\n\n`n` ：查找下一个。\n\n`N` ：查找上一下。\n\n`.` ：重复执行上一次执行的vi命令。\n\n`~` ：对光标当前所在的位置的字符进行大小写转换。\n\n**列操作**\n\n`Ctrl+V` ：光标上或下  大写的I  输入内容  Esc\n\n`:w回车` ：存盘。\n\n`:w!回车` ：强制存盘。\n\n`:wq回车` ：存盘退出。\n\n`:x回车` ：存盘退出。\n\n`:q回车` ：不存盘退出。\n\n`:q!回车` ：不存盘强制退出。\n\n`:g/aaaaaaaaa/s//bbbbbb/g回车` ：把文件中全部的aaaaaaaaa替换成bbbbbb。\n\n`Ctl+insert` ：复制鼠标选中的文本，相当于Ctl+c。\n\n`Shift+insert` ：输出鼠标选中的文本，相当于Ctl+v。\n\n以上两个命令在windows和UNIX中是通用的。","source":"_posts/vi使用教程-1.md","raw":"title: vi使用教程\nauthor: 连思鑫\ntags:\n  - vi\ncategories:\n  - ..\n  - 常用工具\n  - ''\ndate: 2023-03-06 15:05:00\n---\n# 一、关于vi\nvi是最强大的文本编辑器，没有之一。\n\n尽管vi已经是古董级的软件，但还是有无数新人迎着困难去学习使用，可见其经典与受欢迎的程度。\n\n无论是小说中还是电视剧，真正强大的武器都不容易驾驭，需要付出一些努力才能收获到更加强大的力量，对于vi这种上古神器来说更是如此。\n\n由于它全程使用键盘操作，很多首次接触 vi的人会觉得不习惯而中途放弃。然而，坚持下来的朋友就会渐渐地发现这种键盘操作的设计绝妙，经典之所以能成为经典，必然有它的道理，不用解释太多。\n\n观察一个程序员对vi的熟练程度，可以判断它的技术水平，如果他对vi不熟悉，就肯定不是Linux平台下的程序员，说vi不好用的人也肯定不熟悉vi和Linux，没有例外。\n\n# 二、创建/打开文件\n\nvi 文件名\n\n打开一个文件，如果文件不存在，就创建它。\n\n示例：\n```bash\nvi book.c\n```\n\n# 三、vi的三种模式\n\nvi 有三种模式：\n1. 命令行模式\n2. 插入模式\n3. 替换模式\n\n在命令行模式下，任何键盘输入都是命令，在插入模式和替换模式下，键盘输入的才是字符。\n\n插入模式和替换模式也合称为编辑模式。\n\n# 四、vi的常用命令\n\n`Esc` ：从编辑模式切换到命令行模式。\n\n`i` ：在光标所在位置前面开始插入。\n\n`a`\t： 在光标所在的位置后面开始插入。\n\n`o` ：在光标所在位置行的下面插入空白行。\n\n`O` ：在光标所在位置行的上面插入空白行。\n\n`I` ：在光标所在位置行的行首开始插入。\n\n`A` ：在光标所在位置行的行末开始插入。\n\n`k` ：类似方向键上。\n\n`j` ：类似方向键下。\n\n`h` ：类似方向键左。\n\n`l` ：类是方向键右。\n\n`Ctrl+u` ：向上翻半页。\n\n`Ctrl+d` ：向下翻页。\n\n`Ctrl+g` ：显示光标所在位置的行号和文件的总行数。\n\n`nG` ：光标跳到文件的第n行行首。\n\n`G` \t光标跳到文件最后一行。\n\n`:5回车`   光标跳到第5行。\n\n`:n回车`   光标跳到第n行。\n\n`0` ：光标跳到当前行的行首。\n\n`$` ：光标跳到当前行的行尾。\n\n`w` ：光标跳到下个单词的开头。\n\n`b` ：光标跳到上个单词的开头。\n\n`e` ：光标跳到本单词的尾部。\n\n`x` ：每按一次，删除光标所在位置的一个字符。\n\n`nx` ：如\"3x\"表示删除光标所在位置开始的3个字符。\n\n`dw` ：删除光标所在位置到本单词结尾的字符。\n\n`D` ：删除本行光标所在位置后面全部的内容。\n\n`dd` ：删除光标所在位置的一行。\n\n`ndd` ：如\"3dd\"表示删除光标所在位置开始的3行。\n\n`yy` ：将光标所在位置的一行复制到缓冲区。\n\n`nyy` ：将光标所在位置的n行复制到缓冲区。\n\n`p` ：将缓冲区里的内容粘贴到光标所在位置。\n\n`r` ：替换光标所在位置的一个字符 replace。\n\n`R` ：从光标所在位置开始替换，直到按下\"Esc\"。\n\n`cw` ：从光标所在位置开始替换单词，直到按下\"Esc\"。\n\n`u` ：撤销命令，可多次撤销。\n\n`J` ：把当前行的下一行接到当前行的尾部。\n\n`/abcd` ：在当前打开的文件中查找“abcd”文本内容。\n\n`n` ：查找下一个。\n\n`N` ：查找上一下。\n\n`.` ：重复执行上一次执行的vi命令。\n\n`~` ：对光标当前所在的位置的字符进行大小写转换。\n\n**列操作**\n\n`Ctrl+V` ：光标上或下  大写的I  输入内容  Esc\n\n`:w回车` ：存盘。\n\n`:w!回车` ：强制存盘。\n\n`:wq回车` ：存盘退出。\n\n`:x回车` ：存盘退出。\n\n`:q回车` ：不存盘退出。\n\n`:q!回车` ：不存盘强制退出。\n\n`:g/aaaaaaaaa/s//bbbbbb/g回车` ：把文件中全部的aaaaaaaaa替换成bbbbbb。\n\n`Ctl+insert` ：复制鼠标选中的文本，相当于Ctl+c。\n\n`Shift+insert` ：输出鼠标选中的文本，相当于Ctl+v。\n\n以上两个命令在windows和UNIX中是通用的。","slug":"vi使用教程-1","published":1,"updated":"2023-03-06T12:52:11.343Z","_id":"clifr2v1u001i14uocplv5vxv","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"一、关于vi\"><a href=\"#一、关于vi\" class=\"headerlink\" title=\"一、关于vi\"></a>一、关于vi</h1><p>vi是最强大的文本编辑器，没有之一。</p>\n<p>尽管vi已经是古董级的软件，但还是有无数新人迎着困难去学习使用，可见其经典与受欢迎的程度。</p>\n<p>无论是小说中还是电视剧，真正强大的武器都不容易驾驭，需要付出一些努力才能收获到更加强大的力量，对于vi这种上古神器来说更是如此。</p>\n<p>由于它全程使用键盘操作，很多首次接触 vi的人会觉得不习惯而中途放弃。然而，坚持下来的朋友就会渐渐地发现这种键盘操作的设计绝妙，经典之所以能成为经典，必然有它的道理，不用解释太多。</p>\n<p>观察一个程序员对vi的熟练程度，可以判断它的技术水平，如果他对vi不熟悉，就肯定不是Linux平台下的程序员，说vi不好用的人也肯定不熟悉vi和Linux，没有例外。</p>\n<h1 id=\"二、创建-打开文件\"><a href=\"#二、创建-打开文件\" class=\"headerlink\" title=\"二、创建/打开文件\"></a>二、创建/打开文件</h1><p>vi 文件名</p>\n<p>打开一个文件，如果文件不存在，就创建它。</p>\n<p>示例：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi book.c</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"三、vi的三种模式\"><a href=\"#三、vi的三种模式\" class=\"headerlink\" title=\"三、vi的三种模式\"></a>三、vi的三种模式</h1><p>vi 有三种模式：</p>\n<ol>\n<li>命令行模式</li>\n<li>插入模式</li>\n<li>替换模式</li>\n</ol>\n<p>在命令行模式下，任何键盘输入都是命令，在插入模式和替换模式下，键盘输入的才是字符。</p>\n<p>插入模式和替换模式也合称为编辑模式。</p>\n<h1 id=\"四、vi的常用命令\"><a href=\"#四、vi的常用命令\" class=\"headerlink\" title=\"四、vi的常用命令\"></a>四、vi的常用命令</h1><p><code>Esc</code> ：从编辑模式切换到命令行模式。</p>\n<p><code>i</code> ：在光标所在位置前面开始插入。</p>\n<p><code>a</code>    ： 在光标所在的位置后面开始插入。</p>\n<p><code>o</code> ：在光标所在位置行的下面插入空白行。</p>\n<p><code>O</code> ：在光标所在位置行的上面插入空白行。</p>\n<p><code>I</code> ：在光标所在位置行的行首开始插入。</p>\n<p><code>A</code> ：在光标所在位置行的行末开始插入。</p>\n<p><code>k</code> ：类似方向键上。</p>\n<p><code>j</code> ：类似方向键下。</p>\n<p><code>h</code> ：类似方向键左。</p>\n<p><code>l</code> ：类是方向键右。</p>\n<p><code>Ctrl+u</code> ：向上翻半页。</p>\n<p><code>Ctrl+d</code> ：向下翻页。</p>\n<p><code>Ctrl+g</code> ：显示光标所在位置的行号和文件的总行数。</p>\n<p><code>nG</code> ：光标跳到文件的第n行行首。</p>\n<p><code>G</code>     光标跳到文件最后一行。</p>\n<p><code>:5回车</code>   光标跳到第5行。</p>\n<p><code>:n回车</code>   光标跳到第n行。</p>\n<p><code>0</code> ：光标跳到当前行的行首。</p>\n<p><code>$</code> ：光标跳到当前行的行尾。</p>\n<p><code>w</code> ：光标跳到下个单词的开头。</p>\n<p><code>b</code> ：光标跳到上个单词的开头。</p>\n<p><code>e</code> ：光标跳到本单词的尾部。</p>\n<p><code>x</code> ：每按一次，删除光标所在位置的一个字符。</p>\n<p><code>nx</code> ：如”3x”表示删除光标所在位置开始的3个字符。</p>\n<p><code>dw</code> ：删除光标所在位置到本单词结尾的字符。</p>\n<p><code>D</code> ：删除本行光标所在位置后面全部的内容。</p>\n<p><code>dd</code> ：删除光标所在位置的一行。</p>\n<p><code>ndd</code> ：如”3dd”表示删除光标所在位置开始的3行。</p>\n<p><code>yy</code> ：将光标所在位置的一行复制到缓冲区。</p>\n<p><code>nyy</code> ：将光标所在位置的n行复制到缓冲区。</p>\n<p><code>p</code> ：将缓冲区里的内容粘贴到光标所在位置。</p>\n<p><code>r</code> ：替换光标所在位置的一个字符 replace。</p>\n<p><code>R</code> ：从光标所在位置开始替换，直到按下”Esc”。</p>\n<p><code>cw</code> ：从光标所在位置开始替换单词，直到按下”Esc”。</p>\n<p><code>u</code> ：撤销命令，可多次撤销。</p>\n<p><code>J</code> ：把当前行的下一行接到当前行的尾部。</p>\n<p><code>/abcd</code> ：在当前打开的文件中查找“abcd”文本内容。</p>\n<p><code>n</code> ：查找下一个。</p>\n<p><code>N</code> ：查找上一下。</p>\n<p><code>.</code> ：重复执行上一次执行的vi命令。</p>\n<p><code>~</code> ：对光标当前所在的位置的字符进行大小写转换。</p>\n<p><strong>列操作</strong></p>\n<p><code>Ctrl+V</code> ：光标上或下  大写的I  输入内容  Esc</p>\n<p><code>:w回车</code> ：存盘。</p>\n<p><code>:w!回车</code> ：强制存盘。</p>\n<p><code>:wq回车</code> ：存盘退出。</p>\n<p><code>:x回车</code> ：存盘退出。</p>\n<p><code>:q回车</code> ：不存盘退出。</p>\n<p><code>:q!回车</code> ：不存盘强制退出。</p>\n<p><code>:g/aaaaaaaaa/s//bbbbbb/g回车</code> ：把文件中全部的aaaaaaaaa替换成bbbbbb。</p>\n<p><code>Ctl+insert</code> ：复制鼠标选中的文本，相当于Ctl+c。</p>\n<p><code>Shift+insert</code> ：输出鼠标选中的文本，相当于Ctl+v。</p>\n<p>以上两个命令在windows和UNIX中是通用的。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"一、关于vi\"><a href=\"#一、关于vi\" class=\"headerlink\" title=\"一、关于vi\"></a>一、关于vi</h1><p>vi是最强大的文本编辑器，没有之一。</p>\n<p>尽管vi已经是古董级的软件，但还是有无数新人迎着困难去学习使用，可见其经典与受欢迎的程度。</p>\n<p>无论是小说中还是电视剧，真正强大的武器都不容易驾驭，需要付出一些努力才能收获到更加强大的力量，对于vi这种上古神器来说更是如此。</p>\n<p>由于它全程使用键盘操作，很多首次接触 vi的人会觉得不习惯而中途放弃。然而，坚持下来的朋友就会渐渐地发现这种键盘操作的设计绝妙，经典之所以能成为经典，必然有它的道理，不用解释太多。</p>\n<p>观察一个程序员对vi的熟练程度，可以判断它的技术水平，如果他对vi不熟悉，就肯定不是Linux平台下的程序员，说vi不好用的人也肯定不熟悉vi和Linux，没有例外。</p>\n<h1 id=\"二、创建-打开文件\"><a href=\"#二、创建-打开文件\" class=\"headerlink\" title=\"二、创建/打开文件\"></a>二、创建/打开文件</h1><p>vi 文件名</p>\n<p>打开一个文件，如果文件不存在，就创建它。</p>\n<p>示例：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi book.c</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"三、vi的三种模式\"><a href=\"#三、vi的三种模式\" class=\"headerlink\" title=\"三、vi的三种模式\"></a>三、vi的三种模式</h1><p>vi 有三种模式：</p>\n<ol>\n<li>命令行模式</li>\n<li>插入模式</li>\n<li>替换模式</li>\n</ol>\n<p>在命令行模式下，任何键盘输入都是命令，在插入模式和替换模式下，键盘输入的才是字符。</p>\n<p>插入模式和替换模式也合称为编辑模式。</p>\n<h1 id=\"四、vi的常用命令\"><a href=\"#四、vi的常用命令\" class=\"headerlink\" title=\"四、vi的常用命令\"></a>四、vi的常用命令</h1><p><code>Esc</code> ：从编辑模式切换到命令行模式。</p>\n<p><code>i</code> ：在光标所在位置前面开始插入。</p>\n<p><code>a</code>    ： 在光标所在的位置后面开始插入。</p>\n<p><code>o</code> ：在光标所在位置行的下面插入空白行。</p>\n<p><code>O</code> ：在光标所在位置行的上面插入空白行。</p>\n<p><code>I</code> ：在光标所在位置行的行首开始插入。</p>\n<p><code>A</code> ：在光标所在位置行的行末开始插入。</p>\n<p><code>k</code> ：类似方向键上。</p>\n<p><code>j</code> ：类似方向键下。</p>\n<p><code>h</code> ：类似方向键左。</p>\n<p><code>l</code> ：类是方向键右。</p>\n<p><code>Ctrl+u</code> ：向上翻半页。</p>\n<p><code>Ctrl+d</code> ：向下翻页。</p>\n<p><code>Ctrl+g</code> ：显示光标所在位置的行号和文件的总行数。</p>\n<p><code>nG</code> ：光标跳到文件的第n行行首。</p>\n<p><code>G</code>     光标跳到文件最后一行。</p>\n<p><code>:5回车</code>   光标跳到第5行。</p>\n<p><code>:n回车</code>   光标跳到第n行。</p>\n<p><code>0</code> ：光标跳到当前行的行首。</p>\n<p><code>$</code> ：光标跳到当前行的行尾。</p>\n<p><code>w</code> ：光标跳到下个单词的开头。</p>\n<p><code>b</code> ：光标跳到上个单词的开头。</p>\n<p><code>e</code> ：光标跳到本单词的尾部。</p>\n<p><code>x</code> ：每按一次，删除光标所在位置的一个字符。</p>\n<p><code>nx</code> ：如”3x”表示删除光标所在位置开始的3个字符。</p>\n<p><code>dw</code> ：删除光标所在位置到本单词结尾的字符。</p>\n<p><code>D</code> ：删除本行光标所在位置后面全部的内容。</p>\n<p><code>dd</code> ：删除光标所在位置的一行。</p>\n<p><code>ndd</code> ：如”3dd”表示删除光标所在位置开始的3行。</p>\n<p><code>yy</code> ：将光标所在位置的一行复制到缓冲区。</p>\n<p><code>nyy</code> ：将光标所在位置的n行复制到缓冲区。</p>\n<p><code>p</code> ：将缓冲区里的内容粘贴到光标所在位置。</p>\n<p><code>r</code> ：替换光标所在位置的一个字符 replace。</p>\n<p><code>R</code> ：从光标所在位置开始替换，直到按下”Esc”。</p>\n<p><code>cw</code> ：从光标所在位置开始替换单词，直到按下”Esc”。</p>\n<p><code>u</code> ：撤销命令，可多次撤销。</p>\n<p><code>J</code> ：把当前行的下一行接到当前行的尾部。</p>\n<p><code>/abcd</code> ：在当前打开的文件中查找“abcd”文本内容。</p>\n<p><code>n</code> ：查找下一个。</p>\n<p><code>N</code> ：查找上一下。</p>\n<p><code>.</code> ：重复执行上一次执行的vi命令。</p>\n<p><code>~</code> ：对光标当前所在的位置的字符进行大小写转换。</p>\n<p><strong>列操作</strong></p>\n<p><code>Ctrl+V</code> ：光标上或下  大写的I  输入内容  Esc</p>\n<p><code>:w回车</code> ：存盘。</p>\n<p><code>:w!回车</code> ：强制存盘。</p>\n<p><code>:wq回车</code> ：存盘退出。</p>\n<p><code>:x回车</code> ：存盘退出。</p>\n<p><code>:q回车</code> ：不存盘退出。</p>\n<p><code>:q!回车</code> ：不存盘强制退出。</p>\n<p><code>:g/aaaaaaaaa/s//bbbbbb/g回车</code> ：把文件中全部的aaaaaaaaa替换成bbbbbb。</p>\n<p><code>Ctl+insert</code> ：复制鼠标选中的文本，相当于Ctl+c。</p>\n<p><code>Shift+insert</code> ：输出鼠标选中的文本，相当于Ctl+v。</p>\n<p>以上两个命令在windows和UNIX中是通用的。</p>\n"},{"title":"七.指针","author":"连思鑫","date":"2023-03-01T11:30:00.000Z","_content":"## 7 指针\n\n### 7.1 指针的基本概念\n\n**指针的作用：** 可以通过指针间接访问内存\n\n\n\n* 内存编号是从0开始记录的，一般用十六进制数字表示\n* 可以利用指针变量保存地址\n\n  \n\n### 7.2 指针变量的定义和使用\n\n指针变量定义语法： `数据类型 * 变量名；`\n\n**示例：**\n\n```C++\nint main() {\n\n\t//1、指针的定义\n\tint a = 10; //定义整型变量a\n\t\n\t//指针定义语法： 数据类型 * 变量名 ;\n\tint * p;\n\n\t//指针变量赋值\n\tp = &a; //指针指向变量a的地址\n\tcout << &a << endl; //打印数据a的地址\n\tcout << p << endl;  //打印指针变量p\n\n\t//2、指针的使用\n\t//通过*操作指针变量指向的内存\n\tcout << \"*p = \" << *p << endl;\n\n\tsystem(\"pause\");\n\n\treturn 0;\n}\n```\n\n\n\n指针变量和普通变量的区别\n\n* 普通变量存放的是数据,指针变量存放的是地址\n* 指针变量可以通过\" * \"操作符，操作指针变量指向的内存空间，这个过程称为解引用\n\n\n\n> 总结1： 我们可以通过 & 符号 获取变量的地址\n\n> 总结2：利用指针可以记录地址\n\n> 总结3：对指针变量解引用，可以操作指针指向的内存\n\n\n### 7.3 指针所占内存空间\n\n\n\n提问：指针也是种数据类型，那么这种数据类型占用多少内存空间？\n\n\n\n**示例：**\n\n```C++\nint main() {\n\n\tint a = 10;\n\n\tint * p;\n\tp = &a; //指针指向数据a的地址\n\n\tcout << *p << endl; //* 解引用\n\tcout << sizeof(p) << endl;\n\tcout << sizeof(char *) << endl;\n\tcout << sizeof(float *) << endl;\n\tcout << sizeof(double *) << endl;\n\n\tsystem(\"pause\");\n\n\treturn 0;\n}\n```\n\n\n\n> 总结：所有指针类型在32位操作系统下是4个字节\n\n\n\n### 7.4 空指针和野指针\n\n**空指针**：指针变量指向内存中编号为0的空间\n\n**用途：**初始化指针变量\n\n**注意：**空指针指向的内存是不可以访问的\n\n\n\n**示例1：空指针**\n\n```C++\nint main() {\n\n\t//指针变量p指向内存地址编号为0的空间\n\tint * p = NULL;\n\n\t//访问空指针报错 \n\t//内存编号0 ~255为系统占用内存，不允许用户访问\n\tcout << *p << endl;\n\n\tsystem(\"pause\");\n\n\treturn 0;\n}\n```\n\n\n**野指针**：指针变量指向非法的内存空间\n\n**示例2：野指针**\n\n```C++\nint main() {\n\n\t//指针变量p指向内存地址编号为0x1100的空间\n\tint * p = (int *)0x1100;\n\n\t//访问野指针报错 \n\tcout << *p << endl;\n\n\tsystem(\"pause\");\n\n\treturn 0;\n}\n```\n\n\n\n\n\n> 总结：空指针和野指针都不是我们申请的空间，因此不要访问。\n\n\n\n### 7.5 const修饰指针\n\nconst修饰指针有三种情况\n\n1. const修饰指针   --- 常量指针\n2. const修饰常量   --- 指针常量\n3. const即修饰指针，又修饰常量\n\n\n\n\n**示例：**\n\n\n```c++\nint main() {\n\n\tint a = 10;\n\tint b = 10;\n\n\t//const修饰的是指针，指针指向可以改，指针指向的值不可以更改\n\tconst int * p1 = &a; \n\tp1 = &b; //正确\n\t//*p1 = 100;  报错\n\t\n\n\t//const修饰的是常量，指针指向不可以改，指针指向的值可以更改\n\tint * const p2 = &a;\n\t//p2 = &b; //错误\n\t*p2 = 100; //正确\n\n    //const既修饰指针又修饰常量\n\tconst int * const p3 = &a;\n\t//p3 = &b; //错误\n\t//*p3 = 100; //错误\n\n\tsystem(\"pause\");\n\n\treturn 0;\n}\n```\n\n\n\n> 技巧：看const右侧紧跟着的是指针还是常量, 是指针就是常量指针，是常量就是指针常量\n\n\n\n\n### 7.6 指针和数组\n\n**作用：**利用指针访问数组中元素\n\n**示例：**\n\n```C++\nint main() {\n\n\tint arr[] = { 1,2,3,4,5,6,7,8,9,10 };\n\n\tint * p = arr;  //指向数组的指针\n\n\tcout << \"第一个元素： \" << arr[0] << endl;\n\tcout << \"指针访问第一个元素： \" << *p << endl;\n\n\tfor (int i = 0; i < 10; i++)\n\t{\n\t\t//利用指针遍历数组\n\t\tcout << *p << endl;\n\t\tp++;\n\t}\n\n\tsystem(\"pause\");\n\n\treturn 0;\n}\n```\n\n\n### 7.7 指针和函数\n\n**作用：**利用指针作函数参数，可以修改实参的值\n\n\n\n**示例：**\n\n```C++\n//值传递\nvoid swap1(int a ,int b)\n{\n\tint temp = a;\n\ta = b; \n\tb = temp;\n}\n//地址传递\nvoid swap2(int * p1, int *p2)\n{\n\tint temp = *p1;\n\t*p1 = *p2;\n\t*p2 = temp;\n}\n\nint main() {\n\n\tint a = 10;\n\tint b = 20;\n\tswap1(a, b); // 值传递不会改变实参\n\n\tswap2(&a, &b); //地址传递会改变实参\n\n\tcout << \"a = \" << a << endl;\n\n\tcout << \"b = \" << b << endl;\n\n\tsystem(\"pause\");\n\n\treturn 0;\n}\n```\n\n\n\n> 总结：如果不想修改实参，就用值传递，如果想修改实参，就用地址传递\n\n\n\n\n\n### 7.8 指针、数组、函数\n\n**案例描述：**封装一个函数，利用冒泡排序，实现对整型数组的升序排序\n\n例如数组：int arr[10] = { 4,3,6,9,1,2,10,8,7,5 };\n\n\n\n**示例：**\n\n```c++\n//冒泡排序函数\nvoid bubbleSort(int * arr, int len)  //int * arr 也可以写为int arr[]\n{\n\tfor (int i = 0; i < len - 1; i++)\n\t{\n\t\tfor (int j = 0; j < len - 1 - i; j++)\n\t\t{\n\t\t\tif (arr[j] > arr[j + 1])\n\t\t\t{\n\t\t\t\tint temp = arr[j];\n\t\t\t\tarr[j] = arr[j + 1];\n\t\t\t\tarr[j + 1] = temp;\n\t\t\t}\n\t\t}\n\t}\n}\n\n//打印数组函数\nvoid printArray(int arr[], int len)\n{\n\tfor (int i = 0; i < len; i++)\n\t{\n\t\tcout << arr[i] << endl;\n\t}\n}\n\nint main() {\n\n\tint arr[10] = { 4,3,6,9,1,2,10,8,7,5 };\n\tint len = sizeof(arr) / sizeof(int);\n\n\tbubbleSort(arr, len);\n\n\tprintArray(arr, len);\n\n\tsystem(\"pause\");\n\n\treturn 0;\n}\n```\n\n\n> 总结：当数组名传入到函数作为参数时，被退化为指向首元素的指针","source":"_posts/七。指针.md","raw":"title: 七.指针\nauthor: 连思鑫\ntags:\n  - c++\n  - 指针\ncategories:\n  - ..\n  - C++\n  - C++基础教程\n  - ''\ndate: 2023-03-01 19:30:00\n---\n## 7 指针\n\n### 7.1 指针的基本概念\n\n**指针的作用：** 可以通过指针间接访问内存\n\n\n\n* 内存编号是从0开始记录的，一般用十六进制数字表示\n* 可以利用指针变量保存地址\n\n  \n\n### 7.2 指针变量的定义和使用\n\n指针变量定义语法： `数据类型 * 变量名；`\n\n**示例：**\n\n```C++\nint main() {\n\n\t//1、指针的定义\n\tint a = 10; //定义整型变量a\n\t\n\t//指针定义语法： 数据类型 * 变量名 ;\n\tint * p;\n\n\t//指针变量赋值\n\tp = &a; //指针指向变量a的地址\n\tcout << &a << endl; //打印数据a的地址\n\tcout << p << endl;  //打印指针变量p\n\n\t//2、指针的使用\n\t//通过*操作指针变量指向的内存\n\tcout << \"*p = \" << *p << endl;\n\n\tsystem(\"pause\");\n\n\treturn 0;\n}\n```\n\n\n\n指针变量和普通变量的区别\n\n* 普通变量存放的是数据,指针变量存放的是地址\n* 指针变量可以通过\" * \"操作符，操作指针变量指向的内存空间，这个过程称为解引用\n\n\n\n> 总结1： 我们可以通过 & 符号 获取变量的地址\n\n> 总结2：利用指针可以记录地址\n\n> 总结3：对指针变量解引用，可以操作指针指向的内存\n\n\n### 7.3 指针所占内存空间\n\n\n\n提问：指针也是种数据类型，那么这种数据类型占用多少内存空间？\n\n\n\n**示例：**\n\n```C++\nint main() {\n\n\tint a = 10;\n\n\tint * p;\n\tp = &a; //指针指向数据a的地址\n\n\tcout << *p << endl; //* 解引用\n\tcout << sizeof(p) << endl;\n\tcout << sizeof(char *) << endl;\n\tcout << sizeof(float *) << endl;\n\tcout << sizeof(double *) << endl;\n\n\tsystem(\"pause\");\n\n\treturn 0;\n}\n```\n\n\n\n> 总结：所有指针类型在32位操作系统下是4个字节\n\n\n\n### 7.4 空指针和野指针\n\n**空指针**：指针变量指向内存中编号为0的空间\n\n**用途：**初始化指针变量\n\n**注意：**空指针指向的内存是不可以访问的\n\n\n\n**示例1：空指针**\n\n```C++\nint main() {\n\n\t//指针变量p指向内存地址编号为0的空间\n\tint * p = NULL;\n\n\t//访问空指针报错 \n\t//内存编号0 ~255为系统占用内存，不允许用户访问\n\tcout << *p << endl;\n\n\tsystem(\"pause\");\n\n\treturn 0;\n}\n```\n\n\n**野指针**：指针变量指向非法的内存空间\n\n**示例2：野指针**\n\n```C++\nint main() {\n\n\t//指针变量p指向内存地址编号为0x1100的空间\n\tint * p = (int *)0x1100;\n\n\t//访问野指针报错 \n\tcout << *p << endl;\n\n\tsystem(\"pause\");\n\n\treturn 0;\n}\n```\n\n\n\n\n\n> 总结：空指针和野指针都不是我们申请的空间，因此不要访问。\n\n\n\n### 7.5 const修饰指针\n\nconst修饰指针有三种情况\n\n1. const修饰指针   --- 常量指针\n2. const修饰常量   --- 指针常量\n3. const即修饰指针，又修饰常量\n\n\n\n\n**示例：**\n\n\n```c++\nint main() {\n\n\tint a = 10;\n\tint b = 10;\n\n\t//const修饰的是指针，指针指向可以改，指针指向的值不可以更改\n\tconst int * p1 = &a; \n\tp1 = &b; //正确\n\t//*p1 = 100;  报错\n\t\n\n\t//const修饰的是常量，指针指向不可以改，指针指向的值可以更改\n\tint * const p2 = &a;\n\t//p2 = &b; //错误\n\t*p2 = 100; //正确\n\n    //const既修饰指针又修饰常量\n\tconst int * const p3 = &a;\n\t//p3 = &b; //错误\n\t//*p3 = 100; //错误\n\n\tsystem(\"pause\");\n\n\treturn 0;\n}\n```\n\n\n\n> 技巧：看const右侧紧跟着的是指针还是常量, 是指针就是常量指针，是常量就是指针常量\n\n\n\n\n### 7.6 指针和数组\n\n**作用：**利用指针访问数组中元素\n\n**示例：**\n\n```C++\nint main() {\n\n\tint arr[] = { 1,2,3,4,5,6,7,8,9,10 };\n\n\tint * p = arr;  //指向数组的指针\n\n\tcout << \"第一个元素： \" << arr[0] << endl;\n\tcout << \"指针访问第一个元素： \" << *p << endl;\n\n\tfor (int i = 0; i < 10; i++)\n\t{\n\t\t//利用指针遍历数组\n\t\tcout << *p << endl;\n\t\tp++;\n\t}\n\n\tsystem(\"pause\");\n\n\treturn 0;\n}\n```\n\n\n### 7.7 指针和函数\n\n**作用：**利用指针作函数参数，可以修改实参的值\n\n\n\n**示例：**\n\n```C++\n//值传递\nvoid swap1(int a ,int b)\n{\n\tint temp = a;\n\ta = b; \n\tb = temp;\n}\n//地址传递\nvoid swap2(int * p1, int *p2)\n{\n\tint temp = *p1;\n\t*p1 = *p2;\n\t*p2 = temp;\n}\n\nint main() {\n\n\tint a = 10;\n\tint b = 20;\n\tswap1(a, b); // 值传递不会改变实参\n\n\tswap2(&a, &b); //地址传递会改变实参\n\n\tcout << \"a = \" << a << endl;\n\n\tcout << \"b = \" << b << endl;\n\n\tsystem(\"pause\");\n\n\treturn 0;\n}\n```\n\n\n\n> 总结：如果不想修改实参，就用值传递，如果想修改实参，就用地址传递\n\n\n\n\n\n### 7.8 指针、数组、函数\n\n**案例描述：**封装一个函数，利用冒泡排序，实现对整型数组的升序排序\n\n例如数组：int arr[10] = { 4,3,6,9,1,2,10,8,7,5 };\n\n\n\n**示例：**\n\n```c++\n//冒泡排序函数\nvoid bubbleSort(int * arr, int len)  //int * arr 也可以写为int arr[]\n{\n\tfor (int i = 0; i < len - 1; i++)\n\t{\n\t\tfor (int j = 0; j < len - 1 - i; j++)\n\t\t{\n\t\t\tif (arr[j] > arr[j + 1])\n\t\t\t{\n\t\t\t\tint temp = arr[j];\n\t\t\t\tarr[j] = arr[j + 1];\n\t\t\t\tarr[j + 1] = temp;\n\t\t\t}\n\t\t}\n\t}\n}\n\n//打印数组函数\nvoid printArray(int arr[], int len)\n{\n\tfor (int i = 0; i < len; i++)\n\t{\n\t\tcout << arr[i] << endl;\n\t}\n}\n\nint main() {\n\n\tint arr[10] = { 4,3,6,9,1,2,10,8,7,5 };\n\tint len = sizeof(arr) / sizeof(int);\n\n\tbubbleSort(arr, len);\n\n\tprintArray(arr, len);\n\n\tsystem(\"pause\");\n\n\treturn 0;\n}\n```\n\n\n> 总结：当数组名传入到函数作为参数时，被退化为指向首元素的指针","slug":"七。指针","published":1,"updated":"2023-03-01T12:02:51.839Z","_id":"clifr2v1v001m14uo8rhber6c","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"7-指针\"><a href=\"#7-指针\" class=\"headerlink\" title=\"7 指针\"></a>7 指针</h2><h3 id=\"7-1-指针的基本概念\"><a href=\"#7-1-指针的基本概念\" class=\"headerlink\" title=\"7.1 指针的基本概念\"></a>7.1 指针的基本概念</h3><p><strong>指针的作用：</strong> 可以通过指针间接访问内存</p>\n<ul>\n<li>内存编号是从0开始记录的，一般用十六进制数字表示</li>\n<li>可以利用指针变量保存地址</li>\n</ul>\n<h3 id=\"7-2-指针变量的定义和使用\"><a href=\"#7-2-指针变量的定义和使用\" class=\"headerlink\" title=\"7.2 指针变量的定义和使用\"></a>7.2 指针变量的定义和使用</h3><p>指针变量定义语法： <code>数据类型 * 变量名；</code></p>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//1、指针的定义</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> a = <span class=\"number\">10</span>; <span class=\"comment\">//定义整型变量a</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//指针定义语法： 数据类型 * 变量名 ;</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> * p;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//指针变量赋值</span></span><br><span class=\"line\">\tp = &amp;a; <span class=\"comment\">//指针指向变量a的地址</span></span><br><span class=\"line\">\tcout &lt;&lt; &amp;a &lt;&lt; endl; <span class=\"comment\">//打印数据a的地址</span></span><br><span class=\"line\">\tcout &lt;&lt; p &lt;&lt; endl;  <span class=\"comment\">//打印指针变量p</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//2、指针的使用</span></span><br><span class=\"line\">\t<span class=\"comment\">//通过*操作指针变量指向的内存</span></span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;*p = &quot;</span> &lt;&lt; *p &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">system</span>(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>指针变量和普通变量的区别</p>\n<ul>\n<li>普通变量存放的是数据,指针变量存放的是地址</li>\n<li>指针变量可以通过” * “操作符，操作指针变量指向的内存空间，这个过程称为解引用</li>\n</ul>\n<blockquote>\n<p>总结1： 我们可以通过 &amp; 符号 获取变量的地址</p>\n</blockquote>\n<blockquote>\n<p>总结2：利用指针可以记录地址</p>\n</blockquote>\n<blockquote>\n<p>总结3：对指针变量解引用，可以操作指针指向的内存</p>\n</blockquote>\n<h3 id=\"7-3-指针所占内存空间\"><a href=\"#7-3-指针所占内存空间\" class=\"headerlink\" title=\"7.3 指针所占内存空间\"></a>7.3 指针所占内存空间</h3><p>提问：指针也是种数据类型，那么这种数据类型占用多少内存空间？</p>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"type\">int</span> a = <span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"type\">int</span> * p;</span><br><span class=\"line\">\tp = &amp;a; <span class=\"comment\">//指针指向数据a的地址</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tcout &lt;&lt; *p &lt;&lt; endl; <span class=\"comment\">//* 解引用</span></span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"built_in\">sizeof</span>(p) &lt;&lt; endl;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"built_in\">sizeof</span>(<span class=\"type\">char</span> *) &lt;&lt; endl;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"built_in\">sizeof</span>(<span class=\"type\">float</span> *) &lt;&lt; endl;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"built_in\">sizeof</span>(<span class=\"type\">double</span> *) &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">system</span>(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<blockquote>\n<p>总结：所有指针类型在32位操作系统下是4个字节</p>\n</blockquote>\n<h3 id=\"7-4-空指针和野指针\"><a href=\"#7-4-空指针和野指针\" class=\"headerlink\" title=\"7.4 空指针和野指针\"></a>7.4 空指针和野指针</h3><p><strong>空指针</strong>：指针变量指向内存中编号为0的空间</p>\n<p><strong>用途：</strong>初始化指针变量</p>\n<p><strong>注意：</strong>空指针指向的内存是不可以访问的</p>\n<p><strong>示例1：空指针</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//指针变量p指向内存地址编号为0的空间</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> * p = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//访问空指针报错 </span></span><br><span class=\"line\">\t<span class=\"comment\">//内存编号0 ~255为系统占用内存，不允许用户访问</span></span><br><span class=\"line\">\tcout &lt;&lt; *p &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">system</span>(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<p><strong>野指针</strong>：指针变量指向非法的内存空间</p>\n<p><strong>示例2：野指针</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//指针变量p指向内存地址编号为0x1100的空间</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> * p = (<span class=\"type\">int</span> *)<span class=\"number\">0x1100</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//访问野指针报错 </span></span><br><span class=\"line\">\tcout &lt;&lt; *p &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">system</span>(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<blockquote>\n<p>总结：空指针和野指针都不是我们申请的空间，因此不要访问。</p>\n</blockquote>\n<h3 id=\"7-5-const修饰指针\"><a href=\"#7-5-const修饰指针\" class=\"headerlink\" title=\"7.5 const修饰指针\"></a>7.5 const修饰指针</h3><p>const修饰指针有三种情况</p>\n<ol>\n<li>const修饰指针   — 常量指针</li>\n<li>const修饰常量   — 指针常量</li>\n<li>const即修饰指针，又修饰常量</li>\n</ol>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"type\">int</span> a = <span class=\"number\">10</span>;</span><br><span class=\"line\">\t<span class=\"type\">int</span> b = <span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//const修饰的是指针，指针指向可以改，指针指向的值不可以更改</span></span><br><span class=\"line\">\t<span class=\"type\">const</span> <span class=\"type\">int</span> * p1 = &amp;a; </span><br><span class=\"line\">\tp1 = &amp;b; <span class=\"comment\">//正确</span></span><br><span class=\"line\">\t<span class=\"comment\">//*p1 = 100;  报错</span></span><br><span class=\"line\">\t</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//const修饰的是常量，指针指向不可以改，指针指向的值可以更改</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> * <span class=\"type\">const</span> p2 = &amp;a;</span><br><span class=\"line\">\t<span class=\"comment\">//p2 = &amp;b; //错误</span></span><br><span class=\"line\">\t*p2 = <span class=\"number\">100</span>; <span class=\"comment\">//正确</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//const既修饰指针又修饰常量</span></span><br><span class=\"line\">\t<span class=\"type\">const</span> <span class=\"type\">int</span> * <span class=\"type\">const</span> p3 = &amp;a;</span><br><span class=\"line\">\t<span class=\"comment\">//p3 = &amp;b; //错误</span></span><br><span class=\"line\">\t<span class=\"comment\">//*p3 = 100; //错误</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">system</span>(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<blockquote>\n<p>技巧：看const右侧紧跟着的是指针还是常量, 是指针就是常量指针，是常量就是指针常量</p>\n</blockquote>\n<h3 id=\"7-6-指针和数组\"><a href=\"#7-6-指针和数组\" class=\"headerlink\" title=\"7.6 指针和数组\"></a>7.6 指针和数组</h3><p><strong>作用：</strong>利用指针访问数组中元素</p>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"type\">int</span> arr[] = &#123; <span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">7</span>,<span class=\"number\">8</span>,<span class=\"number\">9</span>,<span class=\"number\">10</span> &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"type\">int</span> * p = arr;  <span class=\"comment\">//指向数组的指针</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;第一个元素： &quot;</span> &lt;&lt; arr[<span class=\"number\">0</span>] &lt;&lt; endl;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;指针访问第一个元素： &quot;</span> &lt;&lt; *p &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//利用指针遍历数组</span></span><br><span class=\"line\">\t\tcout &lt;&lt; *p &lt;&lt; endl;</span><br><span class=\"line\">\t\tp++;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">system</span>(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"7-7-指针和函数\"><a href=\"#7-7-指针和函数\" class=\"headerlink\" title=\"7.7 指针和函数\"></a>7.7 指针和函数</h3><p><strong>作用：</strong>利用指针作函数参数，可以修改实参的值</p>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//值传递</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">swap1</span><span class=\"params\">(<span class=\"type\">int</span> a ,<span class=\"type\">int</span> b)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> temp = a;</span><br><span class=\"line\">\ta = b; </span><br><span class=\"line\">\tb = temp;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//地址传递</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">swap2</span><span class=\"params\">(<span class=\"type\">int</span> * p1, <span class=\"type\">int</span> *p2)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> temp = *p1;</span><br><span class=\"line\">\t*p1 = *p2;</span><br><span class=\"line\">\t*p2 = temp;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"type\">int</span> a = <span class=\"number\">10</span>;</span><br><span class=\"line\">\t<span class=\"type\">int</span> b = <span class=\"number\">20</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">swap1</span>(a, b); <span class=\"comment\">// 值传递不会改变实参</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">swap2</span>(&amp;a, &amp;b); <span class=\"comment\">//地址传递会改变实参</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;a = &quot;</span> &lt;&lt; a &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;b = &quot;</span> &lt;&lt; b &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">system</span>(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<blockquote>\n<p>总结：如果不想修改实参，就用值传递，如果想修改实参，就用地址传递</p>\n</blockquote>\n<h3 id=\"7-8-指针、数组、函数\"><a href=\"#7-8-指针、数组、函数\" class=\"headerlink\" title=\"7.8 指针、数组、函数\"></a>7.8 指针、数组、函数</h3><p><strong>案例描述：</strong>封装一个函数，利用冒泡排序，实现对整型数组的升序排序</p>\n<p>例如数组：int arr[10] = { 4,3,6,9,1,2,10,8,7,5 };</p>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//冒泡排序函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">bubbleSort</span><span class=\"params\">(<span class=\"type\">int</span> * arr, <span class=\"type\">int</span> len)</span>  <span class=\"comment\">//int * arr 也可以写为int arr[]</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; len - <span class=\"number\">1</span>; i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">0</span>; j &lt; len - <span class=\"number\">1</span> - i; j++)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (arr[j] &gt; arr[j + <span class=\"number\">1</span>])</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"type\">int</span> temp = arr[j];</span><br><span class=\"line\">\t\t\t\tarr[j] = arr[j + <span class=\"number\">1</span>];</span><br><span class=\"line\">\t\t\t\tarr[j + <span class=\"number\">1</span>] = temp;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//打印数组函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">printArray</span><span class=\"params\">(<span class=\"type\">int</span> arr[], <span class=\"type\">int</span> len)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; len; i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tcout &lt;&lt; arr[i] &lt;&lt; endl;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"type\">int</span> arr[<span class=\"number\">10</span>] = &#123; <span class=\"number\">4</span>,<span class=\"number\">3</span>,<span class=\"number\">6</span>,<span class=\"number\">9</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">10</span>,<span class=\"number\">8</span>,<span class=\"number\">7</span>,<span class=\"number\">5</span> &#125;;</span><br><span class=\"line\">\t<span class=\"type\">int</span> len = <span class=\"built_in\">sizeof</span>(arr) / <span class=\"built_in\">sizeof</span>(<span class=\"type\">int</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">bubbleSort</span>(arr, len);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">printArray</span>(arr, len);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">system</span>(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<blockquote>\n<p>总结：当数组名传入到函数作为参数时，被退化为指向首元素的指针</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"7-指针\"><a href=\"#7-指针\" class=\"headerlink\" title=\"7 指针\"></a>7 指针</h2><h3 id=\"7-1-指针的基本概念\"><a href=\"#7-1-指针的基本概念\" class=\"headerlink\" title=\"7.1 指针的基本概念\"></a>7.1 指针的基本概念</h3><p><strong>指针的作用：</strong> 可以通过指针间接访问内存</p>\n<ul>\n<li>内存编号是从0开始记录的，一般用十六进制数字表示</li>\n<li>可以利用指针变量保存地址</li>\n</ul>\n<h3 id=\"7-2-指针变量的定义和使用\"><a href=\"#7-2-指针变量的定义和使用\" class=\"headerlink\" title=\"7.2 指针变量的定义和使用\"></a>7.2 指针变量的定义和使用</h3><p>指针变量定义语法： <code>数据类型 * 变量名；</code></p>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//1、指针的定义</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> a = <span class=\"number\">10</span>; <span class=\"comment\">//定义整型变量a</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//指针定义语法： 数据类型 * 变量名 ;</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> * p;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//指针变量赋值</span></span><br><span class=\"line\">\tp = &amp;a; <span class=\"comment\">//指针指向变量a的地址</span></span><br><span class=\"line\">\tcout &lt;&lt; &amp;a &lt;&lt; endl; <span class=\"comment\">//打印数据a的地址</span></span><br><span class=\"line\">\tcout &lt;&lt; p &lt;&lt; endl;  <span class=\"comment\">//打印指针变量p</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//2、指针的使用</span></span><br><span class=\"line\">\t<span class=\"comment\">//通过*操作指针变量指向的内存</span></span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;*p = &quot;</span> &lt;&lt; *p &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">system</span>(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>指针变量和普通变量的区别</p>\n<ul>\n<li>普通变量存放的是数据,指针变量存放的是地址</li>\n<li>指针变量可以通过” * “操作符，操作指针变量指向的内存空间，这个过程称为解引用</li>\n</ul>\n<blockquote>\n<p>总结1： 我们可以通过 &amp; 符号 获取变量的地址</p>\n</blockquote>\n<blockquote>\n<p>总结2：利用指针可以记录地址</p>\n</blockquote>\n<blockquote>\n<p>总结3：对指针变量解引用，可以操作指针指向的内存</p>\n</blockquote>\n<h3 id=\"7-3-指针所占内存空间\"><a href=\"#7-3-指针所占内存空间\" class=\"headerlink\" title=\"7.3 指针所占内存空间\"></a>7.3 指针所占内存空间</h3><p>提问：指针也是种数据类型，那么这种数据类型占用多少内存空间？</p>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"type\">int</span> a = <span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"type\">int</span> * p;</span><br><span class=\"line\">\tp = &amp;a; <span class=\"comment\">//指针指向数据a的地址</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tcout &lt;&lt; *p &lt;&lt; endl; <span class=\"comment\">//* 解引用</span></span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"built_in\">sizeof</span>(p) &lt;&lt; endl;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"built_in\">sizeof</span>(<span class=\"type\">char</span> *) &lt;&lt; endl;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"built_in\">sizeof</span>(<span class=\"type\">float</span> *) &lt;&lt; endl;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"built_in\">sizeof</span>(<span class=\"type\">double</span> *) &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">system</span>(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<blockquote>\n<p>总结：所有指针类型在32位操作系统下是4个字节</p>\n</blockquote>\n<h3 id=\"7-4-空指针和野指针\"><a href=\"#7-4-空指针和野指针\" class=\"headerlink\" title=\"7.4 空指针和野指针\"></a>7.4 空指针和野指针</h3><p><strong>空指针</strong>：指针变量指向内存中编号为0的空间</p>\n<p><strong>用途：</strong>初始化指针变量</p>\n<p><strong>注意：</strong>空指针指向的内存是不可以访问的</p>\n<p><strong>示例1：空指针</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//指针变量p指向内存地址编号为0的空间</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> * p = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//访问空指针报错 </span></span><br><span class=\"line\">\t<span class=\"comment\">//内存编号0 ~255为系统占用内存，不允许用户访问</span></span><br><span class=\"line\">\tcout &lt;&lt; *p &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">system</span>(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<p><strong>野指针</strong>：指针变量指向非法的内存空间</p>\n<p><strong>示例2：野指针</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//指针变量p指向内存地址编号为0x1100的空间</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> * p = (<span class=\"type\">int</span> *)<span class=\"number\">0x1100</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//访问野指针报错 </span></span><br><span class=\"line\">\tcout &lt;&lt; *p &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">system</span>(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<blockquote>\n<p>总结：空指针和野指针都不是我们申请的空间，因此不要访问。</p>\n</blockquote>\n<h3 id=\"7-5-const修饰指针\"><a href=\"#7-5-const修饰指针\" class=\"headerlink\" title=\"7.5 const修饰指针\"></a>7.5 const修饰指针</h3><p>const修饰指针有三种情况</p>\n<ol>\n<li>const修饰指针   — 常量指针</li>\n<li>const修饰常量   — 指针常量</li>\n<li>const即修饰指针，又修饰常量</li>\n</ol>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"type\">int</span> a = <span class=\"number\">10</span>;</span><br><span class=\"line\">\t<span class=\"type\">int</span> b = <span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//const修饰的是指针，指针指向可以改，指针指向的值不可以更改</span></span><br><span class=\"line\">\t<span class=\"type\">const</span> <span class=\"type\">int</span> * p1 = &amp;a; </span><br><span class=\"line\">\tp1 = &amp;b; <span class=\"comment\">//正确</span></span><br><span class=\"line\">\t<span class=\"comment\">//*p1 = 100;  报错</span></span><br><span class=\"line\">\t</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//const修饰的是常量，指针指向不可以改，指针指向的值可以更改</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> * <span class=\"type\">const</span> p2 = &amp;a;</span><br><span class=\"line\">\t<span class=\"comment\">//p2 = &amp;b; //错误</span></span><br><span class=\"line\">\t*p2 = <span class=\"number\">100</span>; <span class=\"comment\">//正确</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//const既修饰指针又修饰常量</span></span><br><span class=\"line\">\t<span class=\"type\">const</span> <span class=\"type\">int</span> * <span class=\"type\">const</span> p3 = &amp;a;</span><br><span class=\"line\">\t<span class=\"comment\">//p3 = &amp;b; //错误</span></span><br><span class=\"line\">\t<span class=\"comment\">//*p3 = 100; //错误</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">system</span>(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<blockquote>\n<p>技巧：看const右侧紧跟着的是指针还是常量, 是指针就是常量指针，是常量就是指针常量</p>\n</blockquote>\n<h3 id=\"7-6-指针和数组\"><a href=\"#7-6-指针和数组\" class=\"headerlink\" title=\"7.6 指针和数组\"></a>7.6 指针和数组</h3><p><strong>作用：</strong>利用指针访问数组中元素</p>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"type\">int</span> arr[] = &#123; <span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">7</span>,<span class=\"number\">8</span>,<span class=\"number\">9</span>,<span class=\"number\">10</span> &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"type\">int</span> * p = arr;  <span class=\"comment\">//指向数组的指针</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;第一个元素： &quot;</span> &lt;&lt; arr[<span class=\"number\">0</span>] &lt;&lt; endl;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;指针访问第一个元素： &quot;</span> &lt;&lt; *p &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//利用指针遍历数组</span></span><br><span class=\"line\">\t\tcout &lt;&lt; *p &lt;&lt; endl;</span><br><span class=\"line\">\t\tp++;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">system</span>(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"7-7-指针和函数\"><a href=\"#7-7-指针和函数\" class=\"headerlink\" title=\"7.7 指针和函数\"></a>7.7 指针和函数</h3><p><strong>作用：</strong>利用指针作函数参数，可以修改实参的值</p>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//值传递</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">swap1</span><span class=\"params\">(<span class=\"type\">int</span> a ,<span class=\"type\">int</span> b)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> temp = a;</span><br><span class=\"line\">\ta = b; </span><br><span class=\"line\">\tb = temp;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//地址传递</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">swap2</span><span class=\"params\">(<span class=\"type\">int</span> * p1, <span class=\"type\">int</span> *p2)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> temp = *p1;</span><br><span class=\"line\">\t*p1 = *p2;</span><br><span class=\"line\">\t*p2 = temp;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"type\">int</span> a = <span class=\"number\">10</span>;</span><br><span class=\"line\">\t<span class=\"type\">int</span> b = <span class=\"number\">20</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">swap1</span>(a, b); <span class=\"comment\">// 值传递不会改变实参</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">swap2</span>(&amp;a, &amp;b); <span class=\"comment\">//地址传递会改变实参</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;a = &quot;</span> &lt;&lt; a &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;b = &quot;</span> &lt;&lt; b &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">system</span>(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<blockquote>\n<p>总结：如果不想修改实参，就用值传递，如果想修改实参，就用地址传递</p>\n</blockquote>\n<h3 id=\"7-8-指针、数组、函数\"><a href=\"#7-8-指针、数组、函数\" class=\"headerlink\" title=\"7.8 指针、数组、函数\"></a>7.8 指针、数组、函数</h3><p><strong>案例描述：</strong>封装一个函数，利用冒泡排序，实现对整型数组的升序排序</p>\n<p>例如数组：int arr[10] = { 4,3,6,9,1,2,10,8,7,5 };</p>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//冒泡排序函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">bubbleSort</span><span class=\"params\">(<span class=\"type\">int</span> * arr, <span class=\"type\">int</span> len)</span>  <span class=\"comment\">//int * arr 也可以写为int arr[]</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; len - <span class=\"number\">1</span>; i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">0</span>; j &lt; len - <span class=\"number\">1</span> - i; j++)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (arr[j] &gt; arr[j + <span class=\"number\">1</span>])</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"type\">int</span> temp = arr[j];</span><br><span class=\"line\">\t\t\t\tarr[j] = arr[j + <span class=\"number\">1</span>];</span><br><span class=\"line\">\t\t\t\tarr[j + <span class=\"number\">1</span>] = temp;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//打印数组函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">printArray</span><span class=\"params\">(<span class=\"type\">int</span> arr[], <span class=\"type\">int</span> len)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; len; i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tcout &lt;&lt; arr[i] &lt;&lt; endl;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"type\">int</span> arr[<span class=\"number\">10</span>] = &#123; <span class=\"number\">4</span>,<span class=\"number\">3</span>,<span class=\"number\">6</span>,<span class=\"number\">9</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">10</span>,<span class=\"number\">8</span>,<span class=\"number\">7</span>,<span class=\"number\">5</span> &#125;;</span><br><span class=\"line\">\t<span class=\"type\">int</span> len = <span class=\"built_in\">sizeof</span>(arr) / <span class=\"built_in\">sizeof</span>(<span class=\"type\">int</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">bubbleSort</span>(arr, len);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">printArray</span>(arr, len);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">system</span>(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<blockquote>\n<p>总结：当数组名传入到函数作为参数时，被退化为指向首元素的指针</p>\n</blockquote>\n"},{"title":"三.运算符","author":"连思鑫","date":"2023-03-01T11:00:00.000Z","_content":"## 3 运算符\n\n**作用：**用于执行代码的运算\n\n本章我们主要讲解以下几类运算符：\n\n| **运算符类型** | **作用**                               |\n| -------------- | -------------------------------------- |\n| 算术运算符     | 用于处理四则运算                       |\n| 赋值运算符     | 用于将表达式的值赋给变量               |\n| 比较运算符     | 用于表达式的比较，并返回一个真值或假值 |\n| 逻辑运算符     | 用于根据表达式的值返回真值或假值       |\n\n### 3.1 算术运算符\n\n**作用**：用于处理四则运算 \n\n算术运算符包括以下符号：\n\n| **运算符** | **术语**   | **示例**    | **结果**  |\n| ---------- | ---------- | ----------- | --------- |\n| +          | 正号       | +3          | 3         |\n| -          | 负号       | -3          | -3        |\n| +          | 加         | 10 + 5      | 15        |\n| -          | 减         | 10 - 5      | 5         |\n| *          | 乘         | 10 * 5      | 50        |\n| /          | 除         | 10 / 5      | 2         |\n| %          | 取模(取余) | 10 % 3      | 1         |\n| ++         | 前置递增   | a=2; b=++a; | a=3; b=3; |\n| ++         | 后置递增   | a=2; b=a++; | a=3; b=2; |\n| --         | 前置递减   | a=2; b=--a; | a=1; b=1; |\n| --         | 后置递减   | a=2; b=a--; | a=1; b=2; |\n\n**示例1：**\n\n```C++\n//加减乘除\nint main() {\n\n\tint a1 = 10;\n\tint b1 = 3;\n\n\tcout << a1 + b1 << endl;\n\tcout << a1 - b1 << endl;\n\tcout << a1 * b1 << endl;\n\tcout << a1 / b1 << endl;  //两个整数相除结果依然是整数\n\n\tint a2 = 10;\n\tint b2 = 20;\n\tcout << a2 / b2 << endl; \n\n\tint a3 = 10;\n\tint b3 = 0;\n\t//cout << a3 / b3 << endl; //报错，除数不可以为0\n\n\n\t//两个小数可以相除\n\tdouble d1 = 0.5;\n\tdouble d2 = 0.25;\n\tcout << d1 / d2 << endl;\n\n\tsystem(\"pause\");\n\n\treturn 0;\n}\n```\n\n> 总结：在除法运算中，除数不能为0\n\n\n\n\n\n**示例2：**\n\n```C++\n//取模\nint main() {\n\n\tint a1 = 10;\n\tint b1 = 3;\n\n\tcout << 10 % 3 << endl;\n\n\tint a2 = 10;\n\tint b2 = 20;\n\n\tcout << a2 % b2 << endl;\n\n\tint a3 = 10;\n\tint b3 = 0;\n\n\t//cout << a3 % b3 << endl; //取模运算时，除数也不能为0\n\n\t//两个小数不可以取模\n\tdouble d1 = 3.14;\n\tdouble d2 = 1.1;\n\n\t//cout << d1 % d2 << endl;\n\n\tsystem(\"pause\");\n\n\treturn 0;\n}\n\n```\n\n> 总结：只有整型变量可以进行取模运算\n\n\n\n**示例3：**\n\n```C++\n//递增\nint main() {\n\n\t//后置递增\n\tint a = 10;\n\ta++; //等价于a = a + 1\n\tcout << a << endl; // 11\n\n\t//前置递增\n\tint b = 10;\n\t++b;\n\tcout << b << endl; // 11\n\n\t//区别\n\t//前置递增先对变量进行++，再计算表达式\n\tint a2 = 10;\n\tint b2 = ++a2 * 10;\n\tcout << b2 << endl;\n\n\t//后置递增先计算表达式，后对变量进行++\n\tint a3 = 10;\n\tint b3 = a3++ * 10;\n\tcout << b3 << endl;\n\n\tsystem(\"pause\");\n\n\treturn 0;\n}\n\n```\n\n\n\n> 总结：前置递增先对变量进行++，再计算表达式，后置递增相反\n\n\n\n\n\n\n\n\n\n### 3.2 赋值运算符\n\n**作用：**用于将表达式的值赋给变量\n\n赋值运算符包括以下几个符号：\n\n| **运算符** | **术语** | **示例**   | **结果**  |\n| ---------- | -------- | ---------- | --------- |\n| =          | 赋值     | a=2; b=3;  | a=2; b=3; |\n| +=         | 加等于   | a=0; a+=2; | a=2;      |\n| -=         | 减等于   | a=5; a-=3; | a=2;      |\n| *=         | 乘等于   | a=2; a*=2; | a=4;      |\n| /=         | 除等于   | a=4; a/=2; | a=2;      |\n| %=         | 模等于   | a=3; a%2;  | a=1;      |\n\n\n\n**示例：**\n\n```C++\nint main() {\n\n\t//赋值运算符\n\n\t// =\n\tint a = 10;\n\ta = 100;\n\tcout << \"a = \" << a << endl;\n\n\t// +=\n\ta = 10;\n\ta += 2; // a = a + 2;\n\tcout << \"a = \" << a << endl;\n\n\t// -=\n\ta = 10;\n\ta -= 2; // a = a - 2\n\tcout << \"a = \" << a << endl;\n\n\t// *=\n\ta = 10;\n\ta *= 2; // a = a * 2\n\tcout << \"a = \" << a << endl;\n\n\t// /=\n\ta = 10;\n\ta /= 2;  // a = a / 2;\n\tcout << \"a = \" << a << endl;\n\n\t// %=\n\ta = 10;\n\ta %= 2;  // a = a % 2;\n\tcout << \"a = \" << a << endl;\n\n\tsystem(\"pause\");\n\n\treturn 0;\n}\n```\n\n\n\n\n\n\n\n\n\n### 3.3 比较运算符\n\n**作用：**用于表达式的比较，并返回一个真值或假值\n\n比较运算符有以下符号：\n\n| **运算符** | **术语** | **示例** | **结果** |\n| ---------- | -------- | -------- | -------- |\n| ==         | 相等于   | 4 == 3   | 0        |\n| !=         | 不等于   | 4 != 3   | 1        |\n| <          | 小于     | 4 < 3    | 0        |\n| \\>         | 大于     | 4 > 3    | 1        |\n| <=         | 小于等于 | 4 <= 3   | 0        |\n| \\>=        | 大于等于 | 4 >= 1   | 1        |\n\n示例：\n\n```C++\nint main() {\n\n\tint a = 10;\n\tint b = 20;\n\n\tcout << (a == b) << endl; // 0 \n\n\tcout << (a != b) << endl; // 1\n\n\tcout << (a > b) << endl; // 0\n\n\tcout << (a < b) << endl; // 1\n\n\tcout << (a >= b) << endl; // 0\n\n\tcout << (a <= b) << endl; // 1\n\t\n\tsystem(\"pause\");\n\n\treturn 0;\n}\n```\n\n\n\n> 注意：C和C++ 语言的比较运算中， ==“真”用数字“1”来表示， “假”用数字“0”来表示。== \n\n\n\n\n\n\n\n\n\n\n\n\n\n### 3.4 逻辑运算符\n\n**作用：**用于根据表达式的值返回真值或假值\n\n逻辑运算符有以下符号：\n\n| **运算符** | **术语** | **示例** | **结果**                                                 |\n| ---------- | -------- | -------- | -------------------------------------------------------- |\n| !          | 非       | !a       | 如果a为假，则!a为真；  如果a为真，则!a为假。             |\n| &&         | 与       | a && b   | 如果a和b都为真，则结果为真，否则为假。                   |\n| \\|\\|       | 或       | a \\|\\| b | 如果a和b有一个为真，则结果为真，二者都为假时，结果为假。 |\n\n**示例1：**逻辑非\n\n```C++\n//逻辑运算符  --- 非\nint main() {\n\n\tint a = 10;\n\n\tcout << !a << endl; // 0\n\n\tcout << !!a << endl; // 1\n\n\tsystem(\"pause\");\n\n\treturn 0;\n}\n```\n\n> 总结： 真变假，假变真\n\n\n\n\n\n**示例2：**逻辑与\n\n```C++\n//逻辑运算符  --- 与\nint main() {\n\n\tint a = 10;\n\tint b = 10;\n\n\tcout << (a && b) << endl;// 1\n\n\ta = 10;\n\tb = 0;\n\n\tcout << (a && b) << endl;// 0 \n\n\ta = 0;\n\tb = 0;\n\n\tcout << (a && b) << endl;// 0\n\n\tsystem(\"pause\");\n\n\treturn 0;\n}\n\n```\n\n> 总结：逻辑==与==运算符总结： ==同真为真，其余为假==\n\n\n\n\n\n\n\n**示例3：**逻辑或\n\n```c++\n//逻辑运算符  --- 或\nint main() {\n\n\tint a = 10;\n\tint b = 10;\n\n\tcout << (a || b) << endl;// 1\n\n\ta = 10;\n\tb = 0;\n\n\tcout << (a || b) << endl;// 1 \n\n\ta = 0;\n\tb = 0;\n\n\tcout << (a || b) << endl;// 0\n\n\tsystem(\"pause\");\n\n\treturn 0;\n}\n```\n\n> 逻辑==或==运算符总结： ==同假为假，其余为真==\n","source":"_posts/三-运算符.md","raw":"title: 三.运算符\nauthor: 连思鑫\ntags:\n  - c++\n  - 运算符\ncategories:\n  - ..\n  - C++\n  - C++基础教程\n  - ''\ndate: 2023-03-01 19:00:00\n---\n## 3 运算符\n\n**作用：**用于执行代码的运算\n\n本章我们主要讲解以下几类运算符：\n\n| **运算符类型** | **作用**                               |\n| -------------- | -------------------------------------- |\n| 算术运算符     | 用于处理四则运算                       |\n| 赋值运算符     | 用于将表达式的值赋给变量               |\n| 比较运算符     | 用于表达式的比较，并返回一个真值或假值 |\n| 逻辑运算符     | 用于根据表达式的值返回真值或假值       |\n\n### 3.1 算术运算符\n\n**作用**：用于处理四则运算 \n\n算术运算符包括以下符号：\n\n| **运算符** | **术语**   | **示例**    | **结果**  |\n| ---------- | ---------- | ----------- | --------- |\n| +          | 正号       | +3          | 3         |\n| -          | 负号       | -3          | -3        |\n| +          | 加         | 10 + 5      | 15        |\n| -          | 减         | 10 - 5      | 5         |\n| *          | 乘         | 10 * 5      | 50        |\n| /          | 除         | 10 / 5      | 2         |\n| %          | 取模(取余) | 10 % 3      | 1         |\n| ++         | 前置递增   | a=2; b=++a; | a=3; b=3; |\n| ++         | 后置递增   | a=2; b=a++; | a=3; b=2; |\n| --         | 前置递减   | a=2; b=--a; | a=1; b=1; |\n| --         | 后置递减   | a=2; b=a--; | a=1; b=2; |\n\n**示例1：**\n\n```C++\n//加减乘除\nint main() {\n\n\tint a1 = 10;\n\tint b1 = 3;\n\n\tcout << a1 + b1 << endl;\n\tcout << a1 - b1 << endl;\n\tcout << a1 * b1 << endl;\n\tcout << a1 / b1 << endl;  //两个整数相除结果依然是整数\n\n\tint a2 = 10;\n\tint b2 = 20;\n\tcout << a2 / b2 << endl; \n\n\tint a3 = 10;\n\tint b3 = 0;\n\t//cout << a3 / b3 << endl; //报错，除数不可以为0\n\n\n\t//两个小数可以相除\n\tdouble d1 = 0.5;\n\tdouble d2 = 0.25;\n\tcout << d1 / d2 << endl;\n\n\tsystem(\"pause\");\n\n\treturn 0;\n}\n```\n\n> 总结：在除法运算中，除数不能为0\n\n\n\n\n\n**示例2：**\n\n```C++\n//取模\nint main() {\n\n\tint a1 = 10;\n\tint b1 = 3;\n\n\tcout << 10 % 3 << endl;\n\n\tint a2 = 10;\n\tint b2 = 20;\n\n\tcout << a2 % b2 << endl;\n\n\tint a3 = 10;\n\tint b3 = 0;\n\n\t//cout << a3 % b3 << endl; //取模运算时，除数也不能为0\n\n\t//两个小数不可以取模\n\tdouble d1 = 3.14;\n\tdouble d2 = 1.1;\n\n\t//cout << d1 % d2 << endl;\n\n\tsystem(\"pause\");\n\n\treturn 0;\n}\n\n```\n\n> 总结：只有整型变量可以进行取模运算\n\n\n\n**示例3：**\n\n```C++\n//递增\nint main() {\n\n\t//后置递增\n\tint a = 10;\n\ta++; //等价于a = a + 1\n\tcout << a << endl; // 11\n\n\t//前置递增\n\tint b = 10;\n\t++b;\n\tcout << b << endl; // 11\n\n\t//区别\n\t//前置递增先对变量进行++，再计算表达式\n\tint a2 = 10;\n\tint b2 = ++a2 * 10;\n\tcout << b2 << endl;\n\n\t//后置递增先计算表达式，后对变量进行++\n\tint a3 = 10;\n\tint b3 = a3++ * 10;\n\tcout << b3 << endl;\n\n\tsystem(\"pause\");\n\n\treturn 0;\n}\n\n```\n\n\n\n> 总结：前置递增先对变量进行++，再计算表达式，后置递增相反\n\n\n\n\n\n\n\n\n\n### 3.2 赋值运算符\n\n**作用：**用于将表达式的值赋给变量\n\n赋值运算符包括以下几个符号：\n\n| **运算符** | **术语** | **示例**   | **结果**  |\n| ---------- | -------- | ---------- | --------- |\n| =          | 赋值     | a=2; b=3;  | a=2; b=3; |\n| +=         | 加等于   | a=0; a+=2; | a=2;      |\n| -=         | 减等于   | a=5; a-=3; | a=2;      |\n| *=         | 乘等于   | a=2; a*=2; | a=4;      |\n| /=         | 除等于   | a=4; a/=2; | a=2;      |\n| %=         | 模等于   | a=3; a%2;  | a=1;      |\n\n\n\n**示例：**\n\n```C++\nint main() {\n\n\t//赋值运算符\n\n\t// =\n\tint a = 10;\n\ta = 100;\n\tcout << \"a = \" << a << endl;\n\n\t// +=\n\ta = 10;\n\ta += 2; // a = a + 2;\n\tcout << \"a = \" << a << endl;\n\n\t// -=\n\ta = 10;\n\ta -= 2; // a = a - 2\n\tcout << \"a = \" << a << endl;\n\n\t// *=\n\ta = 10;\n\ta *= 2; // a = a * 2\n\tcout << \"a = \" << a << endl;\n\n\t// /=\n\ta = 10;\n\ta /= 2;  // a = a / 2;\n\tcout << \"a = \" << a << endl;\n\n\t// %=\n\ta = 10;\n\ta %= 2;  // a = a % 2;\n\tcout << \"a = \" << a << endl;\n\n\tsystem(\"pause\");\n\n\treturn 0;\n}\n```\n\n\n\n\n\n\n\n\n\n### 3.3 比较运算符\n\n**作用：**用于表达式的比较，并返回一个真值或假值\n\n比较运算符有以下符号：\n\n| **运算符** | **术语** | **示例** | **结果** |\n| ---------- | -------- | -------- | -------- |\n| ==         | 相等于   | 4 == 3   | 0        |\n| !=         | 不等于   | 4 != 3   | 1        |\n| <          | 小于     | 4 < 3    | 0        |\n| \\>         | 大于     | 4 > 3    | 1        |\n| <=         | 小于等于 | 4 <= 3   | 0        |\n| \\>=        | 大于等于 | 4 >= 1   | 1        |\n\n示例：\n\n```C++\nint main() {\n\n\tint a = 10;\n\tint b = 20;\n\n\tcout << (a == b) << endl; // 0 \n\n\tcout << (a != b) << endl; // 1\n\n\tcout << (a > b) << endl; // 0\n\n\tcout << (a < b) << endl; // 1\n\n\tcout << (a >= b) << endl; // 0\n\n\tcout << (a <= b) << endl; // 1\n\t\n\tsystem(\"pause\");\n\n\treturn 0;\n}\n```\n\n\n\n> 注意：C和C++ 语言的比较运算中， ==“真”用数字“1”来表示， “假”用数字“0”来表示。== \n\n\n\n\n\n\n\n\n\n\n\n\n\n### 3.4 逻辑运算符\n\n**作用：**用于根据表达式的值返回真值或假值\n\n逻辑运算符有以下符号：\n\n| **运算符** | **术语** | **示例** | **结果**                                                 |\n| ---------- | -------- | -------- | -------------------------------------------------------- |\n| !          | 非       | !a       | 如果a为假，则!a为真；  如果a为真，则!a为假。             |\n| &&         | 与       | a && b   | 如果a和b都为真，则结果为真，否则为假。                   |\n| \\|\\|       | 或       | a \\|\\| b | 如果a和b有一个为真，则结果为真，二者都为假时，结果为假。 |\n\n**示例1：**逻辑非\n\n```C++\n//逻辑运算符  --- 非\nint main() {\n\n\tint a = 10;\n\n\tcout << !a << endl; // 0\n\n\tcout << !!a << endl; // 1\n\n\tsystem(\"pause\");\n\n\treturn 0;\n}\n```\n\n> 总结： 真变假，假变真\n\n\n\n\n\n**示例2：**逻辑与\n\n```C++\n//逻辑运算符  --- 与\nint main() {\n\n\tint a = 10;\n\tint b = 10;\n\n\tcout << (a && b) << endl;// 1\n\n\ta = 10;\n\tb = 0;\n\n\tcout << (a && b) << endl;// 0 \n\n\ta = 0;\n\tb = 0;\n\n\tcout << (a && b) << endl;// 0\n\n\tsystem(\"pause\");\n\n\treturn 0;\n}\n\n```\n\n> 总结：逻辑==与==运算符总结： ==同真为真，其余为假==\n\n\n\n\n\n\n\n**示例3：**逻辑或\n\n```c++\n//逻辑运算符  --- 或\nint main() {\n\n\tint a = 10;\n\tint b = 10;\n\n\tcout << (a || b) << endl;// 1\n\n\ta = 10;\n\tb = 0;\n\n\tcout << (a || b) << endl;// 1 \n\n\ta = 0;\n\tb = 0;\n\n\tcout << (a || b) << endl;// 0\n\n\tsystem(\"pause\");\n\n\treturn 0;\n}\n```\n\n> 逻辑==或==运算符总结： ==同假为假，其余为真==\n","slug":"三-运算符","published":1,"updated":"2023-03-01T12:01:47.407Z","_id":"clifr2v1v001q14uohtyzah5z","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"3-运算符\"><a href=\"#3-运算符\" class=\"headerlink\" title=\"3 运算符\"></a>3 运算符</h2><p><strong>作用：</strong>用于执行代码的运算</p>\n<p>本章我们主要讲解以下几类运算符：</p>\n<table>\n<thead>\n<tr>\n<th><strong>运算符类型</strong></th>\n<th><strong>作用</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>算术运算符</td>\n<td>用于处理四则运算</td>\n</tr>\n<tr>\n<td>赋值运算符</td>\n<td>用于将表达式的值赋给变量</td>\n</tr>\n<tr>\n<td>比较运算符</td>\n<td>用于表达式的比较，并返回一个真值或假值</td>\n</tr>\n<tr>\n<td>逻辑运算符</td>\n<td>用于根据表达式的值返回真值或假值</td>\n</tr>\n</tbody></table>\n<h3 id=\"3-1-算术运算符\"><a href=\"#3-1-算术运算符\" class=\"headerlink\" title=\"3.1 算术运算符\"></a>3.1 算术运算符</h3><p><strong>作用</strong>：用于处理四则运算 </p>\n<p>算术运算符包括以下符号：</p>\n<table>\n<thead>\n<tr>\n<th><strong>运算符</strong></th>\n<th><strong>术语</strong></th>\n<th><strong>示例</strong></th>\n<th><strong>结果</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>+</td>\n<td>正号</td>\n<td>+3</td>\n<td>3</td>\n</tr>\n<tr>\n<td>-</td>\n<td>负号</td>\n<td>-3</td>\n<td>-3</td>\n</tr>\n<tr>\n<td>+</td>\n<td>加</td>\n<td>10 + 5</td>\n<td>15</td>\n</tr>\n<tr>\n<td>-</td>\n<td>减</td>\n<td>10 - 5</td>\n<td>5</td>\n</tr>\n<tr>\n<td>*</td>\n<td>乘</td>\n<td>10 * 5</td>\n<td>50</td>\n</tr>\n<tr>\n<td>/</td>\n<td>除</td>\n<td>10 / 5</td>\n<td>2</td>\n</tr>\n<tr>\n<td>%</td>\n<td>取模(取余)</td>\n<td>10 % 3</td>\n<td>1</td>\n</tr>\n<tr>\n<td>++</td>\n<td>前置递增</td>\n<td>a=2; b=++a;</td>\n<td>a=3; b=3;</td>\n</tr>\n<tr>\n<td>++</td>\n<td>后置递增</td>\n<td>a=2; b=a++;</td>\n<td>a=3; b=2;</td>\n</tr>\n<tr>\n<td>–</td>\n<td>前置递减</td>\n<td>a=2; b=–a;</td>\n<td>a=1; b=1;</td>\n</tr>\n<tr>\n<td>–</td>\n<td>后置递减</td>\n<td>a=2; b=a–;</td>\n<td>a=1; b=2;</td>\n</tr>\n</tbody></table>\n<p><strong>示例1：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//加减乘除</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"type\">int</span> a1 = <span class=\"number\">10</span>;</span><br><span class=\"line\">\t<span class=\"type\">int</span> b1 = <span class=\"number\">3</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\tcout &lt;&lt; a1 + b1 &lt;&lt; endl;</span><br><span class=\"line\">\tcout &lt;&lt; a1 - b1 &lt;&lt; endl;</span><br><span class=\"line\">\tcout &lt;&lt; a1 * b1 &lt;&lt; endl;</span><br><span class=\"line\">\tcout &lt;&lt; a1 / b1 &lt;&lt; endl;  <span class=\"comment\">//两个整数相除结果依然是整数</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"type\">int</span> a2 = <span class=\"number\">10</span>;</span><br><span class=\"line\">\t<span class=\"type\">int</span> b2 = <span class=\"number\">20</span>;</span><br><span class=\"line\">\tcout &lt;&lt; a2 / b2 &lt;&lt; endl; </span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"type\">int</span> a3 = <span class=\"number\">10</span>;</span><br><span class=\"line\">\t<span class=\"type\">int</span> b3 = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"comment\">//cout &lt;&lt; a3 / b3 &lt;&lt; endl; //报错，除数不可以为0</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//两个小数可以相除</span></span><br><span class=\"line\">\t<span class=\"type\">double</span> d1 = <span class=\"number\">0.5</span>;</span><br><span class=\"line\">\t<span class=\"type\">double</span> d2 = <span class=\"number\">0.25</span>;</span><br><span class=\"line\">\tcout &lt;&lt; d1 / d2 &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">system</span>(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>总结：在除法运算中，除数不能为0</p>\n</blockquote>\n<p><strong>示例2：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//取模</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"type\">int</span> a1 = <span class=\"number\">10</span>;</span><br><span class=\"line\">\t<span class=\"type\">int</span> b1 = <span class=\"number\">3</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"number\">10</span> % <span class=\"number\">3</span> &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"type\">int</span> a2 = <span class=\"number\">10</span>;</span><br><span class=\"line\">\t<span class=\"type\">int</span> b2 = <span class=\"number\">20</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\tcout &lt;&lt; a2 % b2 &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"type\">int</span> a3 = <span class=\"number\">10</span>;</span><br><span class=\"line\">\t<span class=\"type\">int</span> b3 = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//cout &lt;&lt; a3 % b3 &lt;&lt; endl; //取模运算时，除数也不能为0</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//两个小数不可以取模</span></span><br><span class=\"line\">\t<span class=\"type\">double</span> d1 = <span class=\"number\">3.14</span>;</span><br><span class=\"line\">\t<span class=\"type\">double</span> d2 = <span class=\"number\">1.1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//cout &lt;&lt; d1 % d2 &lt;&lt; endl;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">system</span>(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>总结：只有整型变量可以进行取模运算</p>\n</blockquote>\n<p><strong>示例3：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//递增</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//后置递增</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> a = <span class=\"number\">10</span>;</span><br><span class=\"line\">\ta++; <span class=\"comment\">//等价于a = a + 1</span></span><br><span class=\"line\">\tcout &lt;&lt; a &lt;&lt; endl; <span class=\"comment\">// 11</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//前置递增</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> b = <span class=\"number\">10</span>;</span><br><span class=\"line\">\t++b;</span><br><span class=\"line\">\tcout &lt;&lt; b &lt;&lt; endl; <span class=\"comment\">// 11</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//区别</span></span><br><span class=\"line\">\t<span class=\"comment\">//前置递增先对变量进行++，再计算表达式</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> a2 = <span class=\"number\">10</span>;</span><br><span class=\"line\">\t<span class=\"type\">int</span> b2 = ++a2 * <span class=\"number\">10</span>;</span><br><span class=\"line\">\tcout &lt;&lt; b2 &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//后置递增先计算表达式，后对变量进行++</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> a3 = <span class=\"number\">10</span>;</span><br><span class=\"line\">\t<span class=\"type\">int</span> b3 = a3++ * <span class=\"number\">10</span>;</span><br><span class=\"line\">\tcout &lt;&lt; b3 &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">system</span>(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<blockquote>\n<p>总结：前置递增先对变量进行++，再计算表达式，后置递增相反</p>\n</blockquote>\n<h3 id=\"3-2-赋值运算符\"><a href=\"#3-2-赋值运算符\" class=\"headerlink\" title=\"3.2 赋值运算符\"></a>3.2 赋值运算符</h3><p><strong>作用：</strong>用于将表达式的值赋给变量</p>\n<p>赋值运算符包括以下几个符号：</p>\n<table>\n<thead>\n<tr>\n<th><strong>运算符</strong></th>\n<th><strong>术语</strong></th>\n<th><strong>示例</strong></th>\n<th><strong>结果</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>=</td>\n<td>赋值</td>\n<td>a=2; b=3;</td>\n<td>a=2; b=3;</td>\n</tr>\n<tr>\n<td>+=</td>\n<td>加等于</td>\n<td>a=0; a+=2;</td>\n<td>a=2;</td>\n</tr>\n<tr>\n<td>-=</td>\n<td>减等于</td>\n<td>a=5; a-=3;</td>\n<td>a=2;</td>\n</tr>\n<tr>\n<td>*=</td>\n<td>乘等于</td>\n<td>a=2; a*=2;</td>\n<td>a=4;</td>\n</tr>\n<tr>\n<td>/=</td>\n<td>除等于</td>\n<td>a=4; a/=2;</td>\n<td>a=2;</td>\n</tr>\n<tr>\n<td>%=</td>\n<td>模等于</td>\n<td>a=3; a%2;</td>\n<td>a=1;</td>\n</tr>\n</tbody></table>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//赋值运算符</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// =</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> a = <span class=\"number\">10</span>;</span><br><span class=\"line\">\ta = <span class=\"number\">100</span>;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;a = &quot;</span> &lt;&lt; a &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// +=</span></span><br><span class=\"line\">\ta = <span class=\"number\">10</span>;</span><br><span class=\"line\">\ta += <span class=\"number\">2</span>; <span class=\"comment\">// a = a + 2;</span></span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;a = &quot;</span> &lt;&lt; a &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// -=</span></span><br><span class=\"line\">\ta = <span class=\"number\">10</span>;</span><br><span class=\"line\">\ta -= <span class=\"number\">2</span>; <span class=\"comment\">// a = a - 2</span></span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;a = &quot;</span> &lt;&lt; a &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// *=</span></span><br><span class=\"line\">\ta = <span class=\"number\">10</span>;</span><br><span class=\"line\">\ta *= <span class=\"number\">2</span>; <span class=\"comment\">// a = a * 2</span></span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;a = &quot;</span> &lt;&lt; a &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// /=</span></span><br><span class=\"line\">\ta = <span class=\"number\">10</span>;</span><br><span class=\"line\">\ta /= <span class=\"number\">2</span>;  <span class=\"comment\">// a = a / 2;</span></span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;a = &quot;</span> &lt;&lt; a &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// %=</span></span><br><span class=\"line\">\ta = <span class=\"number\">10</span>;</span><br><span class=\"line\">\ta %= <span class=\"number\">2</span>;  <span class=\"comment\">// a = a % 2;</span></span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;a = &quot;</span> &lt;&lt; a &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">system</span>(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n\n\n<h3 id=\"3-3-比较运算符\"><a href=\"#3-3-比较运算符\" class=\"headerlink\" title=\"3.3 比较运算符\"></a>3.3 比较运算符</h3><p><strong>作用：</strong>用于表达式的比较，并返回一个真值或假值</p>\n<p>比较运算符有以下符号：</p>\n<table>\n<thead>\n<tr>\n<th><strong>运算符</strong></th>\n<th><strong>术语</strong></th>\n<th><strong>示例</strong></th>\n<th><strong>结果</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>==</td>\n<td>相等于</td>\n<td>4 == 3</td>\n<td>0</td>\n</tr>\n<tr>\n<td>!=</td>\n<td>不等于</td>\n<td>4 != 3</td>\n<td>1</td>\n</tr>\n<tr>\n<td>&lt;</td>\n<td>小于</td>\n<td>4 &lt; 3</td>\n<td>0</td>\n</tr>\n<tr>\n<td>&gt;</td>\n<td>大于</td>\n<td>4 &gt; 3</td>\n<td>1</td>\n</tr>\n<tr>\n<td>&lt;=</td>\n<td>小于等于</td>\n<td>4 &lt;= 3</td>\n<td>0</td>\n</tr>\n<tr>\n<td>&gt;=</td>\n<td>大于等于</td>\n<td>4 &gt;= 1</td>\n<td>1</td>\n</tr>\n</tbody></table>\n<p>示例：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"type\">int</span> a = <span class=\"number\">10</span>;</span><br><span class=\"line\">\t<span class=\"type\">int</span> b = <span class=\"number\">20</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\tcout &lt;&lt; (a == b) &lt;&lt; endl; <span class=\"comment\">// 0 </span></span><br><span class=\"line\"></span><br><span class=\"line\">\tcout &lt;&lt; (a != b) &lt;&lt; endl; <span class=\"comment\">// 1</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tcout &lt;&lt; (a &gt; b) &lt;&lt; endl; <span class=\"comment\">// 0</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tcout &lt;&lt; (a &lt; b) &lt;&lt; endl; <span class=\"comment\">// 1</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tcout &lt;&lt; (a &gt;= b) &lt;&lt; endl; <span class=\"comment\">// 0</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tcout &lt;&lt; (a &lt;= b) &lt;&lt; endl; <span class=\"comment\">// 1</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"built_in\">system</span>(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<blockquote>\n<p>注意：C和C++ 语言的比较运算中， ==“真”用数字“1”来表示， “假”用数字“0”来表示。== </p>\n</blockquote>\n<h3 id=\"3-4-逻辑运算符\"><a href=\"#3-4-逻辑运算符\" class=\"headerlink\" title=\"3.4 逻辑运算符\"></a>3.4 逻辑运算符</h3><p><strong>作用：</strong>用于根据表达式的值返回真值或假值</p>\n<p>逻辑运算符有以下符号：</p>\n<table>\n<thead>\n<tr>\n<th><strong>运算符</strong></th>\n<th><strong>术语</strong></th>\n<th><strong>示例</strong></th>\n<th><strong>结果</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>!</td>\n<td>非</td>\n<td>!a</td>\n<td>如果a为假，则!a为真；  如果a为真，则!a为假。</td>\n</tr>\n<tr>\n<td>&amp;&amp;</td>\n<td>与</td>\n<td>a &amp;&amp; b</td>\n<td>如果a和b都为真，则结果为真，否则为假。</td>\n</tr>\n<tr>\n<td>||</td>\n<td>或</td>\n<td>a || b</td>\n<td>如果a和b有一个为真，则结果为真，二者都为假时，结果为假。</td>\n</tr>\n</tbody></table>\n<p><strong>示例1：</strong>逻辑非</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//逻辑运算符  --- 非</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"type\">int</span> a = <span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\tcout &lt;&lt; !a &lt;&lt; endl; <span class=\"comment\">// 0</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tcout &lt;&lt; !!a &lt;&lt; endl; <span class=\"comment\">// 1</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">system</span>(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>总结： 真变假，假变真</p>\n</blockquote>\n<p><strong>示例2：</strong>逻辑与</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//逻辑运算符  --- 与</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"type\">int</span> a = <span class=\"number\">10</span>;</span><br><span class=\"line\">\t<span class=\"type\">int</span> b = <span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\tcout &lt;&lt; (a &amp;&amp; b) &lt;&lt; endl;<span class=\"comment\">// 1</span></span><br><span class=\"line\"></span><br><span class=\"line\">\ta = <span class=\"number\">10</span>;</span><br><span class=\"line\">\tb = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\tcout &lt;&lt; (a &amp;&amp; b) &lt;&lt; endl;<span class=\"comment\">// 0 </span></span><br><span class=\"line\"></span><br><span class=\"line\">\ta = <span class=\"number\">0</span>;</span><br><span class=\"line\">\tb = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\tcout &lt;&lt; (a &amp;&amp; b) &lt;&lt; endl;<span class=\"comment\">// 0</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">system</span>(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>总结：逻辑==与==运算符总结： ==同真为真，其余为假==</p>\n</blockquote>\n<p><strong>示例3：</strong>逻辑或</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//逻辑运算符  --- 或</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"type\">int</span> a = <span class=\"number\">10</span>;</span><br><span class=\"line\">\t<span class=\"type\">int</span> b = <span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\tcout &lt;&lt; (a || b) &lt;&lt; endl;<span class=\"comment\">// 1</span></span><br><span class=\"line\"></span><br><span class=\"line\">\ta = <span class=\"number\">10</span>;</span><br><span class=\"line\">\tb = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\tcout &lt;&lt; (a || b) &lt;&lt; endl;<span class=\"comment\">// 1 </span></span><br><span class=\"line\"></span><br><span class=\"line\">\ta = <span class=\"number\">0</span>;</span><br><span class=\"line\">\tb = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\tcout &lt;&lt; (a || b) &lt;&lt; endl;<span class=\"comment\">// 0</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">system</span>(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>逻辑==或==运算符总结： ==同假为假，其余为真==</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"3-运算符\"><a href=\"#3-运算符\" class=\"headerlink\" title=\"3 运算符\"></a>3 运算符</h2><p><strong>作用：</strong>用于执行代码的运算</p>\n<p>本章我们主要讲解以下几类运算符：</p>\n<table>\n<thead>\n<tr>\n<th><strong>运算符类型</strong></th>\n<th><strong>作用</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>算术运算符</td>\n<td>用于处理四则运算</td>\n</tr>\n<tr>\n<td>赋值运算符</td>\n<td>用于将表达式的值赋给变量</td>\n</tr>\n<tr>\n<td>比较运算符</td>\n<td>用于表达式的比较，并返回一个真值或假值</td>\n</tr>\n<tr>\n<td>逻辑运算符</td>\n<td>用于根据表达式的值返回真值或假值</td>\n</tr>\n</tbody></table>\n<h3 id=\"3-1-算术运算符\"><a href=\"#3-1-算术运算符\" class=\"headerlink\" title=\"3.1 算术运算符\"></a>3.1 算术运算符</h3><p><strong>作用</strong>：用于处理四则运算 </p>\n<p>算术运算符包括以下符号：</p>\n<table>\n<thead>\n<tr>\n<th><strong>运算符</strong></th>\n<th><strong>术语</strong></th>\n<th><strong>示例</strong></th>\n<th><strong>结果</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>+</td>\n<td>正号</td>\n<td>+3</td>\n<td>3</td>\n</tr>\n<tr>\n<td>-</td>\n<td>负号</td>\n<td>-3</td>\n<td>-3</td>\n</tr>\n<tr>\n<td>+</td>\n<td>加</td>\n<td>10 + 5</td>\n<td>15</td>\n</tr>\n<tr>\n<td>-</td>\n<td>减</td>\n<td>10 - 5</td>\n<td>5</td>\n</tr>\n<tr>\n<td>*</td>\n<td>乘</td>\n<td>10 * 5</td>\n<td>50</td>\n</tr>\n<tr>\n<td>/</td>\n<td>除</td>\n<td>10 / 5</td>\n<td>2</td>\n</tr>\n<tr>\n<td>%</td>\n<td>取模(取余)</td>\n<td>10 % 3</td>\n<td>1</td>\n</tr>\n<tr>\n<td>++</td>\n<td>前置递增</td>\n<td>a=2; b=++a;</td>\n<td>a=3; b=3;</td>\n</tr>\n<tr>\n<td>++</td>\n<td>后置递增</td>\n<td>a=2; b=a++;</td>\n<td>a=3; b=2;</td>\n</tr>\n<tr>\n<td>–</td>\n<td>前置递减</td>\n<td>a=2; b=–a;</td>\n<td>a=1; b=1;</td>\n</tr>\n<tr>\n<td>–</td>\n<td>后置递减</td>\n<td>a=2; b=a–;</td>\n<td>a=1; b=2;</td>\n</tr>\n</tbody></table>\n<p><strong>示例1：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//加减乘除</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"type\">int</span> a1 = <span class=\"number\">10</span>;</span><br><span class=\"line\">\t<span class=\"type\">int</span> b1 = <span class=\"number\">3</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\tcout &lt;&lt; a1 + b1 &lt;&lt; endl;</span><br><span class=\"line\">\tcout &lt;&lt; a1 - b1 &lt;&lt; endl;</span><br><span class=\"line\">\tcout &lt;&lt; a1 * b1 &lt;&lt; endl;</span><br><span class=\"line\">\tcout &lt;&lt; a1 / b1 &lt;&lt; endl;  <span class=\"comment\">//两个整数相除结果依然是整数</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"type\">int</span> a2 = <span class=\"number\">10</span>;</span><br><span class=\"line\">\t<span class=\"type\">int</span> b2 = <span class=\"number\">20</span>;</span><br><span class=\"line\">\tcout &lt;&lt; a2 / b2 &lt;&lt; endl; </span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"type\">int</span> a3 = <span class=\"number\">10</span>;</span><br><span class=\"line\">\t<span class=\"type\">int</span> b3 = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"comment\">//cout &lt;&lt; a3 / b3 &lt;&lt; endl; //报错，除数不可以为0</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//两个小数可以相除</span></span><br><span class=\"line\">\t<span class=\"type\">double</span> d1 = <span class=\"number\">0.5</span>;</span><br><span class=\"line\">\t<span class=\"type\">double</span> d2 = <span class=\"number\">0.25</span>;</span><br><span class=\"line\">\tcout &lt;&lt; d1 / d2 &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">system</span>(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>总结：在除法运算中，除数不能为0</p>\n</blockquote>\n<p><strong>示例2：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//取模</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"type\">int</span> a1 = <span class=\"number\">10</span>;</span><br><span class=\"line\">\t<span class=\"type\">int</span> b1 = <span class=\"number\">3</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"number\">10</span> % <span class=\"number\">3</span> &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"type\">int</span> a2 = <span class=\"number\">10</span>;</span><br><span class=\"line\">\t<span class=\"type\">int</span> b2 = <span class=\"number\">20</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\tcout &lt;&lt; a2 % b2 &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"type\">int</span> a3 = <span class=\"number\">10</span>;</span><br><span class=\"line\">\t<span class=\"type\">int</span> b3 = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//cout &lt;&lt; a3 % b3 &lt;&lt; endl; //取模运算时，除数也不能为0</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//两个小数不可以取模</span></span><br><span class=\"line\">\t<span class=\"type\">double</span> d1 = <span class=\"number\">3.14</span>;</span><br><span class=\"line\">\t<span class=\"type\">double</span> d2 = <span class=\"number\">1.1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//cout &lt;&lt; d1 % d2 &lt;&lt; endl;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">system</span>(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>总结：只有整型变量可以进行取模运算</p>\n</blockquote>\n<p><strong>示例3：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//递增</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//后置递增</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> a = <span class=\"number\">10</span>;</span><br><span class=\"line\">\ta++; <span class=\"comment\">//等价于a = a + 1</span></span><br><span class=\"line\">\tcout &lt;&lt; a &lt;&lt; endl; <span class=\"comment\">// 11</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//前置递增</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> b = <span class=\"number\">10</span>;</span><br><span class=\"line\">\t++b;</span><br><span class=\"line\">\tcout &lt;&lt; b &lt;&lt; endl; <span class=\"comment\">// 11</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//区别</span></span><br><span class=\"line\">\t<span class=\"comment\">//前置递增先对变量进行++，再计算表达式</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> a2 = <span class=\"number\">10</span>;</span><br><span class=\"line\">\t<span class=\"type\">int</span> b2 = ++a2 * <span class=\"number\">10</span>;</span><br><span class=\"line\">\tcout &lt;&lt; b2 &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//后置递增先计算表达式，后对变量进行++</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> a3 = <span class=\"number\">10</span>;</span><br><span class=\"line\">\t<span class=\"type\">int</span> b3 = a3++ * <span class=\"number\">10</span>;</span><br><span class=\"line\">\tcout &lt;&lt; b3 &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">system</span>(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<blockquote>\n<p>总结：前置递增先对变量进行++，再计算表达式，后置递增相反</p>\n</blockquote>\n<h3 id=\"3-2-赋值运算符\"><a href=\"#3-2-赋值运算符\" class=\"headerlink\" title=\"3.2 赋值运算符\"></a>3.2 赋值运算符</h3><p><strong>作用：</strong>用于将表达式的值赋给变量</p>\n<p>赋值运算符包括以下几个符号：</p>\n<table>\n<thead>\n<tr>\n<th><strong>运算符</strong></th>\n<th><strong>术语</strong></th>\n<th><strong>示例</strong></th>\n<th><strong>结果</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>=</td>\n<td>赋值</td>\n<td>a=2; b=3;</td>\n<td>a=2; b=3;</td>\n</tr>\n<tr>\n<td>+=</td>\n<td>加等于</td>\n<td>a=0; a+=2;</td>\n<td>a=2;</td>\n</tr>\n<tr>\n<td>-=</td>\n<td>减等于</td>\n<td>a=5; a-=3;</td>\n<td>a=2;</td>\n</tr>\n<tr>\n<td>*=</td>\n<td>乘等于</td>\n<td>a=2; a*=2;</td>\n<td>a=4;</td>\n</tr>\n<tr>\n<td>/=</td>\n<td>除等于</td>\n<td>a=4; a/=2;</td>\n<td>a=2;</td>\n</tr>\n<tr>\n<td>%=</td>\n<td>模等于</td>\n<td>a=3; a%2;</td>\n<td>a=1;</td>\n</tr>\n</tbody></table>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//赋值运算符</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// =</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> a = <span class=\"number\">10</span>;</span><br><span class=\"line\">\ta = <span class=\"number\">100</span>;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;a = &quot;</span> &lt;&lt; a &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// +=</span></span><br><span class=\"line\">\ta = <span class=\"number\">10</span>;</span><br><span class=\"line\">\ta += <span class=\"number\">2</span>; <span class=\"comment\">// a = a + 2;</span></span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;a = &quot;</span> &lt;&lt; a &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// -=</span></span><br><span class=\"line\">\ta = <span class=\"number\">10</span>;</span><br><span class=\"line\">\ta -= <span class=\"number\">2</span>; <span class=\"comment\">// a = a - 2</span></span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;a = &quot;</span> &lt;&lt; a &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// *=</span></span><br><span class=\"line\">\ta = <span class=\"number\">10</span>;</span><br><span class=\"line\">\ta *= <span class=\"number\">2</span>; <span class=\"comment\">// a = a * 2</span></span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;a = &quot;</span> &lt;&lt; a &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// /=</span></span><br><span class=\"line\">\ta = <span class=\"number\">10</span>;</span><br><span class=\"line\">\ta /= <span class=\"number\">2</span>;  <span class=\"comment\">// a = a / 2;</span></span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;a = &quot;</span> &lt;&lt; a &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// %=</span></span><br><span class=\"line\">\ta = <span class=\"number\">10</span>;</span><br><span class=\"line\">\ta %= <span class=\"number\">2</span>;  <span class=\"comment\">// a = a % 2;</span></span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;a = &quot;</span> &lt;&lt; a &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">system</span>(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n\n\n<h3 id=\"3-3-比较运算符\"><a href=\"#3-3-比较运算符\" class=\"headerlink\" title=\"3.3 比较运算符\"></a>3.3 比较运算符</h3><p><strong>作用：</strong>用于表达式的比较，并返回一个真值或假值</p>\n<p>比较运算符有以下符号：</p>\n<table>\n<thead>\n<tr>\n<th><strong>运算符</strong></th>\n<th><strong>术语</strong></th>\n<th><strong>示例</strong></th>\n<th><strong>结果</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>==</td>\n<td>相等于</td>\n<td>4 == 3</td>\n<td>0</td>\n</tr>\n<tr>\n<td>!=</td>\n<td>不等于</td>\n<td>4 != 3</td>\n<td>1</td>\n</tr>\n<tr>\n<td>&lt;</td>\n<td>小于</td>\n<td>4 &lt; 3</td>\n<td>0</td>\n</tr>\n<tr>\n<td>&gt;</td>\n<td>大于</td>\n<td>4 &gt; 3</td>\n<td>1</td>\n</tr>\n<tr>\n<td>&lt;=</td>\n<td>小于等于</td>\n<td>4 &lt;= 3</td>\n<td>0</td>\n</tr>\n<tr>\n<td>&gt;=</td>\n<td>大于等于</td>\n<td>4 &gt;= 1</td>\n<td>1</td>\n</tr>\n</tbody></table>\n<p>示例：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"type\">int</span> a = <span class=\"number\">10</span>;</span><br><span class=\"line\">\t<span class=\"type\">int</span> b = <span class=\"number\">20</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\tcout &lt;&lt; (a == b) &lt;&lt; endl; <span class=\"comment\">// 0 </span></span><br><span class=\"line\"></span><br><span class=\"line\">\tcout &lt;&lt; (a != b) &lt;&lt; endl; <span class=\"comment\">// 1</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tcout &lt;&lt; (a &gt; b) &lt;&lt; endl; <span class=\"comment\">// 0</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tcout &lt;&lt; (a &lt; b) &lt;&lt; endl; <span class=\"comment\">// 1</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tcout &lt;&lt; (a &gt;= b) &lt;&lt; endl; <span class=\"comment\">// 0</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tcout &lt;&lt; (a &lt;= b) &lt;&lt; endl; <span class=\"comment\">// 1</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"built_in\">system</span>(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<blockquote>\n<p>注意：C和C++ 语言的比较运算中， ==“真”用数字“1”来表示， “假”用数字“0”来表示。== </p>\n</blockquote>\n<h3 id=\"3-4-逻辑运算符\"><a href=\"#3-4-逻辑运算符\" class=\"headerlink\" title=\"3.4 逻辑运算符\"></a>3.4 逻辑运算符</h3><p><strong>作用：</strong>用于根据表达式的值返回真值或假值</p>\n<p>逻辑运算符有以下符号：</p>\n<table>\n<thead>\n<tr>\n<th><strong>运算符</strong></th>\n<th><strong>术语</strong></th>\n<th><strong>示例</strong></th>\n<th><strong>结果</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>!</td>\n<td>非</td>\n<td>!a</td>\n<td>如果a为假，则!a为真；  如果a为真，则!a为假。</td>\n</tr>\n<tr>\n<td>&amp;&amp;</td>\n<td>与</td>\n<td>a &amp;&amp; b</td>\n<td>如果a和b都为真，则结果为真，否则为假。</td>\n</tr>\n<tr>\n<td>||</td>\n<td>或</td>\n<td>a || b</td>\n<td>如果a和b有一个为真，则结果为真，二者都为假时，结果为假。</td>\n</tr>\n</tbody></table>\n<p><strong>示例1：</strong>逻辑非</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//逻辑运算符  --- 非</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"type\">int</span> a = <span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\tcout &lt;&lt; !a &lt;&lt; endl; <span class=\"comment\">// 0</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tcout &lt;&lt; !!a &lt;&lt; endl; <span class=\"comment\">// 1</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">system</span>(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>总结： 真变假，假变真</p>\n</blockquote>\n<p><strong>示例2：</strong>逻辑与</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//逻辑运算符  --- 与</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"type\">int</span> a = <span class=\"number\">10</span>;</span><br><span class=\"line\">\t<span class=\"type\">int</span> b = <span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\tcout &lt;&lt; (a &amp;&amp; b) &lt;&lt; endl;<span class=\"comment\">// 1</span></span><br><span class=\"line\"></span><br><span class=\"line\">\ta = <span class=\"number\">10</span>;</span><br><span class=\"line\">\tb = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\tcout &lt;&lt; (a &amp;&amp; b) &lt;&lt; endl;<span class=\"comment\">// 0 </span></span><br><span class=\"line\"></span><br><span class=\"line\">\ta = <span class=\"number\">0</span>;</span><br><span class=\"line\">\tb = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\tcout &lt;&lt; (a &amp;&amp; b) &lt;&lt; endl;<span class=\"comment\">// 0</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">system</span>(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>总结：逻辑==与==运算符总结： ==同真为真，其余为假==</p>\n</blockquote>\n<p><strong>示例3：</strong>逻辑或</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//逻辑运算符  --- 或</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"type\">int</span> a = <span class=\"number\">10</span>;</span><br><span class=\"line\">\t<span class=\"type\">int</span> b = <span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\tcout &lt;&lt; (a || b) &lt;&lt; endl;<span class=\"comment\">// 1</span></span><br><span class=\"line\"></span><br><span class=\"line\">\ta = <span class=\"number\">10</span>;</span><br><span class=\"line\">\tb = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\tcout &lt;&lt; (a || b) &lt;&lt; endl;<span class=\"comment\">// 1 </span></span><br><span class=\"line\"></span><br><span class=\"line\">\ta = <span class=\"number\">0</span>;</span><br><span class=\"line\">\tb = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\tcout &lt;&lt; (a || b) &lt;&lt; endl;<span class=\"comment\">// 0</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">system</span>(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>逻辑==或==运算符总结： ==同假为假，其余为真==</p>\n</blockquote>\n"},{"title":"二.数据类型","author":"连思鑫","date":"2023-03-01T10:57:00.000Z","_content":"## 2 数据类型\n\nC++规定在创建一个变量或者常量时，必须要指定出相应的数据类型，否则无法给变量分配内存\n\n### 2.1 整型\n\n**作用**：整型变量表示的是==整数类型==的数据\n\nC++中能够表示整型的类型有以下几种方式，**区别在于所占内存空间不同**：\n\n| **数据类型**        | **占用空间**                                    | 取值范围         |\n| ------------------- | ----------------------------------------------- | ---------------- |\n| short(短整型)       | 2字节                                           | (-2^15 ~ 2^15-1) |\n| int(整型)           | 4字节                                           | (-2^31 ~ 2^31-1) |\n| long(长整形)        | Windows为4字节，Linux为4字节(32位)，8字节(64位) | (-2^31 ~ 2^31-1) |\n| long long(长长整形) | 8字节                                           | (-2^63 ~ 2^63-1) |\n\n\n\n\n\n\n\n\n### 2.2 sizeof关键字\n\n**作用：**利用sizeof关键字可以==统计数据类型所占内存大小==\n\n**语法：** `sizeof( 数据类型 / 变量)`\n\n**示例：**\n\n```C++\nint main() {\n\n\tcout << \"short 类型所占内存空间为： \" << sizeof(short) << endl;\n\n\tcout << \"int 类型所占内存空间为： \" << sizeof(int) << endl;\n\n\tcout << \"long 类型所占内存空间为： \" << sizeof(long) << endl;\n\n\tcout << \"long long 类型所占内存空间为： \" << sizeof(long long) << endl;\n\n\tsystem(\"pause\");\n\n\treturn 0;\n}\n```\n\n\n\n\n\n> **整型结论**：==short < int <= long <= long long==\n\n\n\n\n\n\n### 2.3 实型（浮点型）\n\n**作用**：用于==表示小数==\n\n浮点型变量分为两种：\n\n1. 单精度float \n2. 双精度double\n\n两者的**区别**在于表示的有效数字范围不同。\n\n| **数据类型** | **占用空间** | **有效数字范围** |\n| ------------ | ------------ | ---------------- |\n| float        | 4字节        | 7位有效数字      |\n| double       | 8字节        | 15～16位有效数字 |\n\n**示例：**\n\n```C++\nint main() {\n\n\tfloat f1 = 3.14f;\n\tdouble d1 = 3.14;\n\n\tcout << f1 << endl;\n\tcout << d1<< endl;\n\n\tcout << \"float  sizeof = \" << sizeof(f1) << endl;\n\tcout << \"double sizeof = \" << sizeof(d1) << endl;\n\n\t//科学计数法\n\tfloat f2 = 3e2; // 3 * 10 ^ 2 \n\tcout << \"f2 = \" << f2 << endl;\n\n\tfloat f3 = 3e-2;  // 3 * 0.1 ^ 2\n\tcout << \"f3 = \" << f3 << endl;\n\n\tsystem(\"pause\");\n\n\treturn 0;\n}\n```\n\n\n\n\n\n### 2.4 字符型\n\n**作用：**字符型变量用于显示单个字符\n\n**语法：**`char ch = 'a';`\n\n\n\n> 注意1：在显示字符型变量时，用单引号将字符括起来，不要用双引号\n\n> 注意2：单引号内只能有一个字符，不可以是字符串\n\n\n\n- C和C++中字符型变量只占用==1个字节==。\n- 字符型变量并不是把字符本身放到内存中存储，而是将对应的ASCII编码放入到存储单元\n\n\n\n示例：\n\n```C++\nint main() {\n\t\n\tchar ch = 'a';\n\tcout << ch << endl;\n\tcout << sizeof(char) << endl;\n\n\t//ch = \"abcde\"; //错误，不可以用双引号\n\t//ch = 'abcde'; //错误，单引号内只能引用一个字符\n\n\tcout << (int)ch << endl;  //查看字符a对应的ASCII码\n\tch = 97; //可以直接用ASCII给字符型变量赋值\n\tcout << ch << endl;\n\n\tsystem(\"pause\");\n\n\treturn 0;\n}\n```\n\nASCII码表格：\n\n| **ASCII**值 | **控制字符** | **ASCII**值 | **字符** | **ASCII**值 | **字符** | **ASCII**值 | **字符** |\n| ----------- | ------------ | ----------- | -------- | ----------- | -------- | ----------- | -------- |\n| 0           | NUT          | 32          | (space)  | 64          | @        | 96          | 、       |\n| 1           | SOH          | 33          | !        | 65          | A        | 97          | a        |\n| 2           | STX          | 34          | \"        | 66          | B        | 98          | b        |\n| 3           | ETX          | 35          | #        | 67          | C        | 99          | c        |\n| 4           | EOT          | 36          | $        | 68          | D        | 100         | d        |\n| 5           | ENQ          | 37          | %        | 69          | E        | 101         | e        |\n| 6           | ACK          | 38          | &        | 70          | F        | 102         | f        |\n| 7           | BEL          | 39          | ,        | 71          | G        | 103         | g        |\n| 8           | BS           | 40          | (        | 72          | H        | 104         | h        |\n| 9           | HT           | 41          | )        | 73          | I        | 105         | i        |\n| 10          | LF           | 42          | *        | 74          | J        | 106         | j        |\n| 11          | VT           | 43          | +        | 75          | K        | 107         | k        |\n| 12          | FF           | 44          | ,        | 76          | L        | 108         | l        |\n| 13          | CR           | 45          | -        | 77          | M        | 109         | m        |\n| 14          | SO           | 46          | .        | 78          | N        | 110         | n        |\n| 15          | SI           | 47          | /        | 79          | O        | 111         | o        |\n| 16          | DLE          | 48          | 0        | 80          | P        | 112         | p        |\n| 17          | DCI          | 49          | 1        | 81          | Q        | 113         | q        |\n| 18          | DC2          | 50          | 2        | 82          | R        | 114         | r        |\n| 19          | DC3          | 51          | 3        | 83          | S        | 115         | s        |\n| 20          | DC4          | 52          | 4        | 84          | T        | 116         | t        |\n| 21          | NAK          | 53          | 5        | 85          | U        | 117         | u        |\n| 22          | SYN          | 54          | 6        | 86          | V        | 118         | v        |\n| 23          | TB           | 55          | 7        | 87          | W        | 119         | w        |\n| 24          | CAN          | 56          | 8        | 88          | X        | 120         | x        |\n| 25          | EM           | 57          | 9        | 89          | Y        | 121         | y        |\n| 26          | SUB          | 58          | :        | 90          | Z        | 122         | z        |\n| 27          | ESC          | 59          | ;        | 91          | [        | 123         | {        |\n| 28          | FS           | 60          | <        | 92          | /        | 124         | \\|       |\n| 29          | GS           | 61          | =        | 93          | ]        | 125         | }        |\n| 30          | RS           | 62          | >        | 94          | ^        | 126         | `        |\n| 31          | US           | 63          | ?        | 95          | _        | 127         | DEL      |\n\nASCII 码大致由以下**两部分组**成：\n\n* ASCII 非打印控制字符： ASCII 表上的数字 **0-31** 分配给了控制字符，用于控制像打印机等一些外围设备。\n* ASCII 打印字符：数字 **32-126** 分配给了能在键盘上找到的字符，当查看或打印文档时就会出现。\n\n\n\n\n\n\n\n\n\n\n\n\n\n### 2.5 转义字符\n\n**作用：**用于表示一些==不能显示出来的ASCII字符==\n\n现阶段我们常用的转义字符有：` \\n  \\\\  \\t`\n\n| **转义字符** | **含义**                                | **ASCII**码值（十进制） |\n| ------------ | --------------------------------------- | ----------------------- |\n| \\a           | 警报                                    | 007                     |\n| \\b           | 退格(BS) ，将当前位置移到前一列         | 008                     |\n| \\f           | 换页(FF)，将当前位置移到下页开头        | 012                     |\n| **\\n**       | **换行(LF) ，将当前位置移到下一行开头** | **010**                 |\n| \\r           | 回车(CR) ，将当前位置移到本行开头       | 013                     |\n| **\\t**       | **水平制表(HT)  （跳到下一个TAB位置）** | **009**                 |\n| \\v           | 垂直制表(VT)                            | 011                     |\n| **\\\\\\\\**     | **代表一个反斜线字符\"\\\"**               | **092**                 |\n| \\'           | 代表一个单引号（撇号）字符              | 039                     |\n| \\\"           | 代表一个双引号字符                      | 034                     |\n| \\?           | 代表一个问号                            | 063                     |\n| \\0           | 数字0                                   | 000                     |\n| \\ddd         | 8进制转义字符，d范围0~7                 | 3位8进制                |\n| \\xhh         | 16进制转义字符，h范围0~9，a~f，A~F      | 3位16进制               |\n\n示例：\n\n```C++\nint main() {\n\t\n\t\n\tcout << \"\\\\\" << endl;\n\tcout << \"\\tHello\" << endl;\n\tcout << \"\\n\" << endl;\n\n\tsystem(\"pause\");\n\n\treturn 0;\n}\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n### 2.6 字符串型\n\n**作用**：用于表示一串字符\n\n**两种风格**\n\n1. **C风格字符串**： `char 变量名[] = \"字符串值\"`\n\n   示例：\n\n   ```C++\n   int main() {\n   \n   \tchar str1[] = \"hello world\";\n   \tcout << str1 << endl;\n       \n   \tsystem(\"pause\");\n   \n   \treturn 0;\n   }\n   ```\n\n> 注意：C风格的字符串要用双引号括起来\n\n1. **C++风格字符串**：  `string  变量名 = \"字符串值\"`\n\n   示例：\n\n   ```C++\n   int main() {\n   \n   \tstring str = \"hello world\";\n   \tcout << str << endl;\n   \t\n   \tsystem(\"pause\");\n   \n   \treturn 0;\n   }\n   ```\n\n   \n\n> 注意：C++风格字符串，需要加入头文件==#include\\<string>==\n\n\n\n\n\n\n\n\n\n\n\n\n\n### 2.7 布尔类型 bool\n\n**作用：**布尔数据类型代表真或假的值 \n\nbool类型只有两个值：\n\n* true  --- 真（本质是1）\n* false --- 假（本质是0）\n\n**bool类型占==1个字节==大小**\n\n示例：\n\n```C++\nint main() {\n\n\tbool flag = true;\n\tcout << flag << endl; // 1\n\n\tflag = false;\n\tcout << flag << endl; // 0\n\n\tcout << \"size of bool = \" << sizeof(bool) << endl; //1\n\t\n\tsystem(\"pause\");\n\n\treturn 0;\n}\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n### 2.8 数据的输入\n\n**作用：用于从键盘获取数据**\n\n**关键字：**cin\n\n**语法：** `cin >> 变量 `\n\n示例：\n\n```C++\nint main(){\n\n\t//整型输入\n\tint a = 0;\n\tcout << \"请输入整型变量：\" << endl;\n\tcin >> a;\n\tcout << a << endl;\n\n\t//浮点型输入\n\tdouble d = 0;\n\tcout << \"请输入浮点型变量：\" << endl;\n\tcin >> d;\n\tcout << d << endl;\n\n\t//字符型输入\n\tchar ch = 0;\n\tcout << \"请输入字符型变量：\" << endl;\n\tcin >> ch;\n\tcout << ch << endl;\n\n\t//字符串型输入\n\tstring str;\n\tcout << \"请输入字符串型变量：\" << endl;\n\tcin >> str;\n\tcout << str << endl;\n\n\t//布尔类型输入\n\tbool flag = true;\n\tcout << \"请输入布尔型变量：\" << endl;\n\tcin >> flag;\n\tcout << flag << endl;\n\tsystem(\"pause\");\n\treturn EXIT_SUCCESS;\n}\n```","source":"_posts/二-数据类型.md","raw":"title: 二.数据类型\nauthor: 连思鑫\ntags:\n  - c++\n  - 数据类型\ncategories:\n  - ..\n  - C++\n  - C++基础教程\n  - ''\ndate: 2023-03-01 18:57:00\n---\n## 2 数据类型\n\nC++规定在创建一个变量或者常量时，必须要指定出相应的数据类型，否则无法给变量分配内存\n\n### 2.1 整型\n\n**作用**：整型变量表示的是==整数类型==的数据\n\nC++中能够表示整型的类型有以下几种方式，**区别在于所占内存空间不同**：\n\n| **数据类型**        | **占用空间**                                    | 取值范围         |\n| ------------------- | ----------------------------------------------- | ---------------- |\n| short(短整型)       | 2字节                                           | (-2^15 ~ 2^15-1) |\n| int(整型)           | 4字节                                           | (-2^31 ~ 2^31-1) |\n| long(长整形)        | Windows为4字节，Linux为4字节(32位)，8字节(64位) | (-2^31 ~ 2^31-1) |\n| long long(长长整形) | 8字节                                           | (-2^63 ~ 2^63-1) |\n\n\n\n\n\n\n\n\n### 2.2 sizeof关键字\n\n**作用：**利用sizeof关键字可以==统计数据类型所占内存大小==\n\n**语法：** `sizeof( 数据类型 / 变量)`\n\n**示例：**\n\n```C++\nint main() {\n\n\tcout << \"short 类型所占内存空间为： \" << sizeof(short) << endl;\n\n\tcout << \"int 类型所占内存空间为： \" << sizeof(int) << endl;\n\n\tcout << \"long 类型所占内存空间为： \" << sizeof(long) << endl;\n\n\tcout << \"long long 类型所占内存空间为： \" << sizeof(long long) << endl;\n\n\tsystem(\"pause\");\n\n\treturn 0;\n}\n```\n\n\n\n\n\n> **整型结论**：==short < int <= long <= long long==\n\n\n\n\n\n\n### 2.3 实型（浮点型）\n\n**作用**：用于==表示小数==\n\n浮点型变量分为两种：\n\n1. 单精度float \n2. 双精度double\n\n两者的**区别**在于表示的有效数字范围不同。\n\n| **数据类型** | **占用空间** | **有效数字范围** |\n| ------------ | ------------ | ---------------- |\n| float        | 4字节        | 7位有效数字      |\n| double       | 8字节        | 15～16位有效数字 |\n\n**示例：**\n\n```C++\nint main() {\n\n\tfloat f1 = 3.14f;\n\tdouble d1 = 3.14;\n\n\tcout << f1 << endl;\n\tcout << d1<< endl;\n\n\tcout << \"float  sizeof = \" << sizeof(f1) << endl;\n\tcout << \"double sizeof = \" << sizeof(d1) << endl;\n\n\t//科学计数法\n\tfloat f2 = 3e2; // 3 * 10 ^ 2 \n\tcout << \"f2 = \" << f2 << endl;\n\n\tfloat f3 = 3e-2;  // 3 * 0.1 ^ 2\n\tcout << \"f3 = \" << f3 << endl;\n\n\tsystem(\"pause\");\n\n\treturn 0;\n}\n```\n\n\n\n\n\n### 2.4 字符型\n\n**作用：**字符型变量用于显示单个字符\n\n**语法：**`char ch = 'a';`\n\n\n\n> 注意1：在显示字符型变量时，用单引号将字符括起来，不要用双引号\n\n> 注意2：单引号内只能有一个字符，不可以是字符串\n\n\n\n- C和C++中字符型变量只占用==1个字节==。\n- 字符型变量并不是把字符本身放到内存中存储，而是将对应的ASCII编码放入到存储单元\n\n\n\n示例：\n\n```C++\nint main() {\n\t\n\tchar ch = 'a';\n\tcout << ch << endl;\n\tcout << sizeof(char) << endl;\n\n\t//ch = \"abcde\"; //错误，不可以用双引号\n\t//ch = 'abcde'; //错误，单引号内只能引用一个字符\n\n\tcout << (int)ch << endl;  //查看字符a对应的ASCII码\n\tch = 97; //可以直接用ASCII给字符型变量赋值\n\tcout << ch << endl;\n\n\tsystem(\"pause\");\n\n\treturn 0;\n}\n```\n\nASCII码表格：\n\n| **ASCII**值 | **控制字符** | **ASCII**值 | **字符** | **ASCII**值 | **字符** | **ASCII**值 | **字符** |\n| ----------- | ------------ | ----------- | -------- | ----------- | -------- | ----------- | -------- |\n| 0           | NUT          | 32          | (space)  | 64          | @        | 96          | 、       |\n| 1           | SOH          | 33          | !        | 65          | A        | 97          | a        |\n| 2           | STX          | 34          | \"        | 66          | B        | 98          | b        |\n| 3           | ETX          | 35          | #        | 67          | C        | 99          | c        |\n| 4           | EOT          | 36          | $        | 68          | D        | 100         | d        |\n| 5           | ENQ          | 37          | %        | 69          | E        | 101         | e        |\n| 6           | ACK          | 38          | &        | 70          | F        | 102         | f        |\n| 7           | BEL          | 39          | ,        | 71          | G        | 103         | g        |\n| 8           | BS           | 40          | (        | 72          | H        | 104         | h        |\n| 9           | HT           | 41          | )        | 73          | I        | 105         | i        |\n| 10          | LF           | 42          | *        | 74          | J        | 106         | j        |\n| 11          | VT           | 43          | +        | 75          | K        | 107         | k        |\n| 12          | FF           | 44          | ,        | 76          | L        | 108         | l        |\n| 13          | CR           | 45          | -        | 77          | M        | 109         | m        |\n| 14          | SO           | 46          | .        | 78          | N        | 110         | n        |\n| 15          | SI           | 47          | /        | 79          | O        | 111         | o        |\n| 16          | DLE          | 48          | 0        | 80          | P        | 112         | p        |\n| 17          | DCI          | 49          | 1        | 81          | Q        | 113         | q        |\n| 18          | DC2          | 50          | 2        | 82          | R        | 114         | r        |\n| 19          | DC3          | 51          | 3        | 83          | S        | 115         | s        |\n| 20          | DC4          | 52          | 4        | 84          | T        | 116         | t        |\n| 21          | NAK          | 53          | 5        | 85          | U        | 117         | u        |\n| 22          | SYN          | 54          | 6        | 86          | V        | 118         | v        |\n| 23          | TB           | 55          | 7        | 87          | W        | 119         | w        |\n| 24          | CAN          | 56          | 8        | 88          | X        | 120         | x        |\n| 25          | EM           | 57          | 9        | 89          | Y        | 121         | y        |\n| 26          | SUB          | 58          | :        | 90          | Z        | 122         | z        |\n| 27          | ESC          | 59          | ;        | 91          | [        | 123         | {        |\n| 28          | FS           | 60          | <        | 92          | /        | 124         | \\|       |\n| 29          | GS           | 61          | =        | 93          | ]        | 125         | }        |\n| 30          | RS           | 62          | >        | 94          | ^        | 126         | `        |\n| 31          | US           | 63          | ?        | 95          | _        | 127         | DEL      |\n\nASCII 码大致由以下**两部分组**成：\n\n* ASCII 非打印控制字符： ASCII 表上的数字 **0-31** 分配给了控制字符，用于控制像打印机等一些外围设备。\n* ASCII 打印字符：数字 **32-126** 分配给了能在键盘上找到的字符，当查看或打印文档时就会出现。\n\n\n\n\n\n\n\n\n\n\n\n\n\n### 2.5 转义字符\n\n**作用：**用于表示一些==不能显示出来的ASCII字符==\n\n现阶段我们常用的转义字符有：` \\n  \\\\  \\t`\n\n| **转义字符** | **含义**                                | **ASCII**码值（十进制） |\n| ------------ | --------------------------------------- | ----------------------- |\n| \\a           | 警报                                    | 007                     |\n| \\b           | 退格(BS) ，将当前位置移到前一列         | 008                     |\n| \\f           | 换页(FF)，将当前位置移到下页开头        | 012                     |\n| **\\n**       | **换行(LF) ，将当前位置移到下一行开头** | **010**                 |\n| \\r           | 回车(CR) ，将当前位置移到本行开头       | 013                     |\n| **\\t**       | **水平制表(HT)  （跳到下一个TAB位置）** | **009**                 |\n| \\v           | 垂直制表(VT)                            | 011                     |\n| **\\\\\\\\**     | **代表一个反斜线字符\"\\\"**               | **092**                 |\n| \\'           | 代表一个单引号（撇号）字符              | 039                     |\n| \\\"           | 代表一个双引号字符                      | 034                     |\n| \\?           | 代表一个问号                            | 063                     |\n| \\0           | 数字0                                   | 000                     |\n| \\ddd         | 8进制转义字符，d范围0~7                 | 3位8进制                |\n| \\xhh         | 16进制转义字符，h范围0~9，a~f，A~F      | 3位16进制               |\n\n示例：\n\n```C++\nint main() {\n\t\n\t\n\tcout << \"\\\\\" << endl;\n\tcout << \"\\tHello\" << endl;\n\tcout << \"\\n\" << endl;\n\n\tsystem(\"pause\");\n\n\treturn 0;\n}\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n### 2.6 字符串型\n\n**作用**：用于表示一串字符\n\n**两种风格**\n\n1. **C风格字符串**： `char 变量名[] = \"字符串值\"`\n\n   示例：\n\n   ```C++\n   int main() {\n   \n   \tchar str1[] = \"hello world\";\n   \tcout << str1 << endl;\n       \n   \tsystem(\"pause\");\n   \n   \treturn 0;\n   }\n   ```\n\n> 注意：C风格的字符串要用双引号括起来\n\n1. **C++风格字符串**：  `string  变量名 = \"字符串值\"`\n\n   示例：\n\n   ```C++\n   int main() {\n   \n   \tstring str = \"hello world\";\n   \tcout << str << endl;\n   \t\n   \tsystem(\"pause\");\n   \n   \treturn 0;\n   }\n   ```\n\n   \n\n> 注意：C++风格字符串，需要加入头文件==#include\\<string>==\n\n\n\n\n\n\n\n\n\n\n\n\n\n### 2.7 布尔类型 bool\n\n**作用：**布尔数据类型代表真或假的值 \n\nbool类型只有两个值：\n\n* true  --- 真（本质是1）\n* false --- 假（本质是0）\n\n**bool类型占==1个字节==大小**\n\n示例：\n\n```C++\nint main() {\n\n\tbool flag = true;\n\tcout << flag << endl; // 1\n\n\tflag = false;\n\tcout << flag << endl; // 0\n\n\tcout << \"size of bool = \" << sizeof(bool) << endl; //1\n\t\n\tsystem(\"pause\");\n\n\treturn 0;\n}\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n### 2.8 数据的输入\n\n**作用：用于从键盘获取数据**\n\n**关键字：**cin\n\n**语法：** `cin >> 变量 `\n\n示例：\n\n```C++\nint main(){\n\n\t//整型输入\n\tint a = 0;\n\tcout << \"请输入整型变量：\" << endl;\n\tcin >> a;\n\tcout << a << endl;\n\n\t//浮点型输入\n\tdouble d = 0;\n\tcout << \"请输入浮点型变量：\" << endl;\n\tcin >> d;\n\tcout << d << endl;\n\n\t//字符型输入\n\tchar ch = 0;\n\tcout << \"请输入字符型变量：\" << endl;\n\tcin >> ch;\n\tcout << ch << endl;\n\n\t//字符串型输入\n\tstring str;\n\tcout << \"请输入字符串型变量：\" << endl;\n\tcin >> str;\n\tcout << str << endl;\n\n\t//布尔类型输入\n\tbool flag = true;\n\tcout << \"请输入布尔型变量：\" << endl;\n\tcin >> flag;\n\tcout << flag << endl;\n\tsystem(\"pause\");\n\treturn EXIT_SUCCESS;\n}\n```","slug":"二-数据类型","published":1,"updated":"2023-03-01T12:01:30.884Z","_id":"clifr2v1w001t14uo21jg8e65","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"2-数据类型\"><a href=\"#2-数据类型\" class=\"headerlink\" title=\"2 数据类型\"></a>2 数据类型</h2><p>C++规定在创建一个变量或者常量时，必须要指定出相应的数据类型，否则无法给变量分配内存</p>\n<h3 id=\"2-1-整型\"><a href=\"#2-1-整型\" class=\"headerlink\" title=\"2.1 整型\"></a>2.1 整型</h3><p><strong>作用</strong>：整型变量表示的是==整数类型==的数据</p>\n<p>C++中能够表示整型的类型有以下几种方式，<strong>区别在于所占内存空间不同</strong>：</p>\n<table>\n<thead>\n<tr>\n<th><strong>数据类型</strong></th>\n<th><strong>占用空间</strong></th>\n<th>取值范围</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>short(短整型)</td>\n<td>2字节</td>\n<td>(-2^15 ~ 2^15-1)</td>\n</tr>\n<tr>\n<td>int(整型)</td>\n<td>4字节</td>\n<td>(-2^31 ~ 2^31-1)</td>\n</tr>\n<tr>\n<td>long(长整形)</td>\n<td>Windows为4字节，Linux为4字节(32位)，8字节(64位)</td>\n<td>(-2^31 ~ 2^31-1)</td>\n</tr>\n<tr>\n<td>long long(长长整形)</td>\n<td>8字节</td>\n<td>(-2^63 ~ 2^63-1)</td>\n</tr>\n</tbody></table>\n<h3 id=\"2-2-sizeof关键字\"><a href=\"#2-2-sizeof关键字\" class=\"headerlink\" title=\"2.2 sizeof关键字\"></a>2.2 sizeof关键字</h3><p><strong>作用：</strong>利用sizeof关键字可以==统计数据类型所占内存大小==</p>\n<p><strong>语法：</strong> <code>sizeof( 数据类型 / 变量)</code></p>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;short 类型所占内存空间为： &quot;</span> &lt;&lt; <span class=\"built_in\">sizeof</span>(<span class=\"type\">short</span>) &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;int 类型所占内存空间为： &quot;</span> &lt;&lt; <span class=\"built_in\">sizeof</span>(<span class=\"type\">int</span>) &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;long 类型所占内存空间为： &quot;</span> &lt;&lt; <span class=\"built_in\">sizeof</span>(<span class=\"type\">long</span>) &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;long long 类型所占内存空间为： &quot;</span> &lt;&lt; <span class=\"built_in\">sizeof</span>(<span class=\"type\">long</span> <span class=\"type\">long</span>) &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">system</span>(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<blockquote>\n<p><strong>整型结论</strong>：==short &lt; int &lt;= long &lt;= long long==</p>\n</blockquote>\n<h3 id=\"2-3-实型（浮点型）\"><a href=\"#2-3-实型（浮点型）\" class=\"headerlink\" title=\"2.3 实型（浮点型）\"></a>2.3 实型（浮点型）</h3><p><strong>作用</strong>：用于==表示小数==</p>\n<p>浮点型变量分为两种：</p>\n<ol>\n<li>单精度float </li>\n<li>双精度double</li>\n</ol>\n<p>两者的<strong>区别</strong>在于表示的有效数字范围不同。</p>\n<table>\n<thead>\n<tr>\n<th><strong>数据类型</strong></th>\n<th><strong>占用空间</strong></th>\n<th><strong>有效数字范围</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>float</td>\n<td>4字节</td>\n<td>7位有效数字</td>\n</tr>\n<tr>\n<td>double</td>\n<td>8字节</td>\n<td>15～16位有效数字</td>\n</tr>\n</tbody></table>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"type\">float</span> f1 = <span class=\"number\">3.14f</span>;</span><br><span class=\"line\">\t<span class=\"type\">double</span> d1 = <span class=\"number\">3.14</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\tcout &lt;&lt; f1 &lt;&lt; endl;</span><br><span class=\"line\">\tcout &lt;&lt; d1&lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;float  sizeof = &quot;</span> &lt;&lt; <span class=\"built_in\">sizeof</span>(f1) &lt;&lt; endl;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;double sizeof = &quot;</span> &lt;&lt; <span class=\"built_in\">sizeof</span>(d1) &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//科学计数法</span></span><br><span class=\"line\">\t<span class=\"type\">float</span> f2 = <span class=\"number\">3e2</span>; <span class=\"comment\">// 3 * 10 ^ 2 </span></span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;f2 = &quot;</span> &lt;&lt; f2 &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"type\">float</span> f3 = <span class=\"number\">3e-2</span>;  <span class=\"comment\">// 3 * 0.1 ^ 2</span></span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;f3 = &quot;</span> &lt;&lt; f3 &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">system</span>(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h3 id=\"2-4-字符型\"><a href=\"#2-4-字符型\" class=\"headerlink\" title=\"2.4 字符型\"></a>2.4 字符型</h3><p><strong>作用：</strong>字符型变量用于显示单个字符</p>\n<p><strong>语法：</strong><code>char ch = &#39;a&#39;;</code></p>\n<blockquote>\n<p>注意1：在显示字符型变量时，用单引号将字符括起来，不要用双引号</p>\n</blockquote>\n<blockquote>\n<p>注意2：单引号内只能有一个字符，不可以是字符串</p>\n</blockquote>\n<ul>\n<li>C和C++中字符型变量只占用==1个字节==。</li>\n<li>字符型变量并不是把字符本身放到内存中存储，而是将对应的ASCII编码放入到存储单元</li>\n</ul>\n<p>示例：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"type\">char</span> ch = <span class=\"string\">&#x27;a&#x27;</span>;</span><br><span class=\"line\">\tcout &lt;&lt; ch &lt;&lt; endl;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"built_in\">sizeof</span>(<span class=\"type\">char</span>) &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//ch = &quot;abcde&quot;; //错误，不可以用双引号</span></span><br><span class=\"line\">\t<span class=\"comment\">//ch = &#x27;abcde&#x27;; //错误，单引号内只能引用一个字符</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tcout &lt;&lt; (<span class=\"type\">int</span>)ch &lt;&lt; endl;  <span class=\"comment\">//查看字符a对应的ASCII码</span></span><br><span class=\"line\">\tch = <span class=\"number\">97</span>; <span class=\"comment\">//可以直接用ASCII给字符型变量赋值</span></span><br><span class=\"line\">\tcout &lt;&lt; ch &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">system</span>(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>ASCII码表格：</p>\n<table>\n<thead>\n<tr>\n<th><strong>ASCII</strong>值</th>\n<th><strong>控制字符</strong></th>\n<th><strong>ASCII</strong>值</th>\n<th><strong>字符</strong></th>\n<th><strong>ASCII</strong>值</th>\n<th><strong>字符</strong></th>\n<th><strong>ASCII</strong>值</th>\n<th><strong>字符</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>0</td>\n<td>NUT</td>\n<td>32</td>\n<td>(space)</td>\n<td>64</td>\n<td>@</td>\n<td>96</td>\n<td>、</td>\n</tr>\n<tr>\n<td>1</td>\n<td>SOH</td>\n<td>33</td>\n<td>!</td>\n<td>65</td>\n<td>A</td>\n<td>97</td>\n<td>a</td>\n</tr>\n<tr>\n<td>2</td>\n<td>STX</td>\n<td>34</td>\n<td>“</td>\n<td>66</td>\n<td>B</td>\n<td>98</td>\n<td>b</td>\n</tr>\n<tr>\n<td>3</td>\n<td>ETX</td>\n<td>35</td>\n<td>#</td>\n<td>67</td>\n<td>C</td>\n<td>99</td>\n<td>c</td>\n</tr>\n<tr>\n<td>4</td>\n<td>EOT</td>\n<td>36</td>\n<td>$</td>\n<td>68</td>\n<td>D</td>\n<td>100</td>\n<td>d</td>\n</tr>\n<tr>\n<td>5</td>\n<td>ENQ</td>\n<td>37</td>\n<td>%</td>\n<td>69</td>\n<td>E</td>\n<td>101</td>\n<td>e</td>\n</tr>\n<tr>\n<td>6</td>\n<td>ACK</td>\n<td>38</td>\n<td>&amp;</td>\n<td>70</td>\n<td>F</td>\n<td>102</td>\n<td>f</td>\n</tr>\n<tr>\n<td>7</td>\n<td>BEL</td>\n<td>39</td>\n<td>,</td>\n<td>71</td>\n<td>G</td>\n<td>103</td>\n<td>g</td>\n</tr>\n<tr>\n<td>8</td>\n<td>BS</td>\n<td>40</td>\n<td>(</td>\n<td>72</td>\n<td>H</td>\n<td>104</td>\n<td>h</td>\n</tr>\n<tr>\n<td>9</td>\n<td>HT</td>\n<td>41</td>\n<td>)</td>\n<td>73</td>\n<td>I</td>\n<td>105</td>\n<td>i</td>\n</tr>\n<tr>\n<td>10</td>\n<td>LF</td>\n<td>42</td>\n<td>*</td>\n<td>74</td>\n<td>J</td>\n<td>106</td>\n<td>j</td>\n</tr>\n<tr>\n<td>11</td>\n<td>VT</td>\n<td>43</td>\n<td>+</td>\n<td>75</td>\n<td>K</td>\n<td>107</td>\n<td>k</td>\n</tr>\n<tr>\n<td>12</td>\n<td>FF</td>\n<td>44</td>\n<td>,</td>\n<td>76</td>\n<td>L</td>\n<td>108</td>\n<td>l</td>\n</tr>\n<tr>\n<td>13</td>\n<td>CR</td>\n<td>45</td>\n<td>-</td>\n<td>77</td>\n<td>M</td>\n<td>109</td>\n<td>m</td>\n</tr>\n<tr>\n<td>14</td>\n<td>SO</td>\n<td>46</td>\n<td>.</td>\n<td>78</td>\n<td>N</td>\n<td>110</td>\n<td>n</td>\n</tr>\n<tr>\n<td>15</td>\n<td>SI</td>\n<td>47</td>\n<td>/</td>\n<td>79</td>\n<td>O</td>\n<td>111</td>\n<td>o</td>\n</tr>\n<tr>\n<td>16</td>\n<td>DLE</td>\n<td>48</td>\n<td>0</td>\n<td>80</td>\n<td>P</td>\n<td>112</td>\n<td>p</td>\n</tr>\n<tr>\n<td>17</td>\n<td>DCI</td>\n<td>49</td>\n<td>1</td>\n<td>81</td>\n<td>Q</td>\n<td>113</td>\n<td>q</td>\n</tr>\n<tr>\n<td>18</td>\n<td>DC2</td>\n<td>50</td>\n<td>2</td>\n<td>82</td>\n<td>R</td>\n<td>114</td>\n<td>r</td>\n</tr>\n<tr>\n<td>19</td>\n<td>DC3</td>\n<td>51</td>\n<td>3</td>\n<td>83</td>\n<td>S</td>\n<td>115</td>\n<td>s</td>\n</tr>\n<tr>\n<td>20</td>\n<td>DC4</td>\n<td>52</td>\n<td>4</td>\n<td>84</td>\n<td>T</td>\n<td>116</td>\n<td>t</td>\n</tr>\n<tr>\n<td>21</td>\n<td>NAK</td>\n<td>53</td>\n<td>5</td>\n<td>85</td>\n<td>U</td>\n<td>117</td>\n<td>u</td>\n</tr>\n<tr>\n<td>22</td>\n<td>SYN</td>\n<td>54</td>\n<td>6</td>\n<td>86</td>\n<td>V</td>\n<td>118</td>\n<td>v</td>\n</tr>\n<tr>\n<td>23</td>\n<td>TB</td>\n<td>55</td>\n<td>7</td>\n<td>87</td>\n<td>W</td>\n<td>119</td>\n<td>w</td>\n</tr>\n<tr>\n<td>24</td>\n<td>CAN</td>\n<td>56</td>\n<td>8</td>\n<td>88</td>\n<td>X</td>\n<td>120</td>\n<td>x</td>\n</tr>\n<tr>\n<td>25</td>\n<td>EM</td>\n<td>57</td>\n<td>9</td>\n<td>89</td>\n<td>Y</td>\n<td>121</td>\n<td>y</td>\n</tr>\n<tr>\n<td>26</td>\n<td>SUB</td>\n<td>58</td>\n<td>:</td>\n<td>90</td>\n<td>Z</td>\n<td>122</td>\n<td>z</td>\n</tr>\n<tr>\n<td>27</td>\n<td>ESC</td>\n<td>59</td>\n<td>;</td>\n<td>91</td>\n<td>[</td>\n<td>123</td>\n<td>{</td>\n</tr>\n<tr>\n<td>28</td>\n<td>FS</td>\n<td>60</td>\n<td>&lt;</td>\n<td>92</td>\n<td>/</td>\n<td>124</td>\n<td>|</td>\n</tr>\n<tr>\n<td>29</td>\n<td>GS</td>\n<td>61</td>\n<td>=</td>\n<td>93</td>\n<td>]</td>\n<td>125</td>\n<td>}</td>\n</tr>\n<tr>\n<td>30</td>\n<td>RS</td>\n<td>62</td>\n<td>&gt;</td>\n<td>94</td>\n<td>^</td>\n<td>126</td>\n<td>`</td>\n</tr>\n<tr>\n<td>31</td>\n<td>US</td>\n<td>63</td>\n<td>?</td>\n<td>95</td>\n<td>_</td>\n<td>127</td>\n<td>DEL</td>\n</tr>\n</tbody></table>\n<p>ASCII 码大致由以下<strong>两部分组</strong>成：</p>\n<ul>\n<li>ASCII 非打印控制字符： ASCII 表上的数字 <strong>0-31</strong> 分配给了控制字符，用于控制像打印机等一些外围设备。</li>\n<li>ASCII 打印字符：数字 <strong>32-126</strong> 分配给了能在键盘上找到的字符，当查看或打印文档时就会出现。</li>\n</ul>\n<h3 id=\"2-5-转义字符\"><a href=\"#2-5-转义字符\" class=\"headerlink\" title=\"2.5 转义字符\"></a>2.5 转义字符</h3><p><strong>作用：</strong>用于表示一些==不能显示出来的ASCII字符==</p>\n<p>现阶段我们常用的转义字符有：<code> \\n  \\\\  \\t</code></p>\n<table>\n<thead>\n<tr>\n<th><strong>转义字符</strong></th>\n<th><strong>含义</strong></th>\n<th><strong>ASCII</strong>码值（十进制）</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>\\a</td>\n<td>警报</td>\n<td>007</td>\n</tr>\n<tr>\n<td>\\b</td>\n<td>退格(BS) ，将当前位置移到前一列</td>\n<td>008</td>\n</tr>\n<tr>\n<td>\\f</td>\n<td>换页(FF)，将当前位置移到下页开头</td>\n<td>012</td>\n</tr>\n<tr>\n<td><strong>\\n</strong></td>\n<td><strong>换行(LF) ，将当前位置移到下一行开头</strong></td>\n<td><strong>010</strong></td>\n</tr>\n<tr>\n<td>\\r</td>\n<td>回车(CR) ，将当前位置移到本行开头</td>\n<td>013</td>\n</tr>\n<tr>\n<td><strong>\\t</strong></td>\n<td><strong>水平制表(HT)  （跳到下一个TAB位置）</strong></td>\n<td><strong>009</strong></td>\n</tr>\n<tr>\n<td>\\v</td>\n<td>垂直制表(VT)</td>\n<td>011</td>\n</tr>\n<tr>\n<td>*<em>\\\\*</em></td>\n<td><strong>代表一个反斜线字符”&quot;</strong></td>\n<td><strong>092</strong></td>\n</tr>\n<tr>\n<td>&#39;</td>\n<td>代表一个单引号（撇号）字符</td>\n<td>039</td>\n</tr>\n<tr>\n<td>&quot;</td>\n<td>代表一个双引号字符</td>\n<td>034</td>\n</tr>\n<tr>\n<td>?</td>\n<td>代表一个问号</td>\n<td>063</td>\n</tr>\n<tr>\n<td>\\0</td>\n<td>数字0</td>\n<td>000</td>\n</tr>\n<tr>\n<td>\\ddd</td>\n<td>8进制转义字符，d范围0~7</td>\n<td>3位8进制</td>\n</tr>\n<tr>\n<td>\\xhh</td>\n<td>16进制转义字符，h范围0<del>9，a</del>f，A~F</td>\n<td>3位16进制</td>\n</tr>\n</tbody></table>\n<p>示例：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;\\\\&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;\\tHello&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;\\n&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">system</span>(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n\n\n\n\n\n\n<h3 id=\"2-6-字符串型\"><a href=\"#2-6-字符串型\" class=\"headerlink\" title=\"2.6 字符串型\"></a>2.6 字符串型</h3><p><strong>作用</strong>：用于表示一串字符</p>\n<p><strong>两种风格</strong></p>\n<ol>\n<li><p><strong>C风格字符串</strong>： <code>char 变量名[] = &quot;字符串值&quot;</code></p>\n<p>示例：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"type\">char</span> str1[] = <span class=\"string\">&quot;hello world&quot;</span>;</span><br><span class=\"line\">\tcout &lt;&lt; str1 &lt;&lt; endl;</span><br><span class=\"line\">    </span><br><span class=\"line\">\t<span class=\"built_in\">system</span>(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<blockquote>\n<p>注意：C风格的字符串要用双引号括起来</p>\n</blockquote>\n<ol>\n<li><p><strong>C++风格字符串</strong>：  <code>string  变量名 = &quot;字符串值&quot;</code></p>\n<p>示例：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\tstring str = <span class=\"string\">&quot;hello world&quot;</span>;</span><br><span class=\"line\">\tcout &lt;&lt; str &lt;&lt; endl;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"built_in\">system</span>(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<blockquote>\n<p>注意：C++风格字符串，需要加入头文件==#include&lt;string&gt;==</p>\n</blockquote>\n<h3 id=\"2-7-布尔类型-bool\"><a href=\"#2-7-布尔类型-bool\" class=\"headerlink\" title=\"2.7 布尔类型 bool\"></a>2.7 布尔类型 bool</h3><p><strong>作用：</strong>布尔数据类型代表真或假的值 </p>\n<p>bool类型只有两个值：</p>\n<ul>\n<li>true  — 真（本质是1）</li>\n<li>false — 假（本质是0）</li>\n</ul>\n<p><strong>bool类型占==1个字节==大小</strong></p>\n<p>示例：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"type\">bool</span> flag = <span class=\"literal\">true</span>;</span><br><span class=\"line\">\tcout &lt;&lt; flag &lt;&lt; endl; <span class=\"comment\">// 1</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tflag = <span class=\"literal\">false</span>;</span><br><span class=\"line\">\tcout &lt;&lt; flag &lt;&lt; endl; <span class=\"comment\">// 0</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;size of bool = &quot;</span> &lt;&lt; <span class=\"built_in\">sizeof</span>(<span class=\"type\">bool</span>) &lt;&lt; endl; <span class=\"comment\">//1</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"built_in\">system</span>(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<h3 id=\"2-8-数据的输入\"><a href=\"#2-8-数据的输入\" class=\"headerlink\" title=\"2.8 数据的输入\"></a>2.8 数据的输入</h3><p><strong>作用：用于从键盘获取数据</strong></p>\n<p><strong>关键字：</strong>cin</p>\n<p><strong>语法：</strong> <code>cin &gt;&gt; 变量 </code></p>\n<p>示例：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//整型输入</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> a = <span class=\"number\">0</span>;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;请输入整型变量：&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\tcin &gt;&gt; a;</span><br><span class=\"line\">\tcout &lt;&lt; a &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//浮点型输入</span></span><br><span class=\"line\">\t<span class=\"type\">double</span> d = <span class=\"number\">0</span>;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;请输入浮点型变量：&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\tcin &gt;&gt; d;</span><br><span class=\"line\">\tcout &lt;&lt; d &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//字符型输入</span></span><br><span class=\"line\">\t<span class=\"type\">char</span> ch = <span class=\"number\">0</span>;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;请输入字符型变量：&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\tcin &gt;&gt; ch;</span><br><span class=\"line\">\tcout &lt;&lt; ch &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//字符串型输入</span></span><br><span class=\"line\">\tstring str;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;请输入字符串型变量：&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\tcin &gt;&gt; str;</span><br><span class=\"line\">\tcout &lt;&lt; str &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//布尔类型输入</span></span><br><span class=\"line\">\t<span class=\"type\">bool</span> flag = <span class=\"literal\">true</span>;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;请输入布尔型变量：&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\tcin &gt;&gt; flag;</span><br><span class=\"line\">\tcout &lt;&lt; flag &lt;&lt; endl;</span><br><span class=\"line\">\t<span class=\"built_in\">system</span>(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> EXIT_SUCCESS;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"2-数据类型\"><a href=\"#2-数据类型\" class=\"headerlink\" title=\"2 数据类型\"></a>2 数据类型</h2><p>C++规定在创建一个变量或者常量时，必须要指定出相应的数据类型，否则无法给变量分配内存</p>\n<h3 id=\"2-1-整型\"><a href=\"#2-1-整型\" class=\"headerlink\" title=\"2.1 整型\"></a>2.1 整型</h3><p><strong>作用</strong>：整型变量表示的是==整数类型==的数据</p>\n<p>C++中能够表示整型的类型有以下几种方式，<strong>区别在于所占内存空间不同</strong>：</p>\n<table>\n<thead>\n<tr>\n<th><strong>数据类型</strong></th>\n<th><strong>占用空间</strong></th>\n<th>取值范围</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>short(短整型)</td>\n<td>2字节</td>\n<td>(-2^15 ~ 2^15-1)</td>\n</tr>\n<tr>\n<td>int(整型)</td>\n<td>4字节</td>\n<td>(-2^31 ~ 2^31-1)</td>\n</tr>\n<tr>\n<td>long(长整形)</td>\n<td>Windows为4字节，Linux为4字节(32位)，8字节(64位)</td>\n<td>(-2^31 ~ 2^31-1)</td>\n</tr>\n<tr>\n<td>long long(长长整形)</td>\n<td>8字节</td>\n<td>(-2^63 ~ 2^63-1)</td>\n</tr>\n</tbody></table>\n<h3 id=\"2-2-sizeof关键字\"><a href=\"#2-2-sizeof关键字\" class=\"headerlink\" title=\"2.2 sizeof关键字\"></a>2.2 sizeof关键字</h3><p><strong>作用：</strong>利用sizeof关键字可以==统计数据类型所占内存大小==</p>\n<p><strong>语法：</strong> <code>sizeof( 数据类型 / 变量)</code></p>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;short 类型所占内存空间为： &quot;</span> &lt;&lt; <span class=\"built_in\">sizeof</span>(<span class=\"type\">short</span>) &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;int 类型所占内存空间为： &quot;</span> &lt;&lt; <span class=\"built_in\">sizeof</span>(<span class=\"type\">int</span>) &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;long 类型所占内存空间为： &quot;</span> &lt;&lt; <span class=\"built_in\">sizeof</span>(<span class=\"type\">long</span>) &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;long long 类型所占内存空间为： &quot;</span> &lt;&lt; <span class=\"built_in\">sizeof</span>(<span class=\"type\">long</span> <span class=\"type\">long</span>) &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">system</span>(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<blockquote>\n<p><strong>整型结论</strong>：==short &lt; int &lt;= long &lt;= long long==</p>\n</blockquote>\n<h3 id=\"2-3-实型（浮点型）\"><a href=\"#2-3-实型（浮点型）\" class=\"headerlink\" title=\"2.3 实型（浮点型）\"></a>2.3 实型（浮点型）</h3><p><strong>作用</strong>：用于==表示小数==</p>\n<p>浮点型变量分为两种：</p>\n<ol>\n<li>单精度float </li>\n<li>双精度double</li>\n</ol>\n<p>两者的<strong>区别</strong>在于表示的有效数字范围不同。</p>\n<table>\n<thead>\n<tr>\n<th><strong>数据类型</strong></th>\n<th><strong>占用空间</strong></th>\n<th><strong>有效数字范围</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>float</td>\n<td>4字节</td>\n<td>7位有效数字</td>\n</tr>\n<tr>\n<td>double</td>\n<td>8字节</td>\n<td>15～16位有效数字</td>\n</tr>\n</tbody></table>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"type\">float</span> f1 = <span class=\"number\">3.14f</span>;</span><br><span class=\"line\">\t<span class=\"type\">double</span> d1 = <span class=\"number\">3.14</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\tcout &lt;&lt; f1 &lt;&lt; endl;</span><br><span class=\"line\">\tcout &lt;&lt; d1&lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;float  sizeof = &quot;</span> &lt;&lt; <span class=\"built_in\">sizeof</span>(f1) &lt;&lt; endl;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;double sizeof = &quot;</span> &lt;&lt; <span class=\"built_in\">sizeof</span>(d1) &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//科学计数法</span></span><br><span class=\"line\">\t<span class=\"type\">float</span> f2 = <span class=\"number\">3e2</span>; <span class=\"comment\">// 3 * 10 ^ 2 </span></span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;f2 = &quot;</span> &lt;&lt; f2 &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"type\">float</span> f3 = <span class=\"number\">3e-2</span>;  <span class=\"comment\">// 3 * 0.1 ^ 2</span></span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;f3 = &quot;</span> &lt;&lt; f3 &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">system</span>(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h3 id=\"2-4-字符型\"><a href=\"#2-4-字符型\" class=\"headerlink\" title=\"2.4 字符型\"></a>2.4 字符型</h3><p><strong>作用：</strong>字符型变量用于显示单个字符</p>\n<p><strong>语法：</strong><code>char ch = &#39;a&#39;;</code></p>\n<blockquote>\n<p>注意1：在显示字符型变量时，用单引号将字符括起来，不要用双引号</p>\n</blockquote>\n<blockquote>\n<p>注意2：单引号内只能有一个字符，不可以是字符串</p>\n</blockquote>\n<ul>\n<li>C和C++中字符型变量只占用==1个字节==。</li>\n<li>字符型变量并不是把字符本身放到内存中存储，而是将对应的ASCII编码放入到存储单元</li>\n</ul>\n<p>示例：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"type\">char</span> ch = <span class=\"string\">&#x27;a&#x27;</span>;</span><br><span class=\"line\">\tcout &lt;&lt; ch &lt;&lt; endl;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"built_in\">sizeof</span>(<span class=\"type\">char</span>) &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//ch = &quot;abcde&quot;; //错误，不可以用双引号</span></span><br><span class=\"line\">\t<span class=\"comment\">//ch = &#x27;abcde&#x27;; //错误，单引号内只能引用一个字符</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tcout &lt;&lt; (<span class=\"type\">int</span>)ch &lt;&lt; endl;  <span class=\"comment\">//查看字符a对应的ASCII码</span></span><br><span class=\"line\">\tch = <span class=\"number\">97</span>; <span class=\"comment\">//可以直接用ASCII给字符型变量赋值</span></span><br><span class=\"line\">\tcout &lt;&lt; ch &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">system</span>(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>ASCII码表格：</p>\n<table>\n<thead>\n<tr>\n<th><strong>ASCII</strong>值</th>\n<th><strong>控制字符</strong></th>\n<th><strong>ASCII</strong>值</th>\n<th><strong>字符</strong></th>\n<th><strong>ASCII</strong>值</th>\n<th><strong>字符</strong></th>\n<th><strong>ASCII</strong>值</th>\n<th><strong>字符</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>0</td>\n<td>NUT</td>\n<td>32</td>\n<td>(space)</td>\n<td>64</td>\n<td>@</td>\n<td>96</td>\n<td>、</td>\n</tr>\n<tr>\n<td>1</td>\n<td>SOH</td>\n<td>33</td>\n<td>!</td>\n<td>65</td>\n<td>A</td>\n<td>97</td>\n<td>a</td>\n</tr>\n<tr>\n<td>2</td>\n<td>STX</td>\n<td>34</td>\n<td>“</td>\n<td>66</td>\n<td>B</td>\n<td>98</td>\n<td>b</td>\n</tr>\n<tr>\n<td>3</td>\n<td>ETX</td>\n<td>35</td>\n<td>#</td>\n<td>67</td>\n<td>C</td>\n<td>99</td>\n<td>c</td>\n</tr>\n<tr>\n<td>4</td>\n<td>EOT</td>\n<td>36</td>\n<td>$</td>\n<td>68</td>\n<td>D</td>\n<td>100</td>\n<td>d</td>\n</tr>\n<tr>\n<td>5</td>\n<td>ENQ</td>\n<td>37</td>\n<td>%</td>\n<td>69</td>\n<td>E</td>\n<td>101</td>\n<td>e</td>\n</tr>\n<tr>\n<td>6</td>\n<td>ACK</td>\n<td>38</td>\n<td>&amp;</td>\n<td>70</td>\n<td>F</td>\n<td>102</td>\n<td>f</td>\n</tr>\n<tr>\n<td>7</td>\n<td>BEL</td>\n<td>39</td>\n<td>,</td>\n<td>71</td>\n<td>G</td>\n<td>103</td>\n<td>g</td>\n</tr>\n<tr>\n<td>8</td>\n<td>BS</td>\n<td>40</td>\n<td>(</td>\n<td>72</td>\n<td>H</td>\n<td>104</td>\n<td>h</td>\n</tr>\n<tr>\n<td>9</td>\n<td>HT</td>\n<td>41</td>\n<td>)</td>\n<td>73</td>\n<td>I</td>\n<td>105</td>\n<td>i</td>\n</tr>\n<tr>\n<td>10</td>\n<td>LF</td>\n<td>42</td>\n<td>*</td>\n<td>74</td>\n<td>J</td>\n<td>106</td>\n<td>j</td>\n</tr>\n<tr>\n<td>11</td>\n<td>VT</td>\n<td>43</td>\n<td>+</td>\n<td>75</td>\n<td>K</td>\n<td>107</td>\n<td>k</td>\n</tr>\n<tr>\n<td>12</td>\n<td>FF</td>\n<td>44</td>\n<td>,</td>\n<td>76</td>\n<td>L</td>\n<td>108</td>\n<td>l</td>\n</tr>\n<tr>\n<td>13</td>\n<td>CR</td>\n<td>45</td>\n<td>-</td>\n<td>77</td>\n<td>M</td>\n<td>109</td>\n<td>m</td>\n</tr>\n<tr>\n<td>14</td>\n<td>SO</td>\n<td>46</td>\n<td>.</td>\n<td>78</td>\n<td>N</td>\n<td>110</td>\n<td>n</td>\n</tr>\n<tr>\n<td>15</td>\n<td>SI</td>\n<td>47</td>\n<td>/</td>\n<td>79</td>\n<td>O</td>\n<td>111</td>\n<td>o</td>\n</tr>\n<tr>\n<td>16</td>\n<td>DLE</td>\n<td>48</td>\n<td>0</td>\n<td>80</td>\n<td>P</td>\n<td>112</td>\n<td>p</td>\n</tr>\n<tr>\n<td>17</td>\n<td>DCI</td>\n<td>49</td>\n<td>1</td>\n<td>81</td>\n<td>Q</td>\n<td>113</td>\n<td>q</td>\n</tr>\n<tr>\n<td>18</td>\n<td>DC2</td>\n<td>50</td>\n<td>2</td>\n<td>82</td>\n<td>R</td>\n<td>114</td>\n<td>r</td>\n</tr>\n<tr>\n<td>19</td>\n<td>DC3</td>\n<td>51</td>\n<td>3</td>\n<td>83</td>\n<td>S</td>\n<td>115</td>\n<td>s</td>\n</tr>\n<tr>\n<td>20</td>\n<td>DC4</td>\n<td>52</td>\n<td>4</td>\n<td>84</td>\n<td>T</td>\n<td>116</td>\n<td>t</td>\n</tr>\n<tr>\n<td>21</td>\n<td>NAK</td>\n<td>53</td>\n<td>5</td>\n<td>85</td>\n<td>U</td>\n<td>117</td>\n<td>u</td>\n</tr>\n<tr>\n<td>22</td>\n<td>SYN</td>\n<td>54</td>\n<td>6</td>\n<td>86</td>\n<td>V</td>\n<td>118</td>\n<td>v</td>\n</tr>\n<tr>\n<td>23</td>\n<td>TB</td>\n<td>55</td>\n<td>7</td>\n<td>87</td>\n<td>W</td>\n<td>119</td>\n<td>w</td>\n</tr>\n<tr>\n<td>24</td>\n<td>CAN</td>\n<td>56</td>\n<td>8</td>\n<td>88</td>\n<td>X</td>\n<td>120</td>\n<td>x</td>\n</tr>\n<tr>\n<td>25</td>\n<td>EM</td>\n<td>57</td>\n<td>9</td>\n<td>89</td>\n<td>Y</td>\n<td>121</td>\n<td>y</td>\n</tr>\n<tr>\n<td>26</td>\n<td>SUB</td>\n<td>58</td>\n<td>:</td>\n<td>90</td>\n<td>Z</td>\n<td>122</td>\n<td>z</td>\n</tr>\n<tr>\n<td>27</td>\n<td>ESC</td>\n<td>59</td>\n<td>;</td>\n<td>91</td>\n<td>[</td>\n<td>123</td>\n<td>{</td>\n</tr>\n<tr>\n<td>28</td>\n<td>FS</td>\n<td>60</td>\n<td>&lt;</td>\n<td>92</td>\n<td>/</td>\n<td>124</td>\n<td>|</td>\n</tr>\n<tr>\n<td>29</td>\n<td>GS</td>\n<td>61</td>\n<td>=</td>\n<td>93</td>\n<td>]</td>\n<td>125</td>\n<td>}</td>\n</tr>\n<tr>\n<td>30</td>\n<td>RS</td>\n<td>62</td>\n<td>&gt;</td>\n<td>94</td>\n<td>^</td>\n<td>126</td>\n<td>`</td>\n</tr>\n<tr>\n<td>31</td>\n<td>US</td>\n<td>63</td>\n<td>?</td>\n<td>95</td>\n<td>_</td>\n<td>127</td>\n<td>DEL</td>\n</tr>\n</tbody></table>\n<p>ASCII 码大致由以下<strong>两部分组</strong>成：</p>\n<ul>\n<li>ASCII 非打印控制字符： ASCII 表上的数字 <strong>0-31</strong> 分配给了控制字符，用于控制像打印机等一些外围设备。</li>\n<li>ASCII 打印字符：数字 <strong>32-126</strong> 分配给了能在键盘上找到的字符，当查看或打印文档时就会出现。</li>\n</ul>\n<h3 id=\"2-5-转义字符\"><a href=\"#2-5-转义字符\" class=\"headerlink\" title=\"2.5 转义字符\"></a>2.5 转义字符</h3><p><strong>作用：</strong>用于表示一些==不能显示出来的ASCII字符==</p>\n<p>现阶段我们常用的转义字符有：<code> \\n  \\\\  \\t</code></p>\n<table>\n<thead>\n<tr>\n<th><strong>转义字符</strong></th>\n<th><strong>含义</strong></th>\n<th><strong>ASCII</strong>码值（十进制）</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>\\a</td>\n<td>警报</td>\n<td>007</td>\n</tr>\n<tr>\n<td>\\b</td>\n<td>退格(BS) ，将当前位置移到前一列</td>\n<td>008</td>\n</tr>\n<tr>\n<td>\\f</td>\n<td>换页(FF)，将当前位置移到下页开头</td>\n<td>012</td>\n</tr>\n<tr>\n<td><strong>\\n</strong></td>\n<td><strong>换行(LF) ，将当前位置移到下一行开头</strong></td>\n<td><strong>010</strong></td>\n</tr>\n<tr>\n<td>\\r</td>\n<td>回车(CR) ，将当前位置移到本行开头</td>\n<td>013</td>\n</tr>\n<tr>\n<td><strong>\\t</strong></td>\n<td><strong>水平制表(HT)  （跳到下一个TAB位置）</strong></td>\n<td><strong>009</strong></td>\n</tr>\n<tr>\n<td>\\v</td>\n<td>垂直制表(VT)</td>\n<td>011</td>\n</tr>\n<tr>\n<td>*<em>\\\\*</em></td>\n<td><strong>代表一个反斜线字符”&quot;</strong></td>\n<td><strong>092</strong></td>\n</tr>\n<tr>\n<td>&#39;</td>\n<td>代表一个单引号（撇号）字符</td>\n<td>039</td>\n</tr>\n<tr>\n<td>&quot;</td>\n<td>代表一个双引号字符</td>\n<td>034</td>\n</tr>\n<tr>\n<td>?</td>\n<td>代表一个问号</td>\n<td>063</td>\n</tr>\n<tr>\n<td>\\0</td>\n<td>数字0</td>\n<td>000</td>\n</tr>\n<tr>\n<td>\\ddd</td>\n<td>8进制转义字符，d范围0~7</td>\n<td>3位8进制</td>\n</tr>\n<tr>\n<td>\\xhh</td>\n<td>16进制转义字符，h范围0<del>9，a</del>f，A~F</td>\n<td>3位16进制</td>\n</tr>\n</tbody></table>\n<p>示例：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;\\\\&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;\\tHello&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;\\n&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">system</span>(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n\n\n\n\n\n\n<h3 id=\"2-6-字符串型\"><a href=\"#2-6-字符串型\" class=\"headerlink\" title=\"2.6 字符串型\"></a>2.6 字符串型</h3><p><strong>作用</strong>：用于表示一串字符</p>\n<p><strong>两种风格</strong></p>\n<ol>\n<li><p><strong>C风格字符串</strong>： <code>char 变量名[] = &quot;字符串值&quot;</code></p>\n<p>示例：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"type\">char</span> str1[] = <span class=\"string\">&quot;hello world&quot;</span>;</span><br><span class=\"line\">\tcout &lt;&lt; str1 &lt;&lt; endl;</span><br><span class=\"line\">    </span><br><span class=\"line\">\t<span class=\"built_in\">system</span>(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<blockquote>\n<p>注意：C风格的字符串要用双引号括起来</p>\n</blockquote>\n<ol>\n<li><p><strong>C++风格字符串</strong>：  <code>string  变量名 = &quot;字符串值&quot;</code></p>\n<p>示例：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\tstring str = <span class=\"string\">&quot;hello world&quot;</span>;</span><br><span class=\"line\">\tcout &lt;&lt; str &lt;&lt; endl;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"built_in\">system</span>(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<blockquote>\n<p>注意：C++风格字符串，需要加入头文件==#include&lt;string&gt;==</p>\n</blockquote>\n<h3 id=\"2-7-布尔类型-bool\"><a href=\"#2-7-布尔类型-bool\" class=\"headerlink\" title=\"2.7 布尔类型 bool\"></a>2.7 布尔类型 bool</h3><p><strong>作用：</strong>布尔数据类型代表真或假的值 </p>\n<p>bool类型只有两个值：</p>\n<ul>\n<li>true  — 真（本质是1）</li>\n<li>false — 假（本质是0）</li>\n</ul>\n<p><strong>bool类型占==1个字节==大小</strong></p>\n<p>示例：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"type\">bool</span> flag = <span class=\"literal\">true</span>;</span><br><span class=\"line\">\tcout &lt;&lt; flag &lt;&lt; endl; <span class=\"comment\">// 1</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tflag = <span class=\"literal\">false</span>;</span><br><span class=\"line\">\tcout &lt;&lt; flag &lt;&lt; endl; <span class=\"comment\">// 0</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;size of bool = &quot;</span> &lt;&lt; <span class=\"built_in\">sizeof</span>(<span class=\"type\">bool</span>) &lt;&lt; endl; <span class=\"comment\">//1</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"built_in\">system</span>(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<h3 id=\"2-8-数据的输入\"><a href=\"#2-8-数据的输入\" class=\"headerlink\" title=\"2.8 数据的输入\"></a>2.8 数据的输入</h3><p><strong>作用：用于从键盘获取数据</strong></p>\n<p><strong>关键字：</strong>cin</p>\n<p><strong>语法：</strong> <code>cin &gt;&gt; 变量 </code></p>\n<p>示例：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//整型输入</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> a = <span class=\"number\">0</span>;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;请输入整型变量：&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\tcin &gt;&gt; a;</span><br><span class=\"line\">\tcout &lt;&lt; a &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//浮点型输入</span></span><br><span class=\"line\">\t<span class=\"type\">double</span> d = <span class=\"number\">0</span>;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;请输入浮点型变量：&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\tcin &gt;&gt; d;</span><br><span class=\"line\">\tcout &lt;&lt; d &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//字符型输入</span></span><br><span class=\"line\">\t<span class=\"type\">char</span> ch = <span class=\"number\">0</span>;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;请输入字符型变量：&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\tcin &gt;&gt; ch;</span><br><span class=\"line\">\tcout &lt;&lt; ch &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//字符串型输入</span></span><br><span class=\"line\">\tstring str;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;请输入字符串型变量：&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\tcin &gt;&gt; str;</span><br><span class=\"line\">\tcout &lt;&lt; str &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//布尔类型输入</span></span><br><span class=\"line\">\t<span class=\"type\">bool</span> flag = <span class=\"literal\">true</span>;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;请输入布尔型变量：&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\tcin &gt;&gt; flag;</span><br><span class=\"line\">\tcout &lt;&lt; flag &lt;&lt; endl;</span><br><span class=\"line\">\t<span class=\"built_in\">system</span>(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> EXIT_SUCCESS;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"五.数组","author":"连思鑫","date":"2023-03-01T11:16:00.000Z","_content":"## 5 数组\n\n### 5.1 概述\n\n所谓数组，就是一个集合，里面存放了相同类型的数据元素\n\n\n\n**特点1：**数组中的每个==数据元素都是相同的数据类型==\n\n**特点2：**数组是由==连续的内存==位置组成的\n\n\n\n![1541748375356](/assets/1541748375356.png)\n\n\n\n### 5.2 一维数组\n\n#### 5.2.1 一维数组定义方式\n\n一维数组定义的三种方式：\n\n1. ` 数据类型  数组名[ 数组长度 ]; `\n2. `数据类型  数组名[ 数组长度 ] = { 值1，值2 ...};`\n3. `数据类型  数组名[ ] = { 值1，值2 ...};`\n\n\n\n示例\n\n```C++\nint main() {\n\n\t//定义方式1\n\t//数据类型 数组名[元素个数];\n\tint score[10];\n\n\t//利用下标赋值\n\tscore[0] = 100;\n\tscore[1] = 99;\n\tscore[2] = 85;\n\n\t//利用下标输出\n\tcout << score[0] << endl;\n\tcout << score[1] << endl;\n\tcout << score[2] << endl;\n\n\n\t//第二种定义方式\n\t//数据类型 数组名[元素个数] =  {值1，值2 ，值3 ...};\n\t//如果{}内不足10个数据，剩余数据用0补全\n\tint score2[10] = { 100, 90,80,70,60,50,40,30,20,10 };\n\t\n\t//逐个输出\n\t//cout << score2[0] << endl;\n\t//cout << score2[1] << endl;\n\n\t//一个一个输出太麻烦，因此可以利用循环进行输出\n\tfor (int i = 0; i < 10; i++)\n\t{\n\t\tcout << score2[i] << endl;\n\t}\n\n\t//定义方式3\n\t//数据类型 数组名[] =  {值1，值2 ，值3 ...};\n\tint score3[] = { 100,90,80,70,60,50,40,30,20,10 };\n\n\tfor (int i = 0; i < 10; i++)\n\t{\n\t\tcout << score3[i] << endl;\n\t}\n\n\tsystem(\"pause\");\n\n\treturn 0;\n}\n```\n\n\n> 总结1：数组名的命名规范与变量名命名规范一致，不要和变量重名\n\n> 总结2：数组中下标是从0开始索引\n\n\n\n#### 5.2.2 一维数组数组名\n\n一维数组名称的**用途**：\n\n1. 可以统计整个数组在内存中的长度\n2. 可以获取数组在内存中的首地址\n\n\n\n\n**示例：**\n\n```C++\nint main() {\n\n\t//数组名用途\n\t//1、可以获取整个数组占用内存空间大小\n\tint arr[10] = { 1,2,3,4,5,6,7,8,9,10 };\n\n\tcout << \"整个数组所占内存空间为： \" << sizeof(arr) << endl;\n\tcout << \"每个元素所占内存空间为： \" << sizeof(arr[0]) << endl;\n\tcout << \"数组的元素个数为： \" << sizeof(arr) / sizeof(arr[0]) << endl;\n\n\t//2、可以通过数组名获取到数组首地址\n\tcout << \"数组首地址为： \" << (int)arr << endl;\n\tcout << \"数组中第一个元素地址为： \" << (int)&arr[0] << endl;\n\tcout << \"数组中第二个元素地址为： \" << (int)&arr[1] << endl;\n\n\t//arr = 100; 错误，数组名是常量，因此不可以赋值\n\n\n\tsystem(\"pause\");\n\n\treturn 0;\n}\n```\n\n\n\n> 注意：数组名是常量，不可以赋值\n\n> 总结1：直接打印数组名，可以查看数组所占内存的首地址\n\n>总结2：对数组名进行sizeof，可以获取整个数组占内存空间的大小\n\n\n\n\n**练习案例1**：五只小猪称体重\n\n**案例描述：**\n\n在一个数组中记录了五只小猪的体重，如：int arr[5] = {300,350,200,400,250};\n\n找出并打印最重的小猪体重。\n\n代码实现\n```c++\n#include <iostream>\nusing namespace std;\n\nint main()\n{\n\tint arr[5] = { 300, 350, 200, 400, 250 };\n\tint heaviest = 0;\n\tfor (int i = 0; i < 5; i++)\n\t{\n\t\tif (arr[i] > heaviest)\n\t\t{\n\t\t\theaviest = arr[i];\n\t\t}\n\t}\n\tcout << \"最重的小猪体重为：\" << heaviest << endl;\n\n\tsystem(\"pause\");\n\treturn 0;\n}\n```\n\n\n\n\n**练习案例2：**数组元素逆置\n\n**案例描述：**请声明一个5个元素的数组，并且将元素逆置.\n\n(如原数组元素为：1,3,2,5,4;逆置后输出结果为:4,5,2,3,1);\n\n代码实现：\n\n```c++\n#include<iostream>\nusing namespace std;\nint main()\n{\n    int a[5] = { 1,2,3,5,4 };\n    int b[5];\n    for (int i = 0; i<=4; i++)\n    {\n        b[4 - i] = a[i];\n    }\n    for (int i= 0; i < 5; i++)\n    {\n        cout << b[i] << endl;\n    }\n    system(\"pause\");\n    return 0;\n}\n```\n\n\n\n\n#### 5.2.3 冒泡排序\n\n**作用：** 最常用的排序算法，对数组内元素进行排序\n\n1. 比较相邻的元素。如果第一个比第二个大，就交换他们两个。\n2. 对每一对相邻元素做同样的工作，执行完毕后，找到第一个最大值。\n3. 重复以上的步骤，每次比较次数-1，直到不需要比较\n\n![1541905327273](/assets/1541905327273.png)\n\n**示例：** 将数组 { 4,2,8,0,5,7,1,3,9 } 进行升序排序\n\n```C++\nint main() {\n\n\tint arr[9] = { 4,2,8,0,5,7,1,3,9 };\n\n\tfor (int i = 0; i < 9 - 1; i++)\n\t{\n\t\tfor (int j = 0; j < 9 - 1 - i; j++)\n\t\t{\n\t\t\tif (arr[j] > arr[j + 1])\n\t\t\t{\n\t\t\t\tint temp = arr[j];\n\t\t\t\tarr[j] = arr[j + 1];\n\t\t\t\tarr[j + 1] = temp;\n\t\t\t}\n\t\t}\n\t}\n\n\tfor (int i = 0; i < 9; i++)\n\t{\n\t\tcout << arr[i] << endl;\n\t}\n    \n\tsystem(\"pause\");\n\n\treturn 0;\n}\n```\n\n\n\n\n\n### 5.3 二维数组\n\n二维数组就是在一维数组上，多加一个维度。\n\n![1541905559138](/assets/1541905559138.png)\n\n#### 5.3.1 二维数组定义方式\n\n二维数组定义的四种方式：\n\n1. ` 数据类型  数组名[ 行数 ][ 列数 ]; `\n2. `数据类型  数组名[ 行数 ][ 列数 ] = { {数据1，数据2 } ，{数据3，数据4 } };`\n3. `数据类型  数组名[ 行数 ][ 列数 ] = { 数据1，数据2，数据3，数据4};`\n4. ` 数据类型  数组名[  ][ 列数 ] = { 数据1，数据2，数据3，数据4};`\n\n\n\n> 建议：以上4种定义方式，利用==第二种更加直观，提高代码的可读性==\n\n示例：\n\n```C++\nint main() {\n\n\t//方式1  \n\t//数组类型 数组名 [行数][列数]\n\tint arr[2][3];\n\tarr[0][0] = 1;\n\tarr[0][1] = 2;\n\tarr[0][2] = 3;\n\tarr[1][0] = 4;\n\tarr[1][1] = 5;\n\tarr[1][2] = 6;\n\n\tfor (int i = 0; i < 2; i++)\n\t{\n\t\tfor (int j = 0; j < 3; j++)\n\t\t{\n\t\t\tcout << arr[i][j] << \" \";\n\t\t}\n\t\tcout << endl;\n\t}\n\n\t//方式2 \n\t//数据类型 数组名[行数][列数] = { {数据1，数据2 } ，{数据3，数据4 } };\n\tint arr2[2][3] =\n\t{\n\t\t{1,2,3},\n\t\t{4,5,6}\n\t};\n\n\t//方式3\n\t//数据类型 数组名[行数][列数] = { 数据1，数据2 ,数据3，数据4  };\n\tint arr3[2][3] = { 1,2,3,4,5,6 }; \n\n\t//方式4 \n\t//数据类型 数组名[][列数] = { 数据1，数据2 ,数据3，数据4  };\n\tint arr4[][3] = { 1,2,3,4,5,6 };\n\t\n\tsystem(\"pause\");\n\n\treturn 0;\n}\n```\n\n\n\n> 总结：在定义二维数组时，如果初始化了数据，可以省略行数\n\n\n\n\n\n\n\n\n\n\n\n\n\n#### 5.3.2 二维数组数组名\n\n\n\n* 查看二维数组所占内存空间\n* 获取二维数组首地址\n\n\n\n\n\n**示例：**\n\n```C++\nint main() {\n\n\t//二维数组数组名\n\tint arr[2][3] =\n\t{\n\t\t{1,2,3},\n\t\t{4,5,6}\n\t};\n\n\tcout << \"二维数组大小： \" << sizeof(arr) << endl;\n\tcout << \"二维数组一行大小： \" << sizeof(arr[0]) << endl;\n\tcout << \"二维数组元素大小： \" << sizeof(arr[0][0]) << endl;\n\n\tcout << \"二维数组行数： \" << sizeof(arr) / sizeof(arr[0]) << endl;\n\tcout << \"二维数组列数： \" << sizeof(arr[0]) / sizeof(arr[0][0]) << endl;\n\n\t//地址\n\tcout << \"二维数组首地址：\" << arr << endl;\n\tcout << \"二维数组第一行地址：\" << arr[0] << endl;\n\tcout << \"二维数组第二行地址：\" << arr[1] << endl;\n\n\tcout << \"二维数组第一个元素地址：\" << &arr[0][0] << endl;\n\tcout << \"二维数组第二个元素地址：\" << &arr[0][1] << endl;\n\n\tsystem(\"pause\");\n\n\treturn 0;\n}\n```\n\n\n\n> 总结1：二维数组名就是这个数组的首地址\n\n> 总结2：对二维数组名进行sizeof时，可以获取整个二维数组占用的内存空间大小\n\n\n\n\n\n\n#### **5.3.3 二维数组应用案例**\n\n**考试成绩统计：**\n\n案例描述：有三名同学（张三，李四，王五），在一次考试中的成绩分别如下表，**请分别输出三名同学的总成绩**\n\n|      | 语文 | 数学 | 英语 |\n| ---- | ---- | ---- | ---- |\n| 张三 | 100  | 100  | 100  |\n| 李四 | 90   | 50   | 100  |\n| 王五 | 60   | 70   | 80   |\n\n\n\n\n\n**参考答案：**\n\n```C++\nint main() {\n\n\tint scores[3][3] =\n\t{\n\t\t{100,100,100},\n\t\t{90,50,100},\n\t\t{60,70,80},\n\t};\n\n\tstring names[3] = { \"张三\",\"李四\",\"王五\" };\n\n\tfor (int i = 0; i < 3; i++)\n\t{\n\t\tint sum = 0;\n\t\tfor (int j = 0; j < 3; j++)\n\t\t{\n\t\t\tsum += scores[i][j];\n\t\t}\n\t\tcout << names[i] << \"同学总成绩为： \" << sum << endl;\n\t}\n\n\tsystem(\"pause\");\n\n\treturn 0;\n}\n```\n","source":"_posts/五-数组.md","raw":"title: 五.数组\nauthor: 连思鑫\ntags:\n  - c++\n  - 数组\ncategories:\n  - ..\n  - C++\n  - C++基础教程\n  - ''\ndate: 2023-03-01 19:16:00\n---\n## 5 数组\n\n### 5.1 概述\n\n所谓数组，就是一个集合，里面存放了相同类型的数据元素\n\n\n\n**特点1：**数组中的每个==数据元素都是相同的数据类型==\n\n**特点2：**数组是由==连续的内存==位置组成的\n\n\n\n![1541748375356](/assets/1541748375356.png)\n\n\n\n### 5.2 一维数组\n\n#### 5.2.1 一维数组定义方式\n\n一维数组定义的三种方式：\n\n1. ` 数据类型  数组名[ 数组长度 ]; `\n2. `数据类型  数组名[ 数组长度 ] = { 值1，值2 ...};`\n3. `数据类型  数组名[ ] = { 值1，值2 ...};`\n\n\n\n示例\n\n```C++\nint main() {\n\n\t//定义方式1\n\t//数据类型 数组名[元素个数];\n\tint score[10];\n\n\t//利用下标赋值\n\tscore[0] = 100;\n\tscore[1] = 99;\n\tscore[2] = 85;\n\n\t//利用下标输出\n\tcout << score[0] << endl;\n\tcout << score[1] << endl;\n\tcout << score[2] << endl;\n\n\n\t//第二种定义方式\n\t//数据类型 数组名[元素个数] =  {值1，值2 ，值3 ...};\n\t//如果{}内不足10个数据，剩余数据用0补全\n\tint score2[10] = { 100, 90,80,70,60,50,40,30,20,10 };\n\t\n\t//逐个输出\n\t//cout << score2[0] << endl;\n\t//cout << score2[1] << endl;\n\n\t//一个一个输出太麻烦，因此可以利用循环进行输出\n\tfor (int i = 0; i < 10; i++)\n\t{\n\t\tcout << score2[i] << endl;\n\t}\n\n\t//定义方式3\n\t//数据类型 数组名[] =  {值1，值2 ，值3 ...};\n\tint score3[] = { 100,90,80,70,60,50,40,30,20,10 };\n\n\tfor (int i = 0; i < 10; i++)\n\t{\n\t\tcout << score3[i] << endl;\n\t}\n\n\tsystem(\"pause\");\n\n\treturn 0;\n}\n```\n\n\n> 总结1：数组名的命名规范与变量名命名规范一致，不要和变量重名\n\n> 总结2：数组中下标是从0开始索引\n\n\n\n#### 5.2.2 一维数组数组名\n\n一维数组名称的**用途**：\n\n1. 可以统计整个数组在内存中的长度\n2. 可以获取数组在内存中的首地址\n\n\n\n\n**示例：**\n\n```C++\nint main() {\n\n\t//数组名用途\n\t//1、可以获取整个数组占用内存空间大小\n\tint arr[10] = { 1,2,3,4,5,6,7,8,9,10 };\n\n\tcout << \"整个数组所占内存空间为： \" << sizeof(arr) << endl;\n\tcout << \"每个元素所占内存空间为： \" << sizeof(arr[0]) << endl;\n\tcout << \"数组的元素个数为： \" << sizeof(arr) / sizeof(arr[0]) << endl;\n\n\t//2、可以通过数组名获取到数组首地址\n\tcout << \"数组首地址为： \" << (int)arr << endl;\n\tcout << \"数组中第一个元素地址为： \" << (int)&arr[0] << endl;\n\tcout << \"数组中第二个元素地址为： \" << (int)&arr[1] << endl;\n\n\t//arr = 100; 错误，数组名是常量，因此不可以赋值\n\n\n\tsystem(\"pause\");\n\n\treturn 0;\n}\n```\n\n\n\n> 注意：数组名是常量，不可以赋值\n\n> 总结1：直接打印数组名，可以查看数组所占内存的首地址\n\n>总结2：对数组名进行sizeof，可以获取整个数组占内存空间的大小\n\n\n\n\n**练习案例1**：五只小猪称体重\n\n**案例描述：**\n\n在一个数组中记录了五只小猪的体重，如：int arr[5] = {300,350,200,400,250};\n\n找出并打印最重的小猪体重。\n\n代码实现\n```c++\n#include <iostream>\nusing namespace std;\n\nint main()\n{\n\tint arr[5] = { 300, 350, 200, 400, 250 };\n\tint heaviest = 0;\n\tfor (int i = 0; i < 5; i++)\n\t{\n\t\tif (arr[i] > heaviest)\n\t\t{\n\t\t\theaviest = arr[i];\n\t\t}\n\t}\n\tcout << \"最重的小猪体重为：\" << heaviest << endl;\n\n\tsystem(\"pause\");\n\treturn 0;\n}\n```\n\n\n\n\n**练习案例2：**数组元素逆置\n\n**案例描述：**请声明一个5个元素的数组，并且将元素逆置.\n\n(如原数组元素为：1,3,2,5,4;逆置后输出结果为:4,5,2,3,1);\n\n代码实现：\n\n```c++\n#include<iostream>\nusing namespace std;\nint main()\n{\n    int a[5] = { 1,2,3,5,4 };\n    int b[5];\n    for (int i = 0; i<=4; i++)\n    {\n        b[4 - i] = a[i];\n    }\n    for (int i= 0; i < 5; i++)\n    {\n        cout << b[i] << endl;\n    }\n    system(\"pause\");\n    return 0;\n}\n```\n\n\n\n\n#### 5.2.3 冒泡排序\n\n**作用：** 最常用的排序算法，对数组内元素进行排序\n\n1. 比较相邻的元素。如果第一个比第二个大，就交换他们两个。\n2. 对每一对相邻元素做同样的工作，执行完毕后，找到第一个最大值。\n3. 重复以上的步骤，每次比较次数-1，直到不需要比较\n\n![1541905327273](/assets/1541905327273.png)\n\n**示例：** 将数组 { 4,2,8,0,5,7,1,3,9 } 进行升序排序\n\n```C++\nint main() {\n\n\tint arr[9] = { 4,2,8,0,5,7,1,3,9 };\n\n\tfor (int i = 0; i < 9 - 1; i++)\n\t{\n\t\tfor (int j = 0; j < 9 - 1 - i; j++)\n\t\t{\n\t\t\tif (arr[j] > arr[j + 1])\n\t\t\t{\n\t\t\t\tint temp = arr[j];\n\t\t\t\tarr[j] = arr[j + 1];\n\t\t\t\tarr[j + 1] = temp;\n\t\t\t}\n\t\t}\n\t}\n\n\tfor (int i = 0; i < 9; i++)\n\t{\n\t\tcout << arr[i] << endl;\n\t}\n    \n\tsystem(\"pause\");\n\n\treturn 0;\n}\n```\n\n\n\n\n\n### 5.3 二维数组\n\n二维数组就是在一维数组上，多加一个维度。\n\n![1541905559138](/assets/1541905559138.png)\n\n#### 5.3.1 二维数组定义方式\n\n二维数组定义的四种方式：\n\n1. ` 数据类型  数组名[ 行数 ][ 列数 ]; `\n2. `数据类型  数组名[ 行数 ][ 列数 ] = { {数据1，数据2 } ，{数据3，数据4 } };`\n3. `数据类型  数组名[ 行数 ][ 列数 ] = { 数据1，数据2，数据3，数据4};`\n4. ` 数据类型  数组名[  ][ 列数 ] = { 数据1，数据2，数据3，数据4};`\n\n\n\n> 建议：以上4种定义方式，利用==第二种更加直观，提高代码的可读性==\n\n示例：\n\n```C++\nint main() {\n\n\t//方式1  \n\t//数组类型 数组名 [行数][列数]\n\tint arr[2][3];\n\tarr[0][0] = 1;\n\tarr[0][1] = 2;\n\tarr[0][2] = 3;\n\tarr[1][0] = 4;\n\tarr[1][1] = 5;\n\tarr[1][2] = 6;\n\n\tfor (int i = 0; i < 2; i++)\n\t{\n\t\tfor (int j = 0; j < 3; j++)\n\t\t{\n\t\t\tcout << arr[i][j] << \" \";\n\t\t}\n\t\tcout << endl;\n\t}\n\n\t//方式2 \n\t//数据类型 数组名[行数][列数] = { {数据1，数据2 } ，{数据3，数据4 } };\n\tint arr2[2][3] =\n\t{\n\t\t{1,2,3},\n\t\t{4,5,6}\n\t};\n\n\t//方式3\n\t//数据类型 数组名[行数][列数] = { 数据1，数据2 ,数据3，数据4  };\n\tint arr3[2][3] = { 1,2,3,4,5,6 }; \n\n\t//方式4 \n\t//数据类型 数组名[][列数] = { 数据1，数据2 ,数据3，数据4  };\n\tint arr4[][3] = { 1,2,3,4,5,6 };\n\t\n\tsystem(\"pause\");\n\n\treturn 0;\n}\n```\n\n\n\n> 总结：在定义二维数组时，如果初始化了数据，可以省略行数\n\n\n\n\n\n\n\n\n\n\n\n\n\n#### 5.3.2 二维数组数组名\n\n\n\n* 查看二维数组所占内存空间\n* 获取二维数组首地址\n\n\n\n\n\n**示例：**\n\n```C++\nint main() {\n\n\t//二维数组数组名\n\tint arr[2][3] =\n\t{\n\t\t{1,2,3},\n\t\t{4,5,6}\n\t};\n\n\tcout << \"二维数组大小： \" << sizeof(arr) << endl;\n\tcout << \"二维数组一行大小： \" << sizeof(arr[0]) << endl;\n\tcout << \"二维数组元素大小： \" << sizeof(arr[0][0]) << endl;\n\n\tcout << \"二维数组行数： \" << sizeof(arr) / sizeof(arr[0]) << endl;\n\tcout << \"二维数组列数： \" << sizeof(arr[0]) / sizeof(arr[0][0]) << endl;\n\n\t//地址\n\tcout << \"二维数组首地址：\" << arr << endl;\n\tcout << \"二维数组第一行地址：\" << arr[0] << endl;\n\tcout << \"二维数组第二行地址：\" << arr[1] << endl;\n\n\tcout << \"二维数组第一个元素地址：\" << &arr[0][0] << endl;\n\tcout << \"二维数组第二个元素地址：\" << &arr[0][1] << endl;\n\n\tsystem(\"pause\");\n\n\treturn 0;\n}\n```\n\n\n\n> 总结1：二维数组名就是这个数组的首地址\n\n> 总结2：对二维数组名进行sizeof时，可以获取整个二维数组占用的内存空间大小\n\n\n\n\n\n\n#### **5.3.3 二维数组应用案例**\n\n**考试成绩统计：**\n\n案例描述：有三名同学（张三，李四，王五），在一次考试中的成绩分别如下表，**请分别输出三名同学的总成绩**\n\n|      | 语文 | 数学 | 英语 |\n| ---- | ---- | ---- | ---- |\n| 张三 | 100  | 100  | 100  |\n| 李四 | 90   | 50   | 100  |\n| 王五 | 60   | 70   | 80   |\n\n\n\n\n\n**参考答案：**\n\n```C++\nint main() {\n\n\tint scores[3][3] =\n\t{\n\t\t{100,100,100},\n\t\t{90,50,100},\n\t\t{60,70,80},\n\t};\n\n\tstring names[3] = { \"张三\",\"李四\",\"王五\" };\n\n\tfor (int i = 0; i < 3; i++)\n\t{\n\t\tint sum = 0;\n\t\tfor (int j = 0; j < 3; j++)\n\t\t{\n\t\t\tsum += scores[i][j];\n\t\t}\n\t\tcout << names[i] << \"同学总成绩为： \" << sum << endl;\n\t}\n\n\tsystem(\"pause\");\n\n\treturn 0;\n}\n```\n","slug":"五-数组","published":1,"updated":"2023-03-01T12:02:20.596Z","_id":"clifr2v1x001x14uo1pfm7yaj","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"5-数组\"><a href=\"#5-数组\" class=\"headerlink\" title=\"5 数组\"></a>5 数组</h2><h3 id=\"5-1-概述\"><a href=\"#5-1-概述\" class=\"headerlink\" title=\"5.1 概述\"></a>5.1 概述</h3><p>所谓数组，就是一个集合，里面存放了相同类型的数据元素</p>\n<p><strong>特点1：</strong>数组中的每个==数据元素都是相同的数据类型==</p>\n<p><strong>特点2：</strong>数组是由==连续的内存==位置组成的</p>\n<p><img src=\"/assets/1541748375356.png\" alt=\"1541748375356\"></p>\n<h3 id=\"5-2-一维数组\"><a href=\"#5-2-一维数组\" class=\"headerlink\" title=\"5.2 一维数组\"></a>5.2 一维数组</h3><h4 id=\"5-2-1-一维数组定义方式\"><a href=\"#5-2-1-一维数组定义方式\" class=\"headerlink\" title=\"5.2.1 一维数组定义方式\"></a>5.2.1 一维数组定义方式</h4><p>一维数组定义的三种方式：</p>\n<ol>\n<li><code>数据类型  数组名[ 数组长度 ];</code></li>\n<li><code>数据类型  数组名[ 数组长度 ] = &#123; 值1，值2 ...&#125;;</code></li>\n<li><code>数据类型  数组名[ ] = &#123; 值1，值2 ...&#125;;</code></li>\n</ol>\n<p>示例</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//定义方式1</span></span><br><span class=\"line\">\t<span class=\"comment\">//数据类型 数组名[元素个数];</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> score[<span class=\"number\">10</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//利用下标赋值</span></span><br><span class=\"line\">\tscore[<span class=\"number\">0</span>] = <span class=\"number\">100</span>;</span><br><span class=\"line\">\tscore[<span class=\"number\">1</span>] = <span class=\"number\">99</span>;</span><br><span class=\"line\">\tscore[<span class=\"number\">2</span>] = <span class=\"number\">85</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//利用下标输出</span></span><br><span class=\"line\">\tcout &lt;&lt; score[<span class=\"number\">0</span>] &lt;&lt; endl;</span><br><span class=\"line\">\tcout &lt;&lt; score[<span class=\"number\">1</span>] &lt;&lt; endl;</span><br><span class=\"line\">\tcout &lt;&lt; score[<span class=\"number\">2</span>] &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//第二种定义方式</span></span><br><span class=\"line\">\t<span class=\"comment\">//数据类型 数组名[元素个数] =  &#123;值1，值2 ，值3 ...&#125;;</span></span><br><span class=\"line\">\t<span class=\"comment\">//如果&#123;&#125;内不足10个数据，剩余数据用0补全</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> score2[<span class=\"number\">10</span>] = &#123; <span class=\"number\">100</span>, <span class=\"number\">90</span>,<span class=\"number\">80</span>,<span class=\"number\">70</span>,<span class=\"number\">60</span>,<span class=\"number\">50</span>,<span class=\"number\">40</span>,<span class=\"number\">30</span>,<span class=\"number\">20</span>,<span class=\"number\">10</span> &#125;;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//逐个输出</span></span><br><span class=\"line\">\t<span class=\"comment\">//cout &lt;&lt; score2[0] &lt;&lt; endl;</span></span><br><span class=\"line\">\t<span class=\"comment\">//cout &lt;&lt; score2[1] &lt;&lt; endl;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//一个一个输出太麻烦，因此可以利用循环进行输出</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tcout &lt;&lt; score2[i] &lt;&lt; endl;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//定义方式3</span></span><br><span class=\"line\">\t<span class=\"comment\">//数据类型 数组名[] =  &#123;值1，值2 ，值3 ...&#125;;</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> score3[] = &#123; <span class=\"number\">100</span>,<span class=\"number\">90</span>,<span class=\"number\">80</span>,<span class=\"number\">70</span>,<span class=\"number\">60</span>,<span class=\"number\">50</span>,<span class=\"number\">40</span>,<span class=\"number\">30</span>,<span class=\"number\">20</span>,<span class=\"number\">10</span> &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tcout &lt;&lt; score3[i] &lt;&lt; endl;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">system</span>(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<blockquote>\n<p>总结1：数组名的命名规范与变量名命名规范一致，不要和变量重名</p>\n</blockquote>\n<blockquote>\n<p>总结2：数组中下标是从0开始索引</p>\n</blockquote>\n<h4 id=\"5-2-2-一维数组数组名\"><a href=\"#5-2-2-一维数组数组名\" class=\"headerlink\" title=\"5.2.2 一维数组数组名\"></a>5.2.2 一维数组数组名</h4><p>一维数组名称的<strong>用途</strong>：</p>\n<ol>\n<li>可以统计整个数组在内存中的长度</li>\n<li>可以获取数组在内存中的首地址</li>\n</ol>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//数组名用途</span></span><br><span class=\"line\">\t<span class=\"comment\">//1、可以获取整个数组占用内存空间大小</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> arr[<span class=\"number\">10</span>] = &#123; <span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">7</span>,<span class=\"number\">8</span>,<span class=\"number\">9</span>,<span class=\"number\">10</span> &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;整个数组所占内存空间为： &quot;</span> &lt;&lt; <span class=\"built_in\">sizeof</span>(arr) &lt;&lt; endl;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;每个元素所占内存空间为： &quot;</span> &lt;&lt; <span class=\"built_in\">sizeof</span>(arr[<span class=\"number\">0</span>]) &lt;&lt; endl;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;数组的元素个数为： &quot;</span> &lt;&lt; <span class=\"built_in\">sizeof</span>(arr) / <span class=\"built_in\">sizeof</span>(arr[<span class=\"number\">0</span>]) &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//2、可以通过数组名获取到数组首地址</span></span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;数组首地址为： &quot;</span> &lt;&lt; (<span class=\"type\">int</span>)arr &lt;&lt; endl;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;数组中第一个元素地址为： &quot;</span> &lt;&lt; (<span class=\"type\">int</span>)&amp;arr[<span class=\"number\">0</span>] &lt;&lt; endl;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;数组中第二个元素地址为： &quot;</span> &lt;&lt; (<span class=\"type\">int</span>)&amp;arr[<span class=\"number\">1</span>] &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//arr = 100; 错误，数组名是常量，因此不可以赋值</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">system</span>(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<blockquote>\n<p>注意：数组名是常量，不可以赋值</p>\n</blockquote>\n<blockquote>\n<p>总结1：直接打印数组名，可以查看数组所占内存的首地址</p>\n</blockquote>\n<blockquote>\n<p>总结2：对数组名进行sizeof，可以获取整个数组占内存空间的大小</p>\n</blockquote>\n<p><strong>练习案例1</strong>：五只小猪称体重</p>\n<p><strong>案例描述：</strong></p>\n<p>在一个数组中记录了五只小猪的体重，如：int arr[5] = {300,350,200,400,250};</p>\n<p>找出并打印最重的小猪体重。</p>\n<p>代码实现</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> arr[<span class=\"number\">5</span>] = &#123; <span class=\"number\">300</span>, <span class=\"number\">350</span>, <span class=\"number\">200</span>, <span class=\"number\">400</span>, <span class=\"number\">250</span> &#125;;</span><br><span class=\"line\">\t<span class=\"type\">int</span> heaviest = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (arr[i] &gt; heaviest)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\theaviest = arr[i];</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;最重的小猪体重为：&quot;</span> &lt;&lt; heaviest &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">system</span>(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n<p><strong>练习案例2：</strong>数组元素逆置</p>\n<p><strong>案例描述：</strong>请声明一个5个元素的数组，并且将元素逆置.</p>\n<p>(如原数组元素为：1,3,2,5,4;逆置后输出结果为:4,5,2,3,1);</p>\n<p>代码实现：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> a[<span class=\"number\">5</span>] = &#123; <span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">5</span>,<span class=\"number\">4</span> &#125;;</span><br><span class=\"line\">    <span class=\"type\">int</span> b[<span class=\"number\">5</span>];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i&lt;=<span class=\"number\">4</span>; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        b[<span class=\"number\">4</span> - i] = a[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i= <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cout &lt;&lt; b[i] &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">system</span>(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n<h4 id=\"5-2-3-冒泡排序\"><a href=\"#5-2-3-冒泡排序\" class=\"headerlink\" title=\"5.2.3 冒泡排序\"></a>5.2.3 冒泡排序</h4><p><strong>作用：</strong> 最常用的排序算法，对数组内元素进行排序</p>\n<ol>\n<li>比较相邻的元素。如果第一个比第二个大，就交换他们两个。</li>\n<li>对每一对相邻元素做同样的工作，执行完毕后，找到第一个最大值。</li>\n<li>重复以上的步骤，每次比较次数-1，直到不需要比较</li>\n</ol>\n<p><img src=\"/assets/1541905327273.png\" alt=\"1541905327273\"></p>\n<p><strong>示例：</strong> 将数组 { 4,2,8,0,5,7,1,3,9 } 进行升序排序</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"type\">int</span> arr[<span class=\"number\">9</span>] = &#123; <span class=\"number\">4</span>,<span class=\"number\">2</span>,<span class=\"number\">8</span>,<span class=\"number\">0</span>,<span class=\"number\">5</span>,<span class=\"number\">7</span>,<span class=\"number\">1</span>,<span class=\"number\">3</span>,<span class=\"number\">9</span> &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">9</span> - <span class=\"number\">1</span>; i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">0</span>; j &lt; <span class=\"number\">9</span> - <span class=\"number\">1</span> - i; j++)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (arr[j] &gt; arr[j + <span class=\"number\">1</span>])</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"type\">int</span> temp = arr[j];</span><br><span class=\"line\">\t\t\t\tarr[j] = arr[j + <span class=\"number\">1</span>];</span><br><span class=\"line\">\t\t\t\tarr[j + <span class=\"number\">1</span>] = temp;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">9</span>; i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tcout &lt;&lt; arr[i] &lt;&lt; endl;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">\t<span class=\"built_in\">system</span>(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h3 id=\"5-3-二维数组\"><a href=\"#5-3-二维数组\" class=\"headerlink\" title=\"5.3 二维数组\"></a>5.3 二维数组</h3><p>二维数组就是在一维数组上，多加一个维度。</p>\n<p><img src=\"/assets/1541905559138.png\" alt=\"1541905559138\"></p>\n<h4 id=\"5-3-1-二维数组定义方式\"><a href=\"#5-3-1-二维数组定义方式\" class=\"headerlink\" title=\"5.3.1 二维数组定义方式\"></a>5.3.1 二维数组定义方式</h4><p>二维数组定义的四种方式：</p>\n<ol>\n<li><code>数据类型  数组名[ 行数 ][ 列数 ];</code></li>\n<li><code>数据类型  数组名[ 行数 ][ 列数 ] = &#123; &#123;数据1，数据2 &#125; ，&#123;数据3，数据4 &#125; &#125;;</code></li>\n<li><code>数据类型  数组名[ 行数 ][ 列数 ] = &#123; 数据1，数据2，数据3，数据4&#125;;</code></li>\n<li><code> 数据类型  数组名[  ][ 列数 ] = &#123; 数据1，数据2，数据3，数据4&#125;;</code></li>\n</ol>\n<blockquote>\n<p>建议：以上4种定义方式，利用==第二种更加直观，提高代码的可读性==</p>\n</blockquote>\n<p>示例：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//方式1  </span></span><br><span class=\"line\">\t<span class=\"comment\">//数组类型 数组名 [行数][列数]</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> arr[<span class=\"number\">2</span>][<span class=\"number\">3</span>];</span><br><span class=\"line\">\tarr[<span class=\"number\">0</span>][<span class=\"number\">0</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">\tarr[<span class=\"number\">0</span>][<span class=\"number\">1</span>] = <span class=\"number\">2</span>;</span><br><span class=\"line\">\tarr[<span class=\"number\">0</span>][<span class=\"number\">2</span>] = <span class=\"number\">3</span>;</span><br><span class=\"line\">\tarr[<span class=\"number\">1</span>][<span class=\"number\">0</span>] = <span class=\"number\">4</span>;</span><br><span class=\"line\">\tarr[<span class=\"number\">1</span>][<span class=\"number\">1</span>] = <span class=\"number\">5</span>;</span><br><span class=\"line\">\tarr[<span class=\"number\">1</span>][<span class=\"number\">2</span>] = <span class=\"number\">6</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">2</span>; i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">0</span>; j &lt; <span class=\"number\">3</span>; j++)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tcout &lt;&lt; arr[i][j] &lt;&lt; <span class=\"string\">&quot; &quot;</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tcout &lt;&lt; endl;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//方式2 </span></span><br><span class=\"line\">\t<span class=\"comment\">//数据类型 数组名[行数][列数] = &#123; &#123;数据1，数据2 &#125; ，&#123;数据3，数据4 &#125; &#125;;</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> arr2[<span class=\"number\">2</span>][<span class=\"number\">3</span>] =</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t&#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>&#125;,</span><br><span class=\"line\">\t\t&#123;<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>&#125;</span><br><span class=\"line\">\t&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//方式3</span></span><br><span class=\"line\">\t<span class=\"comment\">//数据类型 数组名[行数][列数] = &#123; 数据1，数据2 ,数据3，数据4  &#125;;</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> arr3[<span class=\"number\">2</span>][<span class=\"number\">3</span>] = &#123; <span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span> &#125;; </span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//方式4 </span></span><br><span class=\"line\">\t<span class=\"comment\">//数据类型 数组名[][列数] = &#123; 数据1，数据2 ,数据3，数据4  &#125;;</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> arr4[][<span class=\"number\">3</span>] = &#123; <span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span> &#125;;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"built_in\">system</span>(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<blockquote>\n<p>总结：在定义二维数组时，如果初始化了数据，可以省略行数</p>\n</blockquote>\n<h4 id=\"5-3-2-二维数组数组名\"><a href=\"#5-3-2-二维数组数组名\" class=\"headerlink\" title=\"5.3.2 二维数组数组名\"></a>5.3.2 二维数组数组名</h4><ul>\n<li>查看二维数组所占内存空间</li>\n<li>获取二维数组首地址</li>\n</ul>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//二维数组数组名</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> arr[<span class=\"number\">2</span>][<span class=\"number\">3</span>] =</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t&#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>&#125;,</span><br><span class=\"line\">\t\t&#123;<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>&#125;</span><br><span class=\"line\">\t&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;二维数组大小： &quot;</span> &lt;&lt; <span class=\"built_in\">sizeof</span>(arr) &lt;&lt; endl;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;二维数组一行大小： &quot;</span> &lt;&lt; <span class=\"built_in\">sizeof</span>(arr[<span class=\"number\">0</span>]) &lt;&lt; endl;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;二维数组元素大小： &quot;</span> &lt;&lt; <span class=\"built_in\">sizeof</span>(arr[<span class=\"number\">0</span>][<span class=\"number\">0</span>]) &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;二维数组行数： &quot;</span> &lt;&lt; <span class=\"built_in\">sizeof</span>(arr) / <span class=\"built_in\">sizeof</span>(arr[<span class=\"number\">0</span>]) &lt;&lt; endl;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;二维数组列数： &quot;</span> &lt;&lt; <span class=\"built_in\">sizeof</span>(arr[<span class=\"number\">0</span>]) / <span class=\"built_in\">sizeof</span>(arr[<span class=\"number\">0</span>][<span class=\"number\">0</span>]) &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//地址</span></span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;二维数组首地址：&quot;</span> &lt;&lt; arr &lt;&lt; endl;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;二维数组第一行地址：&quot;</span> &lt;&lt; arr[<span class=\"number\">0</span>] &lt;&lt; endl;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;二维数组第二行地址：&quot;</span> &lt;&lt; arr[<span class=\"number\">1</span>] &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;二维数组第一个元素地址：&quot;</span> &lt;&lt; &amp;arr[<span class=\"number\">0</span>][<span class=\"number\">0</span>] &lt;&lt; endl;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;二维数组第二个元素地址：&quot;</span> &lt;&lt; &amp;arr[<span class=\"number\">0</span>][<span class=\"number\">1</span>] &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">system</span>(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<blockquote>\n<p>总结1：二维数组名就是这个数组的首地址</p>\n</blockquote>\n<blockquote>\n<p>总结2：对二维数组名进行sizeof时，可以获取整个二维数组占用的内存空间大小</p>\n</blockquote>\n<h4 id=\"5-3-3-二维数组应用案例\"><a href=\"#5-3-3-二维数组应用案例\" class=\"headerlink\" title=\"5.3.3 二维数组应用案例\"></a><strong>5.3.3 二维数组应用案例</strong></h4><p><strong>考试成绩统计：</strong></p>\n<p>案例描述：有三名同学（张三，李四，王五），在一次考试中的成绩分别如下表，<strong>请分别输出三名同学的总成绩</strong></p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>语文</th>\n<th>数学</th>\n<th>英语</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>张三</td>\n<td>100</td>\n<td>100</td>\n<td>100</td>\n</tr>\n<tr>\n<td>李四</td>\n<td>90</td>\n<td>50</td>\n<td>100</td>\n</tr>\n<tr>\n<td>王五</td>\n<td>60</td>\n<td>70</td>\n<td>80</td>\n</tr>\n</tbody></table>\n<p><strong>参考答案：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"type\">int</span> scores[<span class=\"number\">3</span>][<span class=\"number\">3</span>] =</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t&#123;<span class=\"number\">100</span>,<span class=\"number\">100</span>,<span class=\"number\">100</span>&#125;,</span><br><span class=\"line\">\t\t&#123;<span class=\"number\">90</span>,<span class=\"number\">50</span>,<span class=\"number\">100</span>&#125;,</span><br><span class=\"line\">\t\t&#123;<span class=\"number\">60</span>,<span class=\"number\">70</span>,<span class=\"number\">80</span>&#125;,</span><br><span class=\"line\">\t&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">\tstring names[<span class=\"number\">3</span>] = &#123; <span class=\"string\">&quot;张三&quot;</span>,<span class=\"string\">&quot;李四&quot;</span>,<span class=\"string\">&quot;王五&quot;</span> &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">3</span>; i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"type\">int</span> sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">0</span>; j &lt; <span class=\"number\">3</span>; j++)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tsum += scores[i][j];</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tcout &lt;&lt; names[i] &lt;&lt; <span class=\"string\">&quot;同学总成绩为： &quot;</span> &lt;&lt; sum &lt;&lt; endl;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">system</span>(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"5-数组\"><a href=\"#5-数组\" class=\"headerlink\" title=\"5 数组\"></a>5 数组</h2><h3 id=\"5-1-概述\"><a href=\"#5-1-概述\" class=\"headerlink\" title=\"5.1 概述\"></a>5.1 概述</h3><p>所谓数组，就是一个集合，里面存放了相同类型的数据元素</p>\n<p><strong>特点1：</strong>数组中的每个==数据元素都是相同的数据类型==</p>\n<p><strong>特点2：</strong>数组是由==连续的内存==位置组成的</p>\n<p><img src=\"/assets/1541748375356.png\" alt=\"1541748375356\"></p>\n<h3 id=\"5-2-一维数组\"><a href=\"#5-2-一维数组\" class=\"headerlink\" title=\"5.2 一维数组\"></a>5.2 一维数组</h3><h4 id=\"5-2-1-一维数组定义方式\"><a href=\"#5-2-1-一维数组定义方式\" class=\"headerlink\" title=\"5.2.1 一维数组定义方式\"></a>5.2.1 一维数组定义方式</h4><p>一维数组定义的三种方式：</p>\n<ol>\n<li><code>数据类型  数组名[ 数组长度 ];</code></li>\n<li><code>数据类型  数组名[ 数组长度 ] = &#123; 值1，值2 ...&#125;;</code></li>\n<li><code>数据类型  数组名[ ] = &#123; 值1，值2 ...&#125;;</code></li>\n</ol>\n<p>示例</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//定义方式1</span></span><br><span class=\"line\">\t<span class=\"comment\">//数据类型 数组名[元素个数];</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> score[<span class=\"number\">10</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//利用下标赋值</span></span><br><span class=\"line\">\tscore[<span class=\"number\">0</span>] = <span class=\"number\">100</span>;</span><br><span class=\"line\">\tscore[<span class=\"number\">1</span>] = <span class=\"number\">99</span>;</span><br><span class=\"line\">\tscore[<span class=\"number\">2</span>] = <span class=\"number\">85</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//利用下标输出</span></span><br><span class=\"line\">\tcout &lt;&lt; score[<span class=\"number\">0</span>] &lt;&lt; endl;</span><br><span class=\"line\">\tcout &lt;&lt; score[<span class=\"number\">1</span>] &lt;&lt; endl;</span><br><span class=\"line\">\tcout &lt;&lt; score[<span class=\"number\">2</span>] &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//第二种定义方式</span></span><br><span class=\"line\">\t<span class=\"comment\">//数据类型 数组名[元素个数] =  &#123;值1，值2 ，值3 ...&#125;;</span></span><br><span class=\"line\">\t<span class=\"comment\">//如果&#123;&#125;内不足10个数据，剩余数据用0补全</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> score2[<span class=\"number\">10</span>] = &#123; <span class=\"number\">100</span>, <span class=\"number\">90</span>,<span class=\"number\">80</span>,<span class=\"number\">70</span>,<span class=\"number\">60</span>,<span class=\"number\">50</span>,<span class=\"number\">40</span>,<span class=\"number\">30</span>,<span class=\"number\">20</span>,<span class=\"number\">10</span> &#125;;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//逐个输出</span></span><br><span class=\"line\">\t<span class=\"comment\">//cout &lt;&lt; score2[0] &lt;&lt; endl;</span></span><br><span class=\"line\">\t<span class=\"comment\">//cout &lt;&lt; score2[1] &lt;&lt; endl;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//一个一个输出太麻烦，因此可以利用循环进行输出</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tcout &lt;&lt; score2[i] &lt;&lt; endl;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//定义方式3</span></span><br><span class=\"line\">\t<span class=\"comment\">//数据类型 数组名[] =  &#123;值1，值2 ，值3 ...&#125;;</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> score3[] = &#123; <span class=\"number\">100</span>,<span class=\"number\">90</span>,<span class=\"number\">80</span>,<span class=\"number\">70</span>,<span class=\"number\">60</span>,<span class=\"number\">50</span>,<span class=\"number\">40</span>,<span class=\"number\">30</span>,<span class=\"number\">20</span>,<span class=\"number\">10</span> &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tcout &lt;&lt; score3[i] &lt;&lt; endl;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">system</span>(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<blockquote>\n<p>总结1：数组名的命名规范与变量名命名规范一致，不要和变量重名</p>\n</blockquote>\n<blockquote>\n<p>总结2：数组中下标是从0开始索引</p>\n</blockquote>\n<h4 id=\"5-2-2-一维数组数组名\"><a href=\"#5-2-2-一维数组数组名\" class=\"headerlink\" title=\"5.2.2 一维数组数组名\"></a>5.2.2 一维数组数组名</h4><p>一维数组名称的<strong>用途</strong>：</p>\n<ol>\n<li>可以统计整个数组在内存中的长度</li>\n<li>可以获取数组在内存中的首地址</li>\n</ol>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//数组名用途</span></span><br><span class=\"line\">\t<span class=\"comment\">//1、可以获取整个数组占用内存空间大小</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> arr[<span class=\"number\">10</span>] = &#123; <span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">7</span>,<span class=\"number\">8</span>,<span class=\"number\">9</span>,<span class=\"number\">10</span> &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;整个数组所占内存空间为： &quot;</span> &lt;&lt; <span class=\"built_in\">sizeof</span>(arr) &lt;&lt; endl;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;每个元素所占内存空间为： &quot;</span> &lt;&lt; <span class=\"built_in\">sizeof</span>(arr[<span class=\"number\">0</span>]) &lt;&lt; endl;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;数组的元素个数为： &quot;</span> &lt;&lt; <span class=\"built_in\">sizeof</span>(arr) / <span class=\"built_in\">sizeof</span>(arr[<span class=\"number\">0</span>]) &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//2、可以通过数组名获取到数组首地址</span></span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;数组首地址为： &quot;</span> &lt;&lt; (<span class=\"type\">int</span>)arr &lt;&lt; endl;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;数组中第一个元素地址为： &quot;</span> &lt;&lt; (<span class=\"type\">int</span>)&amp;arr[<span class=\"number\">0</span>] &lt;&lt; endl;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;数组中第二个元素地址为： &quot;</span> &lt;&lt; (<span class=\"type\">int</span>)&amp;arr[<span class=\"number\">1</span>] &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//arr = 100; 错误，数组名是常量，因此不可以赋值</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">system</span>(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<blockquote>\n<p>注意：数组名是常量，不可以赋值</p>\n</blockquote>\n<blockquote>\n<p>总结1：直接打印数组名，可以查看数组所占内存的首地址</p>\n</blockquote>\n<blockquote>\n<p>总结2：对数组名进行sizeof，可以获取整个数组占内存空间的大小</p>\n</blockquote>\n<p><strong>练习案例1</strong>：五只小猪称体重</p>\n<p><strong>案例描述：</strong></p>\n<p>在一个数组中记录了五只小猪的体重，如：int arr[5] = {300,350,200,400,250};</p>\n<p>找出并打印最重的小猪体重。</p>\n<p>代码实现</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> arr[<span class=\"number\">5</span>] = &#123; <span class=\"number\">300</span>, <span class=\"number\">350</span>, <span class=\"number\">200</span>, <span class=\"number\">400</span>, <span class=\"number\">250</span> &#125;;</span><br><span class=\"line\">\t<span class=\"type\">int</span> heaviest = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (arr[i] &gt; heaviest)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\theaviest = arr[i];</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;最重的小猪体重为：&quot;</span> &lt;&lt; heaviest &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">system</span>(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n<p><strong>练习案例2：</strong>数组元素逆置</p>\n<p><strong>案例描述：</strong>请声明一个5个元素的数组，并且将元素逆置.</p>\n<p>(如原数组元素为：1,3,2,5,4;逆置后输出结果为:4,5,2,3,1);</p>\n<p>代码实现：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> a[<span class=\"number\">5</span>] = &#123; <span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">5</span>,<span class=\"number\">4</span> &#125;;</span><br><span class=\"line\">    <span class=\"type\">int</span> b[<span class=\"number\">5</span>];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i&lt;=<span class=\"number\">4</span>; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        b[<span class=\"number\">4</span> - i] = a[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i= <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cout &lt;&lt; b[i] &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">system</span>(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n<h4 id=\"5-2-3-冒泡排序\"><a href=\"#5-2-3-冒泡排序\" class=\"headerlink\" title=\"5.2.3 冒泡排序\"></a>5.2.3 冒泡排序</h4><p><strong>作用：</strong> 最常用的排序算法，对数组内元素进行排序</p>\n<ol>\n<li>比较相邻的元素。如果第一个比第二个大，就交换他们两个。</li>\n<li>对每一对相邻元素做同样的工作，执行完毕后，找到第一个最大值。</li>\n<li>重复以上的步骤，每次比较次数-1，直到不需要比较</li>\n</ol>\n<p><img src=\"/assets/1541905327273.png\" alt=\"1541905327273\"></p>\n<p><strong>示例：</strong> 将数组 { 4,2,8,0,5,7,1,3,9 } 进行升序排序</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"type\">int</span> arr[<span class=\"number\">9</span>] = &#123; <span class=\"number\">4</span>,<span class=\"number\">2</span>,<span class=\"number\">8</span>,<span class=\"number\">0</span>,<span class=\"number\">5</span>,<span class=\"number\">7</span>,<span class=\"number\">1</span>,<span class=\"number\">3</span>,<span class=\"number\">9</span> &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">9</span> - <span class=\"number\">1</span>; i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">0</span>; j &lt; <span class=\"number\">9</span> - <span class=\"number\">1</span> - i; j++)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (arr[j] &gt; arr[j + <span class=\"number\">1</span>])</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"type\">int</span> temp = arr[j];</span><br><span class=\"line\">\t\t\t\tarr[j] = arr[j + <span class=\"number\">1</span>];</span><br><span class=\"line\">\t\t\t\tarr[j + <span class=\"number\">1</span>] = temp;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">9</span>; i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tcout &lt;&lt; arr[i] &lt;&lt; endl;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">\t<span class=\"built_in\">system</span>(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h3 id=\"5-3-二维数组\"><a href=\"#5-3-二维数组\" class=\"headerlink\" title=\"5.3 二维数组\"></a>5.3 二维数组</h3><p>二维数组就是在一维数组上，多加一个维度。</p>\n<p><img src=\"/assets/1541905559138.png\" alt=\"1541905559138\"></p>\n<h4 id=\"5-3-1-二维数组定义方式\"><a href=\"#5-3-1-二维数组定义方式\" class=\"headerlink\" title=\"5.3.1 二维数组定义方式\"></a>5.3.1 二维数组定义方式</h4><p>二维数组定义的四种方式：</p>\n<ol>\n<li><code>数据类型  数组名[ 行数 ][ 列数 ];</code></li>\n<li><code>数据类型  数组名[ 行数 ][ 列数 ] = &#123; &#123;数据1，数据2 &#125; ，&#123;数据3，数据4 &#125; &#125;;</code></li>\n<li><code>数据类型  数组名[ 行数 ][ 列数 ] = &#123; 数据1，数据2，数据3，数据4&#125;;</code></li>\n<li><code> 数据类型  数组名[  ][ 列数 ] = &#123; 数据1，数据2，数据3，数据4&#125;;</code></li>\n</ol>\n<blockquote>\n<p>建议：以上4种定义方式，利用==第二种更加直观，提高代码的可读性==</p>\n</blockquote>\n<p>示例：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//方式1  </span></span><br><span class=\"line\">\t<span class=\"comment\">//数组类型 数组名 [行数][列数]</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> arr[<span class=\"number\">2</span>][<span class=\"number\">3</span>];</span><br><span class=\"line\">\tarr[<span class=\"number\">0</span>][<span class=\"number\">0</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">\tarr[<span class=\"number\">0</span>][<span class=\"number\">1</span>] = <span class=\"number\">2</span>;</span><br><span class=\"line\">\tarr[<span class=\"number\">0</span>][<span class=\"number\">2</span>] = <span class=\"number\">3</span>;</span><br><span class=\"line\">\tarr[<span class=\"number\">1</span>][<span class=\"number\">0</span>] = <span class=\"number\">4</span>;</span><br><span class=\"line\">\tarr[<span class=\"number\">1</span>][<span class=\"number\">1</span>] = <span class=\"number\">5</span>;</span><br><span class=\"line\">\tarr[<span class=\"number\">1</span>][<span class=\"number\">2</span>] = <span class=\"number\">6</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">2</span>; i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">0</span>; j &lt; <span class=\"number\">3</span>; j++)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tcout &lt;&lt; arr[i][j] &lt;&lt; <span class=\"string\">&quot; &quot;</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tcout &lt;&lt; endl;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//方式2 </span></span><br><span class=\"line\">\t<span class=\"comment\">//数据类型 数组名[行数][列数] = &#123; &#123;数据1，数据2 &#125; ，&#123;数据3，数据4 &#125; &#125;;</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> arr2[<span class=\"number\">2</span>][<span class=\"number\">3</span>] =</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t&#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>&#125;,</span><br><span class=\"line\">\t\t&#123;<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>&#125;</span><br><span class=\"line\">\t&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//方式3</span></span><br><span class=\"line\">\t<span class=\"comment\">//数据类型 数组名[行数][列数] = &#123; 数据1，数据2 ,数据3，数据4  &#125;;</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> arr3[<span class=\"number\">2</span>][<span class=\"number\">3</span>] = &#123; <span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span> &#125;; </span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//方式4 </span></span><br><span class=\"line\">\t<span class=\"comment\">//数据类型 数组名[][列数] = &#123; 数据1，数据2 ,数据3，数据4  &#125;;</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> arr4[][<span class=\"number\">3</span>] = &#123; <span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span> &#125;;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"built_in\">system</span>(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<blockquote>\n<p>总结：在定义二维数组时，如果初始化了数据，可以省略行数</p>\n</blockquote>\n<h4 id=\"5-3-2-二维数组数组名\"><a href=\"#5-3-2-二维数组数组名\" class=\"headerlink\" title=\"5.3.2 二维数组数组名\"></a>5.3.2 二维数组数组名</h4><ul>\n<li>查看二维数组所占内存空间</li>\n<li>获取二维数组首地址</li>\n</ul>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//二维数组数组名</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> arr[<span class=\"number\">2</span>][<span class=\"number\">3</span>] =</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t&#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>&#125;,</span><br><span class=\"line\">\t\t&#123;<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>&#125;</span><br><span class=\"line\">\t&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;二维数组大小： &quot;</span> &lt;&lt; <span class=\"built_in\">sizeof</span>(arr) &lt;&lt; endl;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;二维数组一行大小： &quot;</span> &lt;&lt; <span class=\"built_in\">sizeof</span>(arr[<span class=\"number\">0</span>]) &lt;&lt; endl;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;二维数组元素大小： &quot;</span> &lt;&lt; <span class=\"built_in\">sizeof</span>(arr[<span class=\"number\">0</span>][<span class=\"number\">0</span>]) &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;二维数组行数： &quot;</span> &lt;&lt; <span class=\"built_in\">sizeof</span>(arr) / <span class=\"built_in\">sizeof</span>(arr[<span class=\"number\">0</span>]) &lt;&lt; endl;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;二维数组列数： &quot;</span> &lt;&lt; <span class=\"built_in\">sizeof</span>(arr[<span class=\"number\">0</span>]) / <span class=\"built_in\">sizeof</span>(arr[<span class=\"number\">0</span>][<span class=\"number\">0</span>]) &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//地址</span></span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;二维数组首地址：&quot;</span> &lt;&lt; arr &lt;&lt; endl;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;二维数组第一行地址：&quot;</span> &lt;&lt; arr[<span class=\"number\">0</span>] &lt;&lt; endl;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;二维数组第二行地址：&quot;</span> &lt;&lt; arr[<span class=\"number\">1</span>] &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;二维数组第一个元素地址：&quot;</span> &lt;&lt; &amp;arr[<span class=\"number\">0</span>][<span class=\"number\">0</span>] &lt;&lt; endl;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;二维数组第二个元素地址：&quot;</span> &lt;&lt; &amp;arr[<span class=\"number\">0</span>][<span class=\"number\">1</span>] &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">system</span>(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<blockquote>\n<p>总结1：二维数组名就是这个数组的首地址</p>\n</blockquote>\n<blockquote>\n<p>总结2：对二维数组名进行sizeof时，可以获取整个二维数组占用的内存空间大小</p>\n</blockquote>\n<h4 id=\"5-3-3-二维数组应用案例\"><a href=\"#5-3-3-二维数组应用案例\" class=\"headerlink\" title=\"5.3.3 二维数组应用案例\"></a><strong>5.3.3 二维数组应用案例</strong></h4><p><strong>考试成绩统计：</strong></p>\n<p>案例描述：有三名同学（张三，李四，王五），在一次考试中的成绩分别如下表，<strong>请分别输出三名同学的总成绩</strong></p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>语文</th>\n<th>数学</th>\n<th>英语</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>张三</td>\n<td>100</td>\n<td>100</td>\n<td>100</td>\n</tr>\n<tr>\n<td>李四</td>\n<td>90</td>\n<td>50</td>\n<td>100</td>\n</tr>\n<tr>\n<td>王五</td>\n<td>60</td>\n<td>70</td>\n<td>80</td>\n</tr>\n</tbody></table>\n<p><strong>参考答案：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"type\">int</span> scores[<span class=\"number\">3</span>][<span class=\"number\">3</span>] =</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t&#123;<span class=\"number\">100</span>,<span class=\"number\">100</span>,<span class=\"number\">100</span>&#125;,</span><br><span class=\"line\">\t\t&#123;<span class=\"number\">90</span>,<span class=\"number\">50</span>,<span class=\"number\">100</span>&#125;,</span><br><span class=\"line\">\t\t&#123;<span class=\"number\">60</span>,<span class=\"number\">70</span>,<span class=\"number\">80</span>&#125;,</span><br><span class=\"line\">\t&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">\tstring names[<span class=\"number\">3</span>] = &#123; <span class=\"string\">&quot;张三&quot;</span>,<span class=\"string\">&quot;李四&quot;</span>,<span class=\"string\">&quot;王五&quot;</span> &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">3</span>; i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"type\">int</span> sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">0</span>; j &lt; <span class=\"number\">3</span>; j++)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tsum += scores[i][j];</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tcout &lt;&lt; names[i] &lt;&lt; <span class=\"string\">&quot;同学总成绩为： &quot;</span> &lt;&lt; sum &lt;&lt; endl;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">system</span>(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"八.结构体","author":"连思鑫","date":"2023-03-01T11:33:00.000Z","_content":"## 8 结构体\n\n### 8.1 结构体基本概念\n\n结构体属于用户==自定义的数据类型==，允许用户存储不同的数据类型\n\n\n### 8.2 结构体定义和使用\n\n**语法：**`struct 结构体名 { 结构体成员列表 }；`\n\n通过结构体创建变量的方式有三种：\n\n* struct 结构体名 变量名\n* struct 结构体名 变量名 = { 成员1值 ， 成员2值...}\n* 定义结构体时顺便创建变量\n\n**示例：**\n\n```C++\n//结构体定义\nstruct student\n{\n\t//成员列表\n\tstring name;  //姓名\n\tint age;      //年龄\n\tint score;    //分数\n}stu3; //结构体变量创建方式3 \n\n\nint main() {\n\n\t//结构体变量创建方式1\n\tstruct student stu1; //struct 关键字可以省略\n\n\tstu1.name = \"张三\";\n\tstu1.age = 18;\n\tstu1.score = 100;\n\t\n\tcout << \"姓名：\" << stu1.name << \" 年龄：\" << stu1.age  << \" 分数：\" << stu1.score << endl;\n\n\t//结构体变量创建方式2\n\tstruct student stu2 = { \"李四\",19,60 };\n\n\tcout << \"姓名：\" << stu2.name << \" 年龄：\" << stu2.age  << \" 分数：\" << stu2.score << endl;\n\n\n\tstu3.name = \"王五\";\n\tstu3.age = 18;\n\tstu3.score = 80;\n\t\n\n\tcout << \"姓名：\" << stu3.name << \" 年龄：\" << stu3.age  << \" 分数：\" << stu3.score << endl;\n\n\tsystem(\"pause\");\n\n\treturn 0;\n}\n```\n\n\n\n> 总结1：定义结构体时的关键字是struct，不可省略\n\n> 总结2：创建结构体变量时，关键字struct可以省略\n\n> 总结3：结构体变量利用操作符 ''.''  访问成员\n\n\n\n\n### 8.3 结构体数组\n\n**作用：**将自定义的结构体放入到数组中方便维护\n\n**语法：**` struct  结构体名 数组名[元素个数] = {  {} , {} , ... {} }`\n\n**示例：**\n\n```C++\n//结构体定义\nstruct student\n{\n\t//成员列表\n\tstring name;  //姓名\n\tint age;      //年龄\n\tint score;    //分数\n}\n\nint main() {\n\t\n\t//结构体数组\n\tstruct student arr[3]=\n\t{\n\t\t{\"张三\",18,80 },\n\t\t{\"李四\",19,60 },\n\t\t{\"王五\",20,70 }\n\t};\n\n\tfor (int i = 0; i < 3; i++)\n\t{\n\t\tcout << \"姓名：\" << arr[i].name << \" 年龄：\" << arr[i].age << \" 分数：\" << arr[i].score << endl;\n\t}\n\n\tsystem(\"pause\");\n\n\treturn 0;\n}\n```\n\n\n\n### 8.4 结构体指针\n\n**作用：**通过指针访问结构体中的成员\n\n\n\n* 利用操作符 `-> `可以通过结构体指针访问结构体属性\n\n\n\n**示例：**\n\n```C++\n//结构体定义\nstruct student\n{\n\t//成员列表\n\tstring name;  //姓名\n\tint age;      //年龄\n\tint score;    //分数\n};\n\n\nint main() {\n\t\n\tstruct student stu = { \"张三\",18,100, };\n\t\n\tstruct student * p = &stu;\n\t\n\tp->score = 80; //指针通过 -> 操作符可以访问成员\n\n\tcout << \"姓名：\" << p->name << \" 年龄：\" << p->age << \" 分数：\" << p->score << endl;\n\t\n\tsystem(\"pause\");\n\n\treturn 0;\n}\n```\n\n\n> 总结：结构体指针可以通过 -> 操作符 来访问结构体中的成员\n\n\n\n\n\n### 8.5 结构体嵌套结构体\n\n**作用：** 结构体中的成员可以是另一个结构体\n\n**例如：**每个老师辅导一个学员，一个老师的结构体中，记录一个学生的结构体\n\n**示例：**\n\n```C++\n//学生结构体定义\nstruct student\n{\n\t//成员列表\n\tstring name;  //姓名\n\tint age;      //年龄\n\tint score;    //分数\n};\n\n//教师结构体定义\nstruct teacher\n{\n    //成员列表\n\tint id; //职工编号\n\tstring name;  //教师姓名\n\tint age;   //教师年龄\n\tstruct student stu; //子结构体 学生\n};\n\n\nint main() {\n\n\tstruct teacher t1;\n\tt1.id = 10000;\n\tt1.name = \"老王\";\n\tt1.age = 40;\n\n\tt1.stu.name = \"张三\";\n\tt1.stu.age = 18;\n\tt1.stu.score = 100;\n\n\tcout << \"教师 职工编号： \" << t1.id << \" 姓名： \" << t1.name << \" 年龄： \" << t1.age << endl;\n\t\n\tcout << \"辅导学员 姓名： \" << t1.stu.name << \" 年龄：\" << t1.stu.age << \" 考试分数： \" << t1.stu.score << endl;\n\n\tsystem(\"pause\");\n\n\treturn 0;\n}\n```\n\n\n\n**总结：**在结构体中可以定义另一个结构体作为成员，用来解决实际问题\n\n\n\n\n\n### 8.6 结构体做函数参数 \n\n**作用：**将结构体作为参数向函数中传递\n\n传递方式有两种：\n\n* 值传递\n* 地址传递\n\n**示例：**\n\n```C++\n//学生结构体定义\nstruct student\n{\n\t//成员列表\n\tstring name;  //姓名\n\tint age;      //年龄\n\tint score;    //分数\n};\n\n//值传递\nvoid printStudent(student stu )\n{\n\tstu.age = 28;\n\tcout << \"子函数中 姓名：\" << stu.name << \" 年龄： \" << stu.age  << \" 分数：\" << stu.score << endl;\n}\n\n//地址传递\nvoid printStudent2(student *stu)\n{\n\tstu->age = 28;\n\tcout << \"子函数中 姓名：\" << stu->name << \" 年龄： \" << stu->age  << \" 分数：\" << stu->score << endl;\n}\n\nint main() {\n\n\tstudent stu = { \"张三\",18,100};\n\t//值传递\n\tprintStudent(stu);\n\tcout << \"主函数中 姓名：\" << stu.name << \" 年龄： \" << stu.age << \" 分数：\" << stu.score << endl;\n\n\tcout << endl;\n\n\t//地址传递\n\tprintStudent2(&stu);\n\tcout << \"主函数中 姓名：\" << stu.name << \" 年龄： \" << stu.age  << \" 分数：\" << stu.score << endl;\n\n\tsystem(\"pause\");\n\n\treturn 0;\n}\n```\n\n> 总结：如果不想修改主函数中的数据，用值传递，反之用地址传递\n\n\n\n\n### 8.7 结构体中 const使用场景\n\n**作用：**用const来防止误操作\n\n**示例：**\n\n```C++\n//学生结构体定义\nstruct student\n{\n\t//成员列表\n\tstring name;  //姓名\n\tint age;      //年龄\n\tint score;    //分数\n};\n\n//const使用场景\nvoid printStudent(const student *stu) //加const防止函数体中的误操作\n{\n\t//stu->age = 100; //操作失败，因为加了const修饰\n\tcout << \"姓名：\" << stu->name << \" 年龄：\" << stu->age << \" 分数：\" << stu->score << endl;\n\n}\n\nint main() {\n\n\tstudent stu = { \"张三\",18,100 };\n\n\tprintStudent(&stu);\n\n\tsystem(\"pause\");\n\n\treturn 0;\n}\n```\n\n\n\n### 8.8 结构体案例\n\n#### 8.8.1 案例1\n\n**案例描述：**\n\n学校正在做毕设项目，每名老师带领5个学生，总共有3名老师，需求如下\n\n设计学生和老师的结构体，其中在老师的结构体中，有老师姓名和一个存放5名学生的数组作为成员\n\n学生的成员有姓名、考试分数，创建数组存放3名老师，通过函数给每个老师及所带的学生赋值\n\n最终打印出老师数据以及老师所带的学生数据。\n\n\n\n**示例：**\n\n```C++\nstruct Student\n{\n\tstring name;\n\tint score;\n};\nstruct Teacher\n{\n\tstring name;\n\tStudent sArray[5];\n};\n\nvoid allocateSpace(Teacher tArray[] , int len)\n{\n\tstring tName = \"教师\";\n\tstring sName = \"学生\";\n\tstring nameSeed = \"ABCDE\";\n\tfor (int i = 0; i < len; i++)\n\t{\n\t\ttArray[i].name = tName + nameSeed[i];\n\t\t\n\t\tfor (int j = 0; j < 5; j++)\n\t\t{\n\t\t\ttArray[i].sArray[j].name = sName + nameSeed[j];\n\t\t\ttArray[i].sArray[j].score = rand() % 61 + 40;\n\t\t}\n\t}\n}\n\nvoid printTeachers(Teacher tArray[], int len)\n{\n\tfor (int i = 0; i < len; i++)\n\t{\n\t\tcout << tArray[i].name << endl;\n\t\tfor (int j = 0; j < 5; j++)\n\t\t{\n\t\t\tcout << \"\\t姓名：\" << tArray[i].sArray[j].name << \" 分数：\" << tArray[i].sArray[j].score << endl;\n\t\t}\n\t}\n}\n\nint main() {\n\n\tsrand((unsigned int)time(NULL)); //随机数种子 头文件 #include <ctime>\n\n\tTeacher tArray[3]; //老师数组\n\n\tint len = sizeof(tArray) / sizeof(Teacher);\n\n\tallocateSpace(tArray, len); //创建数据\n\n\tprintTeachers(tArray, len); //打印数据\n\t\n\tsystem(\"pause\");\n\n\treturn 0;\n}\n```\n\n\n\n\n#### 8.8.2 案例2\n\n**案例描述：**\n\n设计一个英雄的结构体，包括成员姓名，年龄，性别;创建结构体数组，数组中存放5名英雄。\n\n通过冒泡排序的算法，将数组中的英雄按照年龄进行升序排序，最终打印排序后的结果。\n\n\n\n五名英雄信息如下：\n\n```C++\n\t\t{\"刘备\",23,\"男\"},\n\t\t{\"关羽\",22,\"男\"},\n\t\t{\"张飞\",20,\"男\"},\n\t\t{\"赵云\",21,\"男\"},\n\t\t{\"貂蝉\",19,\"女\"},\n```\n\n\n\n\n**示例：**\n\n```C++\n//英雄结构体\nstruct hero\n{\n\tstring name;\n\tint age;\n\tstring sex;\n};\n//冒泡排序\nvoid bubbleSort(hero arr[] , int len)\n{\n\tfor (int i = 0; i < len - 1; i++)\n\t{\n\t\tfor (int j = 0; j < len - 1 - i; j++)\n\t\t{\n\t\t\tif (arr[j].age > arr[j + 1].age)\n\t\t\t{\n\t\t\t\thero temp = arr[j];\n\t\t\t\tarr[j] = arr[j + 1];\n\t\t\t\tarr[j + 1] = temp;\n\t\t\t}\n\t\t}\n\t}\n}\n//打印数组\nvoid printHeros(hero arr[], int len)\n{\n\tfor (int i = 0; i < len; i++)\n\t{\n\t\tcout << \"姓名： \" << arr[i].name << \" 性别： \" << arr[i].sex << \" 年龄： \" << arr[i].age << endl;\n\t}\n}\n\nint main() {\n\n\tstruct hero arr[5] =\n\t{\n\t\t{\"刘备\",23,\"男\"},\n\t\t{\"关羽\",22,\"男\"},\n\t\t{\"张飞\",20,\"男\"},\n\t\t{\"赵云\",21,\"男\"},\n\t\t{\"貂蝉\",19,\"女\"},\n\t};\n\n\tint len = sizeof(arr) / sizeof(hero); //获取数组元素个数\n\n\tbubbleSort(arr, len); //排序\n\n\tprintHeros(arr, len); //打印\n\n\tsystem(\"pause\");\n\n\treturn 0;\n}\n```\n\n\n\n## **C++基础篇结束**","source":"_posts/八-结构体.md","raw":"title: 八.结构体\nauthor: 连思鑫\ntags:\n  - c++\n  - 结构体\ncategories:\n  - ..\n  - C++\n  - C++基础教程\n  - ''\ndate: 2023-03-01 19:33:00\n---\n## 8 结构体\n\n### 8.1 结构体基本概念\n\n结构体属于用户==自定义的数据类型==，允许用户存储不同的数据类型\n\n\n### 8.2 结构体定义和使用\n\n**语法：**`struct 结构体名 { 结构体成员列表 }；`\n\n通过结构体创建变量的方式有三种：\n\n* struct 结构体名 变量名\n* struct 结构体名 变量名 = { 成员1值 ， 成员2值...}\n* 定义结构体时顺便创建变量\n\n**示例：**\n\n```C++\n//结构体定义\nstruct student\n{\n\t//成员列表\n\tstring name;  //姓名\n\tint age;      //年龄\n\tint score;    //分数\n}stu3; //结构体变量创建方式3 \n\n\nint main() {\n\n\t//结构体变量创建方式1\n\tstruct student stu1; //struct 关键字可以省略\n\n\tstu1.name = \"张三\";\n\tstu1.age = 18;\n\tstu1.score = 100;\n\t\n\tcout << \"姓名：\" << stu1.name << \" 年龄：\" << stu1.age  << \" 分数：\" << stu1.score << endl;\n\n\t//结构体变量创建方式2\n\tstruct student stu2 = { \"李四\",19,60 };\n\n\tcout << \"姓名：\" << stu2.name << \" 年龄：\" << stu2.age  << \" 分数：\" << stu2.score << endl;\n\n\n\tstu3.name = \"王五\";\n\tstu3.age = 18;\n\tstu3.score = 80;\n\t\n\n\tcout << \"姓名：\" << stu3.name << \" 年龄：\" << stu3.age  << \" 分数：\" << stu3.score << endl;\n\n\tsystem(\"pause\");\n\n\treturn 0;\n}\n```\n\n\n\n> 总结1：定义结构体时的关键字是struct，不可省略\n\n> 总结2：创建结构体变量时，关键字struct可以省略\n\n> 总结3：结构体变量利用操作符 ''.''  访问成员\n\n\n\n\n### 8.3 结构体数组\n\n**作用：**将自定义的结构体放入到数组中方便维护\n\n**语法：**` struct  结构体名 数组名[元素个数] = {  {} , {} , ... {} }`\n\n**示例：**\n\n```C++\n//结构体定义\nstruct student\n{\n\t//成员列表\n\tstring name;  //姓名\n\tint age;      //年龄\n\tint score;    //分数\n}\n\nint main() {\n\t\n\t//结构体数组\n\tstruct student arr[3]=\n\t{\n\t\t{\"张三\",18,80 },\n\t\t{\"李四\",19,60 },\n\t\t{\"王五\",20,70 }\n\t};\n\n\tfor (int i = 0; i < 3; i++)\n\t{\n\t\tcout << \"姓名：\" << arr[i].name << \" 年龄：\" << arr[i].age << \" 分数：\" << arr[i].score << endl;\n\t}\n\n\tsystem(\"pause\");\n\n\treturn 0;\n}\n```\n\n\n\n### 8.4 结构体指针\n\n**作用：**通过指针访问结构体中的成员\n\n\n\n* 利用操作符 `-> `可以通过结构体指针访问结构体属性\n\n\n\n**示例：**\n\n```C++\n//结构体定义\nstruct student\n{\n\t//成员列表\n\tstring name;  //姓名\n\tint age;      //年龄\n\tint score;    //分数\n};\n\n\nint main() {\n\t\n\tstruct student stu = { \"张三\",18,100, };\n\t\n\tstruct student * p = &stu;\n\t\n\tp->score = 80; //指针通过 -> 操作符可以访问成员\n\n\tcout << \"姓名：\" << p->name << \" 年龄：\" << p->age << \" 分数：\" << p->score << endl;\n\t\n\tsystem(\"pause\");\n\n\treturn 0;\n}\n```\n\n\n> 总结：结构体指针可以通过 -> 操作符 来访问结构体中的成员\n\n\n\n\n\n### 8.5 结构体嵌套结构体\n\n**作用：** 结构体中的成员可以是另一个结构体\n\n**例如：**每个老师辅导一个学员，一个老师的结构体中，记录一个学生的结构体\n\n**示例：**\n\n```C++\n//学生结构体定义\nstruct student\n{\n\t//成员列表\n\tstring name;  //姓名\n\tint age;      //年龄\n\tint score;    //分数\n};\n\n//教师结构体定义\nstruct teacher\n{\n    //成员列表\n\tint id; //职工编号\n\tstring name;  //教师姓名\n\tint age;   //教师年龄\n\tstruct student stu; //子结构体 学生\n};\n\n\nint main() {\n\n\tstruct teacher t1;\n\tt1.id = 10000;\n\tt1.name = \"老王\";\n\tt1.age = 40;\n\n\tt1.stu.name = \"张三\";\n\tt1.stu.age = 18;\n\tt1.stu.score = 100;\n\n\tcout << \"教师 职工编号： \" << t1.id << \" 姓名： \" << t1.name << \" 年龄： \" << t1.age << endl;\n\t\n\tcout << \"辅导学员 姓名： \" << t1.stu.name << \" 年龄：\" << t1.stu.age << \" 考试分数： \" << t1.stu.score << endl;\n\n\tsystem(\"pause\");\n\n\treturn 0;\n}\n```\n\n\n\n**总结：**在结构体中可以定义另一个结构体作为成员，用来解决实际问题\n\n\n\n\n\n### 8.6 结构体做函数参数 \n\n**作用：**将结构体作为参数向函数中传递\n\n传递方式有两种：\n\n* 值传递\n* 地址传递\n\n**示例：**\n\n```C++\n//学生结构体定义\nstruct student\n{\n\t//成员列表\n\tstring name;  //姓名\n\tint age;      //年龄\n\tint score;    //分数\n};\n\n//值传递\nvoid printStudent(student stu )\n{\n\tstu.age = 28;\n\tcout << \"子函数中 姓名：\" << stu.name << \" 年龄： \" << stu.age  << \" 分数：\" << stu.score << endl;\n}\n\n//地址传递\nvoid printStudent2(student *stu)\n{\n\tstu->age = 28;\n\tcout << \"子函数中 姓名：\" << stu->name << \" 年龄： \" << stu->age  << \" 分数：\" << stu->score << endl;\n}\n\nint main() {\n\n\tstudent stu = { \"张三\",18,100};\n\t//值传递\n\tprintStudent(stu);\n\tcout << \"主函数中 姓名：\" << stu.name << \" 年龄： \" << stu.age << \" 分数：\" << stu.score << endl;\n\n\tcout << endl;\n\n\t//地址传递\n\tprintStudent2(&stu);\n\tcout << \"主函数中 姓名：\" << stu.name << \" 年龄： \" << stu.age  << \" 分数：\" << stu.score << endl;\n\n\tsystem(\"pause\");\n\n\treturn 0;\n}\n```\n\n> 总结：如果不想修改主函数中的数据，用值传递，反之用地址传递\n\n\n\n\n### 8.7 结构体中 const使用场景\n\n**作用：**用const来防止误操作\n\n**示例：**\n\n```C++\n//学生结构体定义\nstruct student\n{\n\t//成员列表\n\tstring name;  //姓名\n\tint age;      //年龄\n\tint score;    //分数\n};\n\n//const使用场景\nvoid printStudent(const student *stu) //加const防止函数体中的误操作\n{\n\t//stu->age = 100; //操作失败，因为加了const修饰\n\tcout << \"姓名：\" << stu->name << \" 年龄：\" << stu->age << \" 分数：\" << stu->score << endl;\n\n}\n\nint main() {\n\n\tstudent stu = { \"张三\",18,100 };\n\n\tprintStudent(&stu);\n\n\tsystem(\"pause\");\n\n\treturn 0;\n}\n```\n\n\n\n### 8.8 结构体案例\n\n#### 8.8.1 案例1\n\n**案例描述：**\n\n学校正在做毕设项目，每名老师带领5个学生，总共有3名老师，需求如下\n\n设计学生和老师的结构体，其中在老师的结构体中，有老师姓名和一个存放5名学生的数组作为成员\n\n学生的成员有姓名、考试分数，创建数组存放3名老师，通过函数给每个老师及所带的学生赋值\n\n最终打印出老师数据以及老师所带的学生数据。\n\n\n\n**示例：**\n\n```C++\nstruct Student\n{\n\tstring name;\n\tint score;\n};\nstruct Teacher\n{\n\tstring name;\n\tStudent sArray[5];\n};\n\nvoid allocateSpace(Teacher tArray[] , int len)\n{\n\tstring tName = \"教师\";\n\tstring sName = \"学生\";\n\tstring nameSeed = \"ABCDE\";\n\tfor (int i = 0; i < len; i++)\n\t{\n\t\ttArray[i].name = tName + nameSeed[i];\n\t\t\n\t\tfor (int j = 0; j < 5; j++)\n\t\t{\n\t\t\ttArray[i].sArray[j].name = sName + nameSeed[j];\n\t\t\ttArray[i].sArray[j].score = rand() % 61 + 40;\n\t\t}\n\t}\n}\n\nvoid printTeachers(Teacher tArray[], int len)\n{\n\tfor (int i = 0; i < len; i++)\n\t{\n\t\tcout << tArray[i].name << endl;\n\t\tfor (int j = 0; j < 5; j++)\n\t\t{\n\t\t\tcout << \"\\t姓名：\" << tArray[i].sArray[j].name << \" 分数：\" << tArray[i].sArray[j].score << endl;\n\t\t}\n\t}\n}\n\nint main() {\n\n\tsrand((unsigned int)time(NULL)); //随机数种子 头文件 #include <ctime>\n\n\tTeacher tArray[3]; //老师数组\n\n\tint len = sizeof(tArray) / sizeof(Teacher);\n\n\tallocateSpace(tArray, len); //创建数据\n\n\tprintTeachers(tArray, len); //打印数据\n\t\n\tsystem(\"pause\");\n\n\treturn 0;\n}\n```\n\n\n\n\n#### 8.8.2 案例2\n\n**案例描述：**\n\n设计一个英雄的结构体，包括成员姓名，年龄，性别;创建结构体数组，数组中存放5名英雄。\n\n通过冒泡排序的算法，将数组中的英雄按照年龄进行升序排序，最终打印排序后的结果。\n\n\n\n五名英雄信息如下：\n\n```C++\n\t\t{\"刘备\",23,\"男\"},\n\t\t{\"关羽\",22,\"男\"},\n\t\t{\"张飞\",20,\"男\"},\n\t\t{\"赵云\",21,\"男\"},\n\t\t{\"貂蝉\",19,\"女\"},\n```\n\n\n\n\n**示例：**\n\n```C++\n//英雄结构体\nstruct hero\n{\n\tstring name;\n\tint age;\n\tstring sex;\n};\n//冒泡排序\nvoid bubbleSort(hero arr[] , int len)\n{\n\tfor (int i = 0; i < len - 1; i++)\n\t{\n\t\tfor (int j = 0; j < len - 1 - i; j++)\n\t\t{\n\t\t\tif (arr[j].age > arr[j + 1].age)\n\t\t\t{\n\t\t\t\thero temp = arr[j];\n\t\t\t\tarr[j] = arr[j + 1];\n\t\t\t\tarr[j + 1] = temp;\n\t\t\t}\n\t\t}\n\t}\n}\n//打印数组\nvoid printHeros(hero arr[], int len)\n{\n\tfor (int i = 0; i < len; i++)\n\t{\n\t\tcout << \"姓名： \" << arr[i].name << \" 性别： \" << arr[i].sex << \" 年龄： \" << arr[i].age << endl;\n\t}\n}\n\nint main() {\n\n\tstruct hero arr[5] =\n\t{\n\t\t{\"刘备\",23,\"男\"},\n\t\t{\"关羽\",22,\"男\"},\n\t\t{\"张飞\",20,\"男\"},\n\t\t{\"赵云\",21,\"男\"},\n\t\t{\"貂蝉\",19,\"女\"},\n\t};\n\n\tint len = sizeof(arr) / sizeof(hero); //获取数组元素个数\n\n\tbubbleSort(arr, len); //排序\n\n\tprintHeros(arr, len); //打印\n\n\tsystem(\"pause\");\n\n\treturn 0;\n}\n```\n\n\n\n## **C++基础篇结束**","slug":"八-结构体","published":1,"updated":"2023-03-01T12:03:11.589Z","_id":"clifr2v1x001z14uohri54xvc","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"8-结构体\"><a href=\"#8-结构体\" class=\"headerlink\" title=\"8 结构体\"></a>8 结构体</h2><h3 id=\"8-1-结构体基本概念\"><a href=\"#8-1-结构体基本概念\" class=\"headerlink\" title=\"8.1 结构体基本概念\"></a>8.1 结构体基本概念</h3><p>结构体属于用户==自定义的数据类型==，允许用户存储不同的数据类型</p>\n<h3 id=\"8-2-结构体定义和使用\"><a href=\"#8-2-结构体定义和使用\" class=\"headerlink\" title=\"8.2 结构体定义和使用\"></a>8.2 结构体定义和使用</h3><p><strong>语法：</strong><code>struct 结构体名 &#123; 结构体成员列表 &#125;；</code></p>\n<p>通过结构体创建变量的方式有三种：</p>\n<ul>\n<li>struct 结构体名 变量名</li>\n<li>struct 结构体名 变量名 = { 成员1值 ， 成员2值…}</li>\n<li>定义结构体时顺便创建变量</li>\n</ul>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//结构体定义</span></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">student</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//成员列表</span></span><br><span class=\"line\">\tstring name;  <span class=\"comment\">//姓名</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> age;      <span class=\"comment\">//年龄</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> score;    <span class=\"comment\">//分数</span></span><br><span class=\"line\">&#125;stu3; <span class=\"comment\">//结构体变量创建方式3 </span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//结构体变量创建方式1</span></span><br><span class=\"line\">\t<span class=\"keyword\">struct</span> <span class=\"title class_\">student</span> stu1; <span class=\"comment\">//struct 关键字可以省略</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tstu1.name = <span class=\"string\">&quot;张三&quot;</span>;</span><br><span class=\"line\">\tstu1.age = <span class=\"number\">18</span>;</span><br><span class=\"line\">\tstu1.score = <span class=\"number\">100</span>;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;姓名：&quot;</span> &lt;&lt; stu1.name &lt;&lt; <span class=\"string\">&quot; 年龄：&quot;</span> &lt;&lt; stu1.age  &lt;&lt; <span class=\"string\">&quot; 分数：&quot;</span> &lt;&lt; stu1.score &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//结构体变量创建方式2</span></span><br><span class=\"line\">\t<span class=\"keyword\">struct</span> <span class=\"title class_\">student</span> stu2 = &#123; <span class=\"string\">&quot;李四&quot;</span>,<span class=\"number\">19</span>,<span class=\"number\">60</span> &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;姓名：&quot;</span> &lt;&lt; stu2.name &lt;&lt; <span class=\"string\">&quot; 年龄：&quot;</span> &lt;&lt; stu2.age  &lt;&lt; <span class=\"string\">&quot; 分数：&quot;</span> &lt;&lt; stu2.score &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\tstu3.name = <span class=\"string\">&quot;王五&quot;</span>;</span><br><span class=\"line\">\tstu3.age = <span class=\"number\">18</span>;</span><br><span class=\"line\">\tstu3.score = <span class=\"number\">80</span>;</span><br><span class=\"line\">\t</span><br><span class=\"line\"></span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;姓名：&quot;</span> &lt;&lt; stu3.name &lt;&lt; <span class=\"string\">&quot; 年龄：&quot;</span> &lt;&lt; stu3.age  &lt;&lt; <span class=\"string\">&quot; 分数：&quot;</span> &lt;&lt; stu3.score &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">system</span>(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<blockquote>\n<p>总结1：定义结构体时的关键字是struct，不可省略</p>\n</blockquote>\n<blockquote>\n<p>总结2：创建结构体变量时，关键字struct可以省略</p>\n</blockquote>\n<blockquote>\n<p>总结3：结构体变量利用操作符 ‘’.’’  访问成员</p>\n</blockquote>\n<h3 id=\"8-3-结构体数组\"><a href=\"#8-3-结构体数组\" class=\"headerlink\" title=\"8.3 结构体数组\"></a>8.3 结构体数组</h3><p><strong>作用：</strong>将自定义的结构体放入到数组中方便维护</p>\n<p><strong>语法：</strong><code> struct  结构体名 数组名[元素个数] = &#123;  &#123;&#125; , &#123;&#125; , ... &#123;&#125; &#125;</code></p>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//结构体定义</span></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">student</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//成员列表</span></span><br><span class=\"line\">\tstring name;  <span class=\"comment\">//姓名</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> age;      <span class=\"comment\">//年龄</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> score;    <span class=\"comment\">//分数</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//结构体数组</span></span><br><span class=\"line\">\t<span class=\"keyword\">struct</span> <span class=\"title class_\">student</span> arr[<span class=\"number\">3</span>]=</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t&#123;<span class=\"string\">&quot;张三&quot;</span>,<span class=\"number\">18</span>,<span class=\"number\">80</span> &#125;,</span><br><span class=\"line\">\t\t&#123;<span class=\"string\">&quot;李四&quot;</span>,<span class=\"number\">19</span>,<span class=\"number\">60</span> &#125;,</span><br><span class=\"line\">\t\t&#123;<span class=\"string\">&quot;王五&quot;</span>,<span class=\"number\">20</span>,<span class=\"number\">70</span> &#125;</span><br><span class=\"line\">\t&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">3</span>; i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tcout &lt;&lt; <span class=\"string\">&quot;姓名：&quot;</span> &lt;&lt; arr[i].name &lt;&lt; <span class=\"string\">&quot; 年龄：&quot;</span> &lt;&lt; arr[i].age &lt;&lt; <span class=\"string\">&quot; 分数：&quot;</span> &lt;&lt; arr[i].score &lt;&lt; endl;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">system</span>(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"8-4-结构体指针\"><a href=\"#8-4-结构体指针\" class=\"headerlink\" title=\"8.4 结构体指针\"></a>8.4 结构体指针</h3><p><strong>作用：</strong>通过指针访问结构体中的成员</p>\n<ul>\n<li>利用操作符 <code>-&gt; </code>可以通过结构体指针访问结构体属性</li>\n</ul>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//结构体定义</span></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">student</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//成员列表</span></span><br><span class=\"line\">\tstring name;  <span class=\"comment\">//姓名</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> age;      <span class=\"comment\">//年龄</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> score;    <span class=\"comment\">//分数</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">struct</span> <span class=\"title class_\">student</span> stu = &#123; <span class=\"string\">&quot;张三&quot;</span>,<span class=\"number\">18</span>,<span class=\"number\">100</span>, &#125;;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">struct</span> <span class=\"title class_\">student</span> * p = &amp;stu;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tp-&gt;score = <span class=\"number\">80</span>; <span class=\"comment\">//指针通过 -&gt; 操作符可以访问成员</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;姓名：&quot;</span> &lt;&lt; p-&gt;name &lt;&lt; <span class=\"string\">&quot; 年龄：&quot;</span> &lt;&lt; p-&gt;age &lt;&lt; <span class=\"string\">&quot; 分数：&quot;</span> &lt;&lt; p-&gt;score &lt;&lt; endl;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"built_in\">system</span>(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<blockquote>\n<p>总结：结构体指针可以通过 -&gt; 操作符 来访问结构体中的成员</p>\n</blockquote>\n<h3 id=\"8-5-结构体嵌套结构体\"><a href=\"#8-5-结构体嵌套结构体\" class=\"headerlink\" title=\"8.5 结构体嵌套结构体\"></a>8.5 结构体嵌套结构体</h3><p><strong>作用：</strong> 结构体中的成员可以是另一个结构体</p>\n<p><strong>例如：</strong>每个老师辅导一个学员，一个老师的结构体中，记录一个学生的结构体</p>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//学生结构体定义</span></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">student</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//成员列表</span></span><br><span class=\"line\">\tstring name;  <span class=\"comment\">//姓名</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> age;      <span class=\"comment\">//年龄</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> score;    <span class=\"comment\">//分数</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//教师结构体定义</span></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">teacher</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">//成员列表</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> id; <span class=\"comment\">//职工编号</span></span><br><span class=\"line\">\tstring name;  <span class=\"comment\">//教师姓名</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> age;   <span class=\"comment\">//教师年龄</span></span><br><span class=\"line\">\t<span class=\"keyword\">struct</span> <span class=\"title class_\">student</span> stu; <span class=\"comment\">//子结构体 学生</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">struct</span> <span class=\"title class_\">teacher</span> t1;</span><br><span class=\"line\">\tt1.id = <span class=\"number\">10000</span>;</span><br><span class=\"line\">\tt1.name = <span class=\"string\">&quot;老王&quot;</span>;</span><br><span class=\"line\">\tt1.age = <span class=\"number\">40</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\tt1.stu.name = <span class=\"string\">&quot;张三&quot;</span>;</span><br><span class=\"line\">\tt1.stu.age = <span class=\"number\">18</span>;</span><br><span class=\"line\">\tt1.stu.score = <span class=\"number\">100</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;教师 职工编号： &quot;</span> &lt;&lt; t1.id &lt;&lt; <span class=\"string\">&quot; 姓名： &quot;</span> &lt;&lt; t1.name &lt;&lt; <span class=\"string\">&quot; 年龄： &quot;</span> &lt;&lt; t1.age &lt;&lt; endl;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;辅导学员 姓名： &quot;</span> &lt;&lt; t1.stu.name &lt;&lt; <span class=\"string\">&quot; 年龄：&quot;</span> &lt;&lt; t1.stu.age &lt;&lt; <span class=\"string\">&quot; 考试分数： &quot;</span> &lt;&lt; t1.stu.score &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">system</span>(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p><strong>总结：</strong>在结构体中可以定义另一个结构体作为成员，用来解决实际问题</p>\n<h3 id=\"8-6-结构体做函数参数\"><a href=\"#8-6-结构体做函数参数\" class=\"headerlink\" title=\"8.6 结构体做函数参数\"></a>8.6 结构体做函数参数</h3><p><strong>作用：</strong>将结构体作为参数向函数中传递</p>\n<p>传递方式有两种：</p>\n<ul>\n<li>值传递</li>\n<li>地址传递</li>\n</ul>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//学生结构体定义</span></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">student</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//成员列表</span></span><br><span class=\"line\">\tstring name;  <span class=\"comment\">//姓名</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> age;      <span class=\"comment\">//年龄</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> score;    <span class=\"comment\">//分数</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//值传递</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">printStudent</span><span class=\"params\">(student stu )</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tstu.age = <span class=\"number\">28</span>;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;子函数中 姓名：&quot;</span> &lt;&lt; stu.name &lt;&lt; <span class=\"string\">&quot; 年龄： &quot;</span> &lt;&lt; stu.age  &lt;&lt; <span class=\"string\">&quot; 分数：&quot;</span> &lt;&lt; stu.score &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//地址传递</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">printStudent2</span><span class=\"params\">(student *stu)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tstu-&gt;age = <span class=\"number\">28</span>;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;子函数中 姓名：&quot;</span> &lt;&lt; stu-&gt;name &lt;&lt; <span class=\"string\">&quot; 年龄： &quot;</span> &lt;&lt; stu-&gt;age  &lt;&lt; <span class=\"string\">&quot; 分数：&quot;</span> &lt;&lt; stu-&gt;score &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\tstudent stu = &#123; <span class=\"string\">&quot;张三&quot;</span>,<span class=\"number\">18</span>,<span class=\"number\">100</span>&#125;;</span><br><span class=\"line\">\t<span class=\"comment\">//值传递</span></span><br><span class=\"line\">\t<span class=\"built_in\">printStudent</span>(stu);</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;主函数中 姓名：&quot;</span> &lt;&lt; stu.name &lt;&lt; <span class=\"string\">&quot; 年龄： &quot;</span> &lt;&lt; stu.age &lt;&lt; <span class=\"string\">&quot; 分数：&quot;</span> &lt;&lt; stu.score &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">\tcout &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//地址传递</span></span><br><span class=\"line\">\t<span class=\"built_in\">printStudent2</span>(&amp;stu);</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;主函数中 姓名：&quot;</span> &lt;&lt; stu.name &lt;&lt; <span class=\"string\">&quot; 年龄： &quot;</span> &lt;&lt; stu.age  &lt;&lt; <span class=\"string\">&quot; 分数：&quot;</span> &lt;&lt; stu.score &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">system</span>(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>总结：如果不想修改主函数中的数据，用值传递，反之用地址传递</p>\n</blockquote>\n<h3 id=\"8-7-结构体中-const使用场景\"><a href=\"#8-7-结构体中-const使用场景\" class=\"headerlink\" title=\"8.7 结构体中 const使用场景\"></a>8.7 结构体中 const使用场景</h3><p><strong>作用：</strong>用const来防止误操作</p>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//学生结构体定义</span></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">student</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//成员列表</span></span><br><span class=\"line\">\tstring name;  <span class=\"comment\">//姓名</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> age;      <span class=\"comment\">//年龄</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> score;    <span class=\"comment\">//分数</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//const使用场景</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">printStudent</span><span class=\"params\">(<span class=\"type\">const</span> student *stu)</span> <span class=\"comment\">//加const防止函数体中的误操作</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//stu-&gt;age = 100; //操作失败，因为加了const修饰</span></span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;姓名：&quot;</span> &lt;&lt; stu-&gt;name &lt;&lt; <span class=\"string\">&quot; 年龄：&quot;</span> &lt;&lt; stu-&gt;age &lt;&lt; <span class=\"string\">&quot; 分数：&quot;</span> &lt;&lt; stu-&gt;score &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\tstudent stu = &#123; <span class=\"string\">&quot;张三&quot;</span>,<span class=\"number\">18</span>,<span class=\"number\">100</span> &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">printStudent</span>(&amp;stu);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">system</span>(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"8-8-结构体案例\"><a href=\"#8-8-结构体案例\" class=\"headerlink\" title=\"8.8 结构体案例\"></a>8.8 结构体案例</h3><h4 id=\"8-8-1-案例1\"><a href=\"#8-8-1-案例1\" class=\"headerlink\" title=\"8.8.1 案例1\"></a>8.8.1 案例1</h4><p><strong>案例描述：</strong></p>\n<p>学校正在做毕设项目，每名老师带领5个学生，总共有3名老师，需求如下</p>\n<p>设计学生和老师的结构体，其中在老师的结构体中，有老师姓名和一个存放5名学生的数组作为成员</p>\n<p>学生的成员有姓名、考试分数，创建数组存放3名老师，通过函数给每个老师及所带的学生赋值</p>\n<p>最终打印出老师数据以及老师所带的学生数据。</p>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Student</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tstring name;</span><br><span class=\"line\">\t<span class=\"type\">int</span> score;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Teacher</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tstring name;</span><br><span class=\"line\">\tStudent sArray[<span class=\"number\">5</span>];</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">allocateSpace</span><span class=\"params\">(Teacher tArray[] , <span class=\"type\">int</span> len)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tstring tName = <span class=\"string\">&quot;教师&quot;</span>;</span><br><span class=\"line\">\tstring sName = <span class=\"string\">&quot;学生&quot;</span>;</span><br><span class=\"line\">\tstring nameSeed = <span class=\"string\">&quot;ABCDE&quot;</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; len; i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\ttArray[i].name = tName + nameSeed[i];</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">0</span>; j &lt; <span class=\"number\">5</span>; j++)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\ttArray[i].sArray[j].name = sName + nameSeed[j];</span><br><span class=\"line\">\t\t\ttArray[i].sArray[j].score = <span class=\"built_in\">rand</span>() % <span class=\"number\">61</span> + <span class=\"number\">40</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">printTeachers</span><span class=\"params\">(Teacher tArray[], <span class=\"type\">int</span> len)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; len; i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tcout &lt;&lt; tArray[i].name &lt;&lt; endl;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">0</span>; j &lt; <span class=\"number\">5</span>; j++)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tcout &lt;&lt; <span class=\"string\">&quot;\\t姓名：&quot;</span> &lt;&lt; tArray[i].sArray[j].name &lt;&lt; <span class=\"string\">&quot; 分数：&quot;</span> &lt;&lt; tArray[i].sArray[j].score &lt;&lt; endl;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">srand</span>((<span class=\"type\">unsigned</span> <span class=\"type\">int</span>)<span class=\"built_in\">time</span>(<span class=\"literal\">NULL</span>)); <span class=\"comment\">//随机数种子 头文件 #include &lt;ctime&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tTeacher tArray[<span class=\"number\">3</span>]; <span class=\"comment\">//老师数组</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"type\">int</span> len = <span class=\"built_in\">sizeof</span>(tArray) / <span class=\"built_in\">sizeof</span>(Teacher);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">allocateSpace</span>(tArray, len); <span class=\"comment\">//创建数据</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">printTeachers</span>(tArray, len); <span class=\"comment\">//打印数据</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"built_in\">system</span>(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n<h4 id=\"8-8-2-案例2\"><a href=\"#8-8-2-案例2\" class=\"headerlink\" title=\"8.8.2 案例2\"></a>8.8.2 案例2</h4><p><strong>案例描述：</strong></p>\n<p>设计一个英雄的结构体，包括成员姓名，年龄，性别;创建结构体数组，数组中存放5名英雄。</p>\n<p>通过冒泡排序的算法，将数组中的英雄按照年龄进行升序排序，最终打印排序后的结果。</p>\n<p>五名英雄信息如下：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;<span class=\"string\">&quot;刘备&quot;</span>,<span class=\"number\">23</span>,<span class=\"string\">&quot;男&quot;</span>&#125;,</span><br><span class=\"line\">&#123;<span class=\"string\">&quot;关羽&quot;</span>,<span class=\"number\">22</span>,<span class=\"string\">&quot;男&quot;</span>&#125;,</span><br><span class=\"line\">&#123;<span class=\"string\">&quot;张飞&quot;</span>,<span class=\"number\">20</span>,<span class=\"string\">&quot;男&quot;</span>&#125;,</span><br><span class=\"line\">&#123;<span class=\"string\">&quot;赵云&quot;</span>,<span class=\"number\">21</span>,<span class=\"string\">&quot;男&quot;</span>&#125;,</span><br><span class=\"line\">&#123;<span class=\"string\">&quot;貂蝉&quot;</span>,<span class=\"number\">19</span>,<span class=\"string\">&quot;女&quot;</span>&#125;,</span><br></pre></td></tr></table></figure>\n\n\n\n\n<p><strong>示例：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//英雄结构体</span></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">hero</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tstring name;</span><br><span class=\"line\">\t<span class=\"type\">int</span> age;</span><br><span class=\"line\">\tstring sex;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">//冒泡排序</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">bubbleSort</span><span class=\"params\">(hero arr[] , <span class=\"type\">int</span> len)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; len - <span class=\"number\">1</span>; i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">0</span>; j &lt; len - <span class=\"number\">1</span> - i; j++)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (arr[j].age &gt; arr[j + <span class=\"number\">1</span>].age)</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\thero temp = arr[j];</span><br><span class=\"line\">\t\t\t\tarr[j] = arr[j + <span class=\"number\">1</span>];</span><br><span class=\"line\">\t\t\t\tarr[j + <span class=\"number\">1</span>] = temp;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//打印数组</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">printHeros</span><span class=\"params\">(hero arr[], <span class=\"type\">int</span> len)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; len; i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tcout &lt;&lt; <span class=\"string\">&quot;姓名： &quot;</span> &lt;&lt; arr[i].name &lt;&lt; <span class=\"string\">&quot; 性别： &quot;</span> &lt;&lt; arr[i].sex &lt;&lt; <span class=\"string\">&quot; 年龄： &quot;</span> &lt;&lt; arr[i].age &lt;&lt; endl;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">struct</span> <span class=\"title class_\">hero</span> arr[<span class=\"number\">5</span>] =</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t&#123;<span class=\"string\">&quot;刘备&quot;</span>,<span class=\"number\">23</span>,<span class=\"string\">&quot;男&quot;</span>&#125;,</span><br><span class=\"line\">\t\t&#123;<span class=\"string\">&quot;关羽&quot;</span>,<span class=\"number\">22</span>,<span class=\"string\">&quot;男&quot;</span>&#125;,</span><br><span class=\"line\">\t\t&#123;<span class=\"string\">&quot;张飞&quot;</span>,<span class=\"number\">20</span>,<span class=\"string\">&quot;男&quot;</span>&#125;,</span><br><span class=\"line\">\t\t&#123;<span class=\"string\">&quot;赵云&quot;</span>,<span class=\"number\">21</span>,<span class=\"string\">&quot;男&quot;</span>&#125;,</span><br><span class=\"line\">\t\t&#123;<span class=\"string\">&quot;貂蝉&quot;</span>,<span class=\"number\">19</span>,<span class=\"string\">&quot;女&quot;</span>&#125;,</span><br><span class=\"line\">\t&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"type\">int</span> len = <span class=\"built_in\">sizeof</span>(arr) / <span class=\"built_in\">sizeof</span>(hero); <span class=\"comment\">//获取数组元素个数</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">bubbleSort</span>(arr, len); <span class=\"comment\">//排序</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">printHeros</span>(arr, len); <span class=\"comment\">//打印</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">system</span>(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"C-基础篇结束\"><a href=\"#C-基础篇结束\" class=\"headerlink\" title=\"C++基础篇结束\"></a><strong>C++基础篇结束</strong></h2>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"8-结构体\"><a href=\"#8-结构体\" class=\"headerlink\" title=\"8 结构体\"></a>8 结构体</h2><h3 id=\"8-1-结构体基本概念\"><a href=\"#8-1-结构体基本概念\" class=\"headerlink\" title=\"8.1 结构体基本概念\"></a>8.1 结构体基本概念</h3><p>结构体属于用户==自定义的数据类型==，允许用户存储不同的数据类型</p>\n<h3 id=\"8-2-结构体定义和使用\"><a href=\"#8-2-结构体定义和使用\" class=\"headerlink\" title=\"8.2 结构体定义和使用\"></a>8.2 结构体定义和使用</h3><p><strong>语法：</strong><code>struct 结构体名 &#123; 结构体成员列表 &#125;；</code></p>\n<p>通过结构体创建变量的方式有三种：</p>\n<ul>\n<li>struct 结构体名 变量名</li>\n<li>struct 结构体名 变量名 = { 成员1值 ， 成员2值…}</li>\n<li>定义结构体时顺便创建变量</li>\n</ul>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//结构体定义</span></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">student</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//成员列表</span></span><br><span class=\"line\">\tstring name;  <span class=\"comment\">//姓名</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> age;      <span class=\"comment\">//年龄</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> score;    <span class=\"comment\">//分数</span></span><br><span class=\"line\">&#125;stu3; <span class=\"comment\">//结构体变量创建方式3 </span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//结构体变量创建方式1</span></span><br><span class=\"line\">\t<span class=\"keyword\">struct</span> <span class=\"title class_\">student</span> stu1; <span class=\"comment\">//struct 关键字可以省略</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tstu1.name = <span class=\"string\">&quot;张三&quot;</span>;</span><br><span class=\"line\">\tstu1.age = <span class=\"number\">18</span>;</span><br><span class=\"line\">\tstu1.score = <span class=\"number\">100</span>;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;姓名：&quot;</span> &lt;&lt; stu1.name &lt;&lt; <span class=\"string\">&quot; 年龄：&quot;</span> &lt;&lt; stu1.age  &lt;&lt; <span class=\"string\">&quot; 分数：&quot;</span> &lt;&lt; stu1.score &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//结构体变量创建方式2</span></span><br><span class=\"line\">\t<span class=\"keyword\">struct</span> <span class=\"title class_\">student</span> stu2 = &#123; <span class=\"string\">&quot;李四&quot;</span>,<span class=\"number\">19</span>,<span class=\"number\">60</span> &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;姓名：&quot;</span> &lt;&lt; stu2.name &lt;&lt; <span class=\"string\">&quot; 年龄：&quot;</span> &lt;&lt; stu2.age  &lt;&lt; <span class=\"string\">&quot; 分数：&quot;</span> &lt;&lt; stu2.score &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\tstu3.name = <span class=\"string\">&quot;王五&quot;</span>;</span><br><span class=\"line\">\tstu3.age = <span class=\"number\">18</span>;</span><br><span class=\"line\">\tstu3.score = <span class=\"number\">80</span>;</span><br><span class=\"line\">\t</span><br><span class=\"line\"></span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;姓名：&quot;</span> &lt;&lt; stu3.name &lt;&lt; <span class=\"string\">&quot; 年龄：&quot;</span> &lt;&lt; stu3.age  &lt;&lt; <span class=\"string\">&quot; 分数：&quot;</span> &lt;&lt; stu3.score &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">system</span>(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<blockquote>\n<p>总结1：定义结构体时的关键字是struct，不可省略</p>\n</blockquote>\n<blockquote>\n<p>总结2：创建结构体变量时，关键字struct可以省略</p>\n</blockquote>\n<blockquote>\n<p>总结3：结构体变量利用操作符 ‘’.’’  访问成员</p>\n</blockquote>\n<h3 id=\"8-3-结构体数组\"><a href=\"#8-3-结构体数组\" class=\"headerlink\" title=\"8.3 结构体数组\"></a>8.3 结构体数组</h3><p><strong>作用：</strong>将自定义的结构体放入到数组中方便维护</p>\n<p><strong>语法：</strong><code> struct  结构体名 数组名[元素个数] = &#123;  &#123;&#125; , &#123;&#125; , ... &#123;&#125; &#125;</code></p>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//结构体定义</span></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">student</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//成员列表</span></span><br><span class=\"line\">\tstring name;  <span class=\"comment\">//姓名</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> age;      <span class=\"comment\">//年龄</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> score;    <span class=\"comment\">//分数</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//结构体数组</span></span><br><span class=\"line\">\t<span class=\"keyword\">struct</span> <span class=\"title class_\">student</span> arr[<span class=\"number\">3</span>]=</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t&#123;<span class=\"string\">&quot;张三&quot;</span>,<span class=\"number\">18</span>,<span class=\"number\">80</span> &#125;,</span><br><span class=\"line\">\t\t&#123;<span class=\"string\">&quot;李四&quot;</span>,<span class=\"number\">19</span>,<span class=\"number\">60</span> &#125;,</span><br><span class=\"line\">\t\t&#123;<span class=\"string\">&quot;王五&quot;</span>,<span class=\"number\">20</span>,<span class=\"number\">70</span> &#125;</span><br><span class=\"line\">\t&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">3</span>; i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tcout &lt;&lt; <span class=\"string\">&quot;姓名：&quot;</span> &lt;&lt; arr[i].name &lt;&lt; <span class=\"string\">&quot; 年龄：&quot;</span> &lt;&lt; arr[i].age &lt;&lt; <span class=\"string\">&quot; 分数：&quot;</span> &lt;&lt; arr[i].score &lt;&lt; endl;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">system</span>(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"8-4-结构体指针\"><a href=\"#8-4-结构体指针\" class=\"headerlink\" title=\"8.4 结构体指针\"></a>8.4 结构体指针</h3><p><strong>作用：</strong>通过指针访问结构体中的成员</p>\n<ul>\n<li>利用操作符 <code>-&gt; </code>可以通过结构体指针访问结构体属性</li>\n</ul>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//结构体定义</span></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">student</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//成员列表</span></span><br><span class=\"line\">\tstring name;  <span class=\"comment\">//姓名</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> age;      <span class=\"comment\">//年龄</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> score;    <span class=\"comment\">//分数</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">struct</span> <span class=\"title class_\">student</span> stu = &#123; <span class=\"string\">&quot;张三&quot;</span>,<span class=\"number\">18</span>,<span class=\"number\">100</span>, &#125;;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">struct</span> <span class=\"title class_\">student</span> * p = &amp;stu;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tp-&gt;score = <span class=\"number\">80</span>; <span class=\"comment\">//指针通过 -&gt; 操作符可以访问成员</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;姓名：&quot;</span> &lt;&lt; p-&gt;name &lt;&lt; <span class=\"string\">&quot; 年龄：&quot;</span> &lt;&lt; p-&gt;age &lt;&lt; <span class=\"string\">&quot; 分数：&quot;</span> &lt;&lt; p-&gt;score &lt;&lt; endl;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"built_in\">system</span>(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<blockquote>\n<p>总结：结构体指针可以通过 -&gt; 操作符 来访问结构体中的成员</p>\n</blockquote>\n<h3 id=\"8-5-结构体嵌套结构体\"><a href=\"#8-5-结构体嵌套结构体\" class=\"headerlink\" title=\"8.5 结构体嵌套结构体\"></a>8.5 结构体嵌套结构体</h3><p><strong>作用：</strong> 结构体中的成员可以是另一个结构体</p>\n<p><strong>例如：</strong>每个老师辅导一个学员，一个老师的结构体中，记录一个学生的结构体</p>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//学生结构体定义</span></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">student</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//成员列表</span></span><br><span class=\"line\">\tstring name;  <span class=\"comment\">//姓名</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> age;      <span class=\"comment\">//年龄</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> score;    <span class=\"comment\">//分数</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//教师结构体定义</span></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">teacher</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">//成员列表</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> id; <span class=\"comment\">//职工编号</span></span><br><span class=\"line\">\tstring name;  <span class=\"comment\">//教师姓名</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> age;   <span class=\"comment\">//教师年龄</span></span><br><span class=\"line\">\t<span class=\"keyword\">struct</span> <span class=\"title class_\">student</span> stu; <span class=\"comment\">//子结构体 学生</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">struct</span> <span class=\"title class_\">teacher</span> t1;</span><br><span class=\"line\">\tt1.id = <span class=\"number\">10000</span>;</span><br><span class=\"line\">\tt1.name = <span class=\"string\">&quot;老王&quot;</span>;</span><br><span class=\"line\">\tt1.age = <span class=\"number\">40</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\tt1.stu.name = <span class=\"string\">&quot;张三&quot;</span>;</span><br><span class=\"line\">\tt1.stu.age = <span class=\"number\">18</span>;</span><br><span class=\"line\">\tt1.stu.score = <span class=\"number\">100</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;教师 职工编号： &quot;</span> &lt;&lt; t1.id &lt;&lt; <span class=\"string\">&quot; 姓名： &quot;</span> &lt;&lt; t1.name &lt;&lt; <span class=\"string\">&quot; 年龄： &quot;</span> &lt;&lt; t1.age &lt;&lt; endl;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;辅导学员 姓名： &quot;</span> &lt;&lt; t1.stu.name &lt;&lt; <span class=\"string\">&quot; 年龄：&quot;</span> &lt;&lt; t1.stu.age &lt;&lt; <span class=\"string\">&quot; 考试分数： &quot;</span> &lt;&lt; t1.stu.score &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">system</span>(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p><strong>总结：</strong>在结构体中可以定义另一个结构体作为成员，用来解决实际问题</p>\n<h3 id=\"8-6-结构体做函数参数\"><a href=\"#8-6-结构体做函数参数\" class=\"headerlink\" title=\"8.6 结构体做函数参数\"></a>8.6 结构体做函数参数</h3><p><strong>作用：</strong>将结构体作为参数向函数中传递</p>\n<p>传递方式有两种：</p>\n<ul>\n<li>值传递</li>\n<li>地址传递</li>\n</ul>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//学生结构体定义</span></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">student</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//成员列表</span></span><br><span class=\"line\">\tstring name;  <span class=\"comment\">//姓名</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> age;      <span class=\"comment\">//年龄</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> score;    <span class=\"comment\">//分数</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//值传递</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">printStudent</span><span class=\"params\">(student stu )</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tstu.age = <span class=\"number\">28</span>;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;子函数中 姓名：&quot;</span> &lt;&lt; stu.name &lt;&lt; <span class=\"string\">&quot; 年龄： &quot;</span> &lt;&lt; stu.age  &lt;&lt; <span class=\"string\">&quot; 分数：&quot;</span> &lt;&lt; stu.score &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//地址传递</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">printStudent2</span><span class=\"params\">(student *stu)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tstu-&gt;age = <span class=\"number\">28</span>;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;子函数中 姓名：&quot;</span> &lt;&lt; stu-&gt;name &lt;&lt; <span class=\"string\">&quot; 年龄： &quot;</span> &lt;&lt; stu-&gt;age  &lt;&lt; <span class=\"string\">&quot; 分数：&quot;</span> &lt;&lt; stu-&gt;score &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\tstudent stu = &#123; <span class=\"string\">&quot;张三&quot;</span>,<span class=\"number\">18</span>,<span class=\"number\">100</span>&#125;;</span><br><span class=\"line\">\t<span class=\"comment\">//值传递</span></span><br><span class=\"line\">\t<span class=\"built_in\">printStudent</span>(stu);</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;主函数中 姓名：&quot;</span> &lt;&lt; stu.name &lt;&lt; <span class=\"string\">&quot; 年龄： &quot;</span> &lt;&lt; stu.age &lt;&lt; <span class=\"string\">&quot; 分数：&quot;</span> &lt;&lt; stu.score &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">\tcout &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//地址传递</span></span><br><span class=\"line\">\t<span class=\"built_in\">printStudent2</span>(&amp;stu);</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;主函数中 姓名：&quot;</span> &lt;&lt; stu.name &lt;&lt; <span class=\"string\">&quot; 年龄： &quot;</span> &lt;&lt; stu.age  &lt;&lt; <span class=\"string\">&quot; 分数：&quot;</span> &lt;&lt; stu.score &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">system</span>(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>总结：如果不想修改主函数中的数据，用值传递，反之用地址传递</p>\n</blockquote>\n<h3 id=\"8-7-结构体中-const使用场景\"><a href=\"#8-7-结构体中-const使用场景\" class=\"headerlink\" title=\"8.7 结构体中 const使用场景\"></a>8.7 结构体中 const使用场景</h3><p><strong>作用：</strong>用const来防止误操作</p>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//学生结构体定义</span></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">student</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//成员列表</span></span><br><span class=\"line\">\tstring name;  <span class=\"comment\">//姓名</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> age;      <span class=\"comment\">//年龄</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> score;    <span class=\"comment\">//分数</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//const使用场景</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">printStudent</span><span class=\"params\">(<span class=\"type\">const</span> student *stu)</span> <span class=\"comment\">//加const防止函数体中的误操作</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//stu-&gt;age = 100; //操作失败，因为加了const修饰</span></span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;姓名：&quot;</span> &lt;&lt; stu-&gt;name &lt;&lt; <span class=\"string\">&quot; 年龄：&quot;</span> &lt;&lt; stu-&gt;age &lt;&lt; <span class=\"string\">&quot; 分数：&quot;</span> &lt;&lt; stu-&gt;score &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\tstudent stu = &#123; <span class=\"string\">&quot;张三&quot;</span>,<span class=\"number\">18</span>,<span class=\"number\">100</span> &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">printStudent</span>(&amp;stu);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">system</span>(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"8-8-结构体案例\"><a href=\"#8-8-结构体案例\" class=\"headerlink\" title=\"8.8 结构体案例\"></a>8.8 结构体案例</h3><h4 id=\"8-8-1-案例1\"><a href=\"#8-8-1-案例1\" class=\"headerlink\" title=\"8.8.1 案例1\"></a>8.8.1 案例1</h4><p><strong>案例描述：</strong></p>\n<p>学校正在做毕设项目，每名老师带领5个学生，总共有3名老师，需求如下</p>\n<p>设计学生和老师的结构体，其中在老师的结构体中，有老师姓名和一个存放5名学生的数组作为成员</p>\n<p>学生的成员有姓名、考试分数，创建数组存放3名老师，通过函数给每个老师及所带的学生赋值</p>\n<p>最终打印出老师数据以及老师所带的学生数据。</p>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Student</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tstring name;</span><br><span class=\"line\">\t<span class=\"type\">int</span> score;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Teacher</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tstring name;</span><br><span class=\"line\">\tStudent sArray[<span class=\"number\">5</span>];</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">allocateSpace</span><span class=\"params\">(Teacher tArray[] , <span class=\"type\">int</span> len)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tstring tName = <span class=\"string\">&quot;教师&quot;</span>;</span><br><span class=\"line\">\tstring sName = <span class=\"string\">&quot;学生&quot;</span>;</span><br><span class=\"line\">\tstring nameSeed = <span class=\"string\">&quot;ABCDE&quot;</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; len; i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\ttArray[i].name = tName + nameSeed[i];</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">0</span>; j &lt; <span class=\"number\">5</span>; j++)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\ttArray[i].sArray[j].name = sName + nameSeed[j];</span><br><span class=\"line\">\t\t\ttArray[i].sArray[j].score = <span class=\"built_in\">rand</span>() % <span class=\"number\">61</span> + <span class=\"number\">40</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">printTeachers</span><span class=\"params\">(Teacher tArray[], <span class=\"type\">int</span> len)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; len; i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tcout &lt;&lt; tArray[i].name &lt;&lt; endl;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">0</span>; j &lt; <span class=\"number\">5</span>; j++)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tcout &lt;&lt; <span class=\"string\">&quot;\\t姓名：&quot;</span> &lt;&lt; tArray[i].sArray[j].name &lt;&lt; <span class=\"string\">&quot; 分数：&quot;</span> &lt;&lt; tArray[i].sArray[j].score &lt;&lt; endl;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">srand</span>((<span class=\"type\">unsigned</span> <span class=\"type\">int</span>)<span class=\"built_in\">time</span>(<span class=\"literal\">NULL</span>)); <span class=\"comment\">//随机数种子 头文件 #include &lt;ctime&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tTeacher tArray[<span class=\"number\">3</span>]; <span class=\"comment\">//老师数组</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"type\">int</span> len = <span class=\"built_in\">sizeof</span>(tArray) / <span class=\"built_in\">sizeof</span>(Teacher);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">allocateSpace</span>(tArray, len); <span class=\"comment\">//创建数据</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">printTeachers</span>(tArray, len); <span class=\"comment\">//打印数据</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"built_in\">system</span>(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n<h4 id=\"8-8-2-案例2\"><a href=\"#8-8-2-案例2\" class=\"headerlink\" title=\"8.8.2 案例2\"></a>8.8.2 案例2</h4><p><strong>案例描述：</strong></p>\n<p>设计一个英雄的结构体，包括成员姓名，年龄，性别;创建结构体数组，数组中存放5名英雄。</p>\n<p>通过冒泡排序的算法，将数组中的英雄按照年龄进行升序排序，最终打印排序后的结果。</p>\n<p>五名英雄信息如下：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;<span class=\"string\">&quot;刘备&quot;</span>,<span class=\"number\">23</span>,<span class=\"string\">&quot;男&quot;</span>&#125;,</span><br><span class=\"line\">&#123;<span class=\"string\">&quot;关羽&quot;</span>,<span class=\"number\">22</span>,<span class=\"string\">&quot;男&quot;</span>&#125;,</span><br><span class=\"line\">&#123;<span class=\"string\">&quot;张飞&quot;</span>,<span class=\"number\">20</span>,<span class=\"string\">&quot;男&quot;</span>&#125;,</span><br><span class=\"line\">&#123;<span class=\"string\">&quot;赵云&quot;</span>,<span class=\"number\">21</span>,<span class=\"string\">&quot;男&quot;</span>&#125;,</span><br><span class=\"line\">&#123;<span class=\"string\">&quot;貂蝉&quot;</span>,<span class=\"number\">19</span>,<span class=\"string\">&quot;女&quot;</span>&#125;,</span><br></pre></td></tr></table></figure>\n\n\n\n\n<p><strong>示例：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//英雄结构体</span></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">hero</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tstring name;</span><br><span class=\"line\">\t<span class=\"type\">int</span> age;</span><br><span class=\"line\">\tstring sex;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">//冒泡排序</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">bubbleSort</span><span class=\"params\">(hero arr[] , <span class=\"type\">int</span> len)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; len - <span class=\"number\">1</span>; i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">0</span>; j &lt; len - <span class=\"number\">1</span> - i; j++)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (arr[j].age &gt; arr[j + <span class=\"number\">1</span>].age)</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\thero temp = arr[j];</span><br><span class=\"line\">\t\t\t\tarr[j] = arr[j + <span class=\"number\">1</span>];</span><br><span class=\"line\">\t\t\t\tarr[j + <span class=\"number\">1</span>] = temp;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//打印数组</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">printHeros</span><span class=\"params\">(hero arr[], <span class=\"type\">int</span> len)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; len; i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tcout &lt;&lt; <span class=\"string\">&quot;姓名： &quot;</span> &lt;&lt; arr[i].name &lt;&lt; <span class=\"string\">&quot; 性别： &quot;</span> &lt;&lt; arr[i].sex &lt;&lt; <span class=\"string\">&quot; 年龄： &quot;</span> &lt;&lt; arr[i].age &lt;&lt; endl;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">struct</span> <span class=\"title class_\">hero</span> arr[<span class=\"number\">5</span>] =</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t&#123;<span class=\"string\">&quot;刘备&quot;</span>,<span class=\"number\">23</span>,<span class=\"string\">&quot;男&quot;</span>&#125;,</span><br><span class=\"line\">\t\t&#123;<span class=\"string\">&quot;关羽&quot;</span>,<span class=\"number\">22</span>,<span class=\"string\">&quot;男&quot;</span>&#125;,</span><br><span class=\"line\">\t\t&#123;<span class=\"string\">&quot;张飞&quot;</span>,<span class=\"number\">20</span>,<span class=\"string\">&quot;男&quot;</span>&#125;,</span><br><span class=\"line\">\t\t&#123;<span class=\"string\">&quot;赵云&quot;</span>,<span class=\"number\">21</span>,<span class=\"string\">&quot;男&quot;</span>&#125;,</span><br><span class=\"line\">\t\t&#123;<span class=\"string\">&quot;貂蝉&quot;</span>,<span class=\"number\">19</span>,<span class=\"string\">&quot;女&quot;</span>&#125;,</span><br><span class=\"line\">\t&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"type\">int</span> len = <span class=\"built_in\">sizeof</span>(arr) / <span class=\"built_in\">sizeof</span>(hero); <span class=\"comment\">//获取数组元素个数</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">bubbleSort</span>(arr, len); <span class=\"comment\">//排序</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">printHeros</span>(arr, len); <span class=\"comment\">//打印</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">system</span>(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"C-基础篇结束\"><a href=\"#C-基础篇结束\" class=\"headerlink\" title=\"C++基础篇结束\"></a><strong>C++基础篇结束</strong></h2>"},{"title":"六.函数","author":"连思鑫","date":"2023-03-01T11:23:00.000Z","_content":"## 6 函数\n\n### 6.1 概述\n\n**作用：**将一段经常使用的代码封装起来，减少重复代码\n\n一个较大的程序，一般分为若干个程序块，每个模块实现特定的功能。\n\n### 6.2 函数的定义\n\n函数的定义一般主要有5个步骤：\n\n1、返回值类型 \n\n2、函数名\n\n3、参数表列\n\n4、函数体语句 \n\n5、return 表达式\n\n**语法：** \n\n```C++\n返回值类型 函数名 （参数列表）\n{\n\n       函数体语句\n\n       return表达式\n\n}\n```\n\n\n\n* 返回值类型 ：一个函数可以返回一个值。在函数定义中\n* 函数名：给函数起个名称\n* 参数列表：使用该函数时，传入的数据\n* 函数体语句：花括号内的代码，函数内需要执行的语句\n* return表达式： 和返回值类型挂钩，函数执行完后，返回相应的数据\n\n\n\n**示例：**定义一个加法函数，实现两个数相加\n\n```C++\n//函数定义\nint add(int num1, int num2)\n{\n\tint sum = num1 + num2;\n\treturn sum;\n}\n```\n\n\n\n### 6.3 函数的调用\n\n**功能：**使用定义好的函数\n\n**语法：**` 函数名（参数）`\n\n**示例：**\n\n```C++\n//函数定义\nint add(int num1, int num2) //定义中的num1,num2称为形式参数，简称形参\n{\n\tint sum = num1 + num2;\n\treturn sum;\n}\n\nint main() {\n\n\tint a = 10;\n\tint b = 10;\n\t//调用add函数\n\tint sum = add(a, b);//调用时的a，b称为实际参数，简称实参\n\tcout << \"sum = \" << sum << endl;\n\n\ta = 100;\n\tb = 100;\n\n\tsum = add(a, b);\n\tcout << \"sum = \" << sum << endl;\n\n\tsystem(\"pause\");\n\n\treturn 0;\n}\n```\n\n> 总结：函数定义里小括号内称为形参，函数调用时传入的参数称为实参\n\n\n\n### 6.4 值传递\n\n* 所谓值传递，就是函数调用时实参将数值传入给形参\n* 值传递时，==如果形参发生，并不会影响实参==\n\n\n\n**示例：**\n\n```C++\nvoid swap(int num1, int num2)\n{\n\tcout << \"交换前：\" << endl;\n\tcout << \"num1 = \" << num1 << endl;\n\tcout << \"num2 = \" << num2 << endl;\n\n\tint temp = num1;\n\tnum1 = num2;\n\tnum2 = temp;\n\n\tcout << \"交换后：\" << endl;\n\tcout << \"num1 = \" << num1 << endl;\n\tcout << \"num2 = \" << num2 << endl;\n\n\t//return ; 当函数声明时候，不需要返回值，可以不写return\n}\n\nint main() {\n\n\tint a = 10;\n\tint b = 20;\n\n\tswap(a, b);\n\n\tcout << \"mian中的 a = \" << a << endl;\n\tcout << \"mian中的 b = \" << b << endl;\n\n\tsystem(\"pause\");\n\n\treturn 0;\n}\n```\n\n\n\n> 总结： 值传递时，形参是修饰不了实参的\n\n\n\n### **6.5 函数的常见样式**\n\n常见的函数样式有4种\n\n1. 无参无返\n2. 有参无返\n3. 无参有返\n4. 有参有返\n\n**示例：**\n\n```C++\n//函数常见样式\n//1、 无参无返\nvoid test01()\n{\n\t//void a = 10; //无类型不可以创建变量,原因无法分配内存\n\tcout << \"this is test01\" << endl;\n\t//test01(); 函数调用\n}\n\n//2、 有参无返\nvoid test02(int a)\n{\n\tcout << \"this is test02\" << endl;\n\tcout << \"a = \" << a << endl;\n}\n\n//3、无参有返\nint test03()\n{\n\tcout << \"this is test03 \" << endl;\n\treturn 10;\n}\n\n//4、有参有返\nint test04(int a, int b)\n{\n\tcout << \"this is test04 \" << endl;\n\tint sum = a + b;\n\treturn sum;\n}\n```\n\n\n\n\n### 6.6 函数的声明\n\n**作用：** 告诉编译器函数名称及如何调用函数。函数的实际主体可以单独定义。\n\n\n\n*  函数的**声明可以多次**，但是函数的**定义只能有一次**\n\n\n\n**示例：**\n\n```C++\n//声明可以多次，定义只能一次\n//声明\nint max(int a, int b);\nint max(int a, int b);\n//定义\nint max(int a, int b)\n{\n\treturn a > b ? a : b;\n}\n\nint main() {\n\n\tint a = 100;\n\tint b = 200;\n\n\tcout << max(a, b) << endl;\n\n\tsystem(\"pause\");\n\n\treturn 0;\n}\n```\n\n\n### 6.7 函数的分文件编写\n\n**作用：**让代码结构更加清晰\n\n函数分文件编写一般有4个步骤\n\n1. 创建后缀名为.h的头文件  \n2. 创建后缀名为.cpp的源文件\n3. 在头文件中写函数的声明\n4. 在源文件中写函数的定义\n\n**示例：**\n\n```C++\n//swap.h文件\n#include<iostream>\nusing namespace std;\n\n//实现两个数字交换的函数声明\nvoid swap(int a, int b);\n\n```\n\n```C++\n//swap.cpp文件\n#include \"swap.h\"\n\nvoid swap(int a, int b)\n{\n\tint temp = a;\n\ta = b;\n\tb = temp;\n\n\tcout << \"a = \" << a << endl;\n\tcout << \"b = \" << b << endl;\n}\n```\n\n```C++\n//main函数文件\n#include \"swap.h\"\nint main() {\n\n\tint a = 100;\n\tint b = 200;\n\tswap(a, b);\n\n\tsystem(\"pause\");\n\n\treturn 0;\n}\n\n```\n\n","source":"_posts/六-函数.md","raw":"title: 六.函数\nauthor: 连思鑫\ntags:\n  - c++\n  - 函数\ncategories:\n  - ..\n  - C++\n  - C++基础教程\n  - ''\ndate: 2023-03-01 19:23:00\n---\n## 6 函数\n\n### 6.1 概述\n\n**作用：**将一段经常使用的代码封装起来，减少重复代码\n\n一个较大的程序，一般分为若干个程序块，每个模块实现特定的功能。\n\n### 6.2 函数的定义\n\n函数的定义一般主要有5个步骤：\n\n1、返回值类型 \n\n2、函数名\n\n3、参数表列\n\n4、函数体语句 \n\n5、return 表达式\n\n**语法：** \n\n```C++\n返回值类型 函数名 （参数列表）\n{\n\n       函数体语句\n\n       return表达式\n\n}\n```\n\n\n\n* 返回值类型 ：一个函数可以返回一个值。在函数定义中\n* 函数名：给函数起个名称\n* 参数列表：使用该函数时，传入的数据\n* 函数体语句：花括号内的代码，函数内需要执行的语句\n* return表达式： 和返回值类型挂钩，函数执行完后，返回相应的数据\n\n\n\n**示例：**定义一个加法函数，实现两个数相加\n\n```C++\n//函数定义\nint add(int num1, int num2)\n{\n\tint sum = num1 + num2;\n\treturn sum;\n}\n```\n\n\n\n### 6.3 函数的调用\n\n**功能：**使用定义好的函数\n\n**语法：**` 函数名（参数）`\n\n**示例：**\n\n```C++\n//函数定义\nint add(int num1, int num2) //定义中的num1,num2称为形式参数，简称形参\n{\n\tint sum = num1 + num2;\n\treturn sum;\n}\n\nint main() {\n\n\tint a = 10;\n\tint b = 10;\n\t//调用add函数\n\tint sum = add(a, b);//调用时的a，b称为实际参数，简称实参\n\tcout << \"sum = \" << sum << endl;\n\n\ta = 100;\n\tb = 100;\n\n\tsum = add(a, b);\n\tcout << \"sum = \" << sum << endl;\n\n\tsystem(\"pause\");\n\n\treturn 0;\n}\n```\n\n> 总结：函数定义里小括号内称为形参，函数调用时传入的参数称为实参\n\n\n\n### 6.4 值传递\n\n* 所谓值传递，就是函数调用时实参将数值传入给形参\n* 值传递时，==如果形参发生，并不会影响实参==\n\n\n\n**示例：**\n\n```C++\nvoid swap(int num1, int num2)\n{\n\tcout << \"交换前：\" << endl;\n\tcout << \"num1 = \" << num1 << endl;\n\tcout << \"num2 = \" << num2 << endl;\n\n\tint temp = num1;\n\tnum1 = num2;\n\tnum2 = temp;\n\n\tcout << \"交换后：\" << endl;\n\tcout << \"num1 = \" << num1 << endl;\n\tcout << \"num2 = \" << num2 << endl;\n\n\t//return ; 当函数声明时候，不需要返回值，可以不写return\n}\n\nint main() {\n\n\tint a = 10;\n\tint b = 20;\n\n\tswap(a, b);\n\n\tcout << \"mian中的 a = \" << a << endl;\n\tcout << \"mian中的 b = \" << b << endl;\n\n\tsystem(\"pause\");\n\n\treturn 0;\n}\n```\n\n\n\n> 总结： 值传递时，形参是修饰不了实参的\n\n\n\n### **6.5 函数的常见样式**\n\n常见的函数样式有4种\n\n1. 无参无返\n2. 有参无返\n3. 无参有返\n4. 有参有返\n\n**示例：**\n\n```C++\n//函数常见样式\n//1、 无参无返\nvoid test01()\n{\n\t//void a = 10; //无类型不可以创建变量,原因无法分配内存\n\tcout << \"this is test01\" << endl;\n\t//test01(); 函数调用\n}\n\n//2、 有参无返\nvoid test02(int a)\n{\n\tcout << \"this is test02\" << endl;\n\tcout << \"a = \" << a << endl;\n}\n\n//3、无参有返\nint test03()\n{\n\tcout << \"this is test03 \" << endl;\n\treturn 10;\n}\n\n//4、有参有返\nint test04(int a, int b)\n{\n\tcout << \"this is test04 \" << endl;\n\tint sum = a + b;\n\treturn sum;\n}\n```\n\n\n\n\n### 6.6 函数的声明\n\n**作用：** 告诉编译器函数名称及如何调用函数。函数的实际主体可以单独定义。\n\n\n\n*  函数的**声明可以多次**，但是函数的**定义只能有一次**\n\n\n\n**示例：**\n\n```C++\n//声明可以多次，定义只能一次\n//声明\nint max(int a, int b);\nint max(int a, int b);\n//定义\nint max(int a, int b)\n{\n\treturn a > b ? a : b;\n}\n\nint main() {\n\n\tint a = 100;\n\tint b = 200;\n\n\tcout << max(a, b) << endl;\n\n\tsystem(\"pause\");\n\n\treturn 0;\n}\n```\n\n\n### 6.7 函数的分文件编写\n\n**作用：**让代码结构更加清晰\n\n函数分文件编写一般有4个步骤\n\n1. 创建后缀名为.h的头文件  \n2. 创建后缀名为.cpp的源文件\n3. 在头文件中写函数的声明\n4. 在源文件中写函数的定义\n\n**示例：**\n\n```C++\n//swap.h文件\n#include<iostream>\nusing namespace std;\n\n//实现两个数字交换的函数声明\nvoid swap(int a, int b);\n\n```\n\n```C++\n//swap.cpp文件\n#include \"swap.h\"\n\nvoid swap(int a, int b)\n{\n\tint temp = a;\n\ta = b;\n\tb = temp;\n\n\tcout << \"a = \" << a << endl;\n\tcout << \"b = \" << b << endl;\n}\n```\n\n```C++\n//main函数文件\n#include \"swap.h\"\nint main() {\n\n\tint a = 100;\n\tint b = 200;\n\tswap(a, b);\n\n\tsystem(\"pause\");\n\n\treturn 0;\n}\n\n```\n\n","slug":"六-函数","published":1,"updated":"2023-03-01T12:02:35.083Z","_id":"clifr2v1y002214uo75d70g37","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"6-函数\"><a href=\"#6-函数\" class=\"headerlink\" title=\"6 函数\"></a>6 函数</h2><h3 id=\"6-1-概述\"><a href=\"#6-1-概述\" class=\"headerlink\" title=\"6.1 概述\"></a>6.1 概述</h3><p><strong>作用：</strong>将一段经常使用的代码封装起来，减少重复代码</p>\n<p>一个较大的程序，一般分为若干个程序块，每个模块实现特定的功能。</p>\n<h3 id=\"6-2-函数的定义\"><a href=\"#6-2-函数的定义\" class=\"headerlink\" title=\"6.2 函数的定义\"></a>6.2 函数的定义</h3><p>函数的定义一般主要有5个步骤：</p>\n<p>1、返回值类型 </p>\n<p>2、函数名</p>\n<p>3、参数表列</p>\n<p>4、函数体语句 </p>\n<p>5、return 表达式</p>\n<p><strong>语法：</strong> </p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">返回值类型 函数名 （参数列表）</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">       函数体语句</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"keyword\">return</span>表达式</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<ul>\n<li>返回值类型 ：一个函数可以返回一个值。在函数定义中</li>\n<li>函数名：给函数起个名称</li>\n<li>参数列表：使用该函数时，传入的数据</li>\n<li>函数体语句：花括号内的代码，函数内需要执行的语句</li>\n<li>return表达式： 和返回值类型挂钩，函数执行完后，返回相应的数据</li>\n</ul>\n<p><strong>示例：</strong>定义一个加法函数，实现两个数相加</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//函数定义</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"type\">int</span> num1, <span class=\"type\">int</span> num2)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> sum = num1 + num2;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> sum;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"6-3-函数的调用\"><a href=\"#6-3-函数的调用\" class=\"headerlink\" title=\"6.3 函数的调用\"></a>6.3 函数的调用</h3><p><strong>功能：</strong>使用定义好的函数</p>\n<p><strong>语法：</strong><code> 函数名（参数）</code></p>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//函数定义</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"type\">int</span> num1, <span class=\"type\">int</span> num2)</span> <span class=\"comment\">//定义中的num1,num2称为形式参数，简称形参</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> sum = num1 + num2;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> sum;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"type\">int</span> a = <span class=\"number\">10</span>;</span><br><span class=\"line\">\t<span class=\"type\">int</span> b = <span class=\"number\">10</span>;</span><br><span class=\"line\">\t<span class=\"comment\">//调用add函数</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> sum = <span class=\"built_in\">add</span>(a, b);<span class=\"comment\">//调用时的a，b称为实际参数，简称实参</span></span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;sum = &quot;</span> &lt;&lt; sum &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">\ta = <span class=\"number\">100</span>;</span><br><span class=\"line\">\tb = <span class=\"number\">100</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\tsum = <span class=\"built_in\">add</span>(a, b);</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;sum = &quot;</span> &lt;&lt; sum &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">system</span>(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>总结：函数定义里小括号内称为形参，函数调用时传入的参数称为实参</p>\n</blockquote>\n<h3 id=\"6-4-值传递\"><a href=\"#6-4-值传递\" class=\"headerlink\" title=\"6.4 值传递\"></a>6.4 值传递</h3><ul>\n<li>所谓值传递，就是函数调用时实参将数值传入给形参</li>\n<li>值传递时，==如果形参发生，并不会影响实参==</li>\n</ul>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">swap</span><span class=\"params\">(<span class=\"type\">int</span> num1, <span class=\"type\">int</span> num2)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;交换前：&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;num1 = &quot;</span> &lt;&lt; num1 &lt;&lt; endl;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;num2 = &quot;</span> &lt;&lt; num2 &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"type\">int</span> temp = num1;</span><br><span class=\"line\">\tnum1 = num2;</span><br><span class=\"line\">\tnum2 = temp;</span><br><span class=\"line\"></span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;交换后：&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;num1 = &quot;</span> &lt;&lt; num1 &lt;&lt; endl;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;num2 = &quot;</span> &lt;&lt; num2 &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//return ; 当函数声明时候，不需要返回值，可以不写return</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"type\">int</span> a = <span class=\"number\">10</span>;</span><br><span class=\"line\">\t<span class=\"type\">int</span> b = <span class=\"number\">20</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">swap</span>(a, b);</span><br><span class=\"line\"></span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;mian中的 a = &quot;</span> &lt;&lt; a &lt;&lt; endl;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;mian中的 b = &quot;</span> &lt;&lt; b &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">system</span>(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<blockquote>\n<p>总结： 值传递时，形参是修饰不了实参的</p>\n</blockquote>\n<h3 id=\"6-5-函数的常见样式\"><a href=\"#6-5-函数的常见样式\" class=\"headerlink\" title=\"6.5 函数的常见样式\"></a><strong>6.5 函数的常见样式</strong></h3><p>常见的函数样式有4种</p>\n<ol>\n<li>无参无返</li>\n<li>有参无返</li>\n<li>无参有返</li>\n<li>有参有返</li>\n</ol>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//函数常见样式</span></span><br><span class=\"line\"><span class=\"comment\">//1、 无参无返</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">test01</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//void a = 10; //无类型不可以创建变量,原因无法分配内存</span></span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;this is test01&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\t<span class=\"comment\">//test01(); 函数调用</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//2、 有参无返</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">test02</span><span class=\"params\">(<span class=\"type\">int</span> a)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;this is test02&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;a = &quot;</span> &lt;&lt; a &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//3、无参有返</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">test03</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;this is test03 &quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">10</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//4、有参有返</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">test04</span><span class=\"params\">(<span class=\"type\">int</span> a, <span class=\"type\">int</span> b)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;this is test04 &quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\t<span class=\"type\">int</span> sum = a + b;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> sum;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n<h3 id=\"6-6-函数的声明\"><a href=\"#6-6-函数的声明\" class=\"headerlink\" title=\"6.6 函数的声明\"></a>6.6 函数的声明</h3><p><strong>作用：</strong> 告诉编译器函数名称及如何调用函数。函数的实际主体可以单独定义。</p>\n<ul>\n<li> 函数的<strong>声明可以多次</strong>，但是函数的<strong>定义只能有一次</strong></li>\n</ul>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//声明可以多次，定义只能一次</span></span><br><span class=\"line\"><span class=\"comment\">//声明</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">max</span><span class=\"params\">(<span class=\"type\">int</span> a, <span class=\"type\">int</span> b)</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">max</span><span class=\"params\">(<span class=\"type\">int</span> a, <span class=\"type\">int</span> b)</span></span>;</span><br><span class=\"line\"><span class=\"comment\">//定义</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">max</span><span class=\"params\">(<span class=\"type\">int</span> a, <span class=\"type\">int</span> b)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> a &gt; b ? a : b;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"type\">int</span> a = <span class=\"number\">100</span>;</span><br><span class=\"line\">\t<span class=\"type\">int</span> b = <span class=\"number\">200</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"built_in\">max</span>(a, b) &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">system</span>(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"6-7-函数的分文件编写\"><a href=\"#6-7-函数的分文件编写\" class=\"headerlink\" title=\"6.7 函数的分文件编写\"></a>6.7 函数的分文件编写</h3><p><strong>作用：</strong>让代码结构更加清晰</p>\n<p>函数分文件编写一般有4个步骤</p>\n<ol>\n<li>创建后缀名为.h的头文件  </li>\n<li>创建后缀名为.cpp的源文件</li>\n<li>在头文件中写函数的声明</li>\n<li>在源文件中写函数的定义</li>\n</ol>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//swap.h文件</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//实现两个数字交换的函数声明</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">swap</span><span class=\"params\">(<span class=\"type\">int</span> a, <span class=\"type\">int</span> b)</span></span>;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//swap.cpp文件</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;swap.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">swap</span><span class=\"params\">(<span class=\"type\">int</span> a, <span class=\"type\">int</span> b)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> temp = a;</span><br><span class=\"line\">\ta = b;</span><br><span class=\"line\">\tb = temp;</span><br><span class=\"line\"></span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;a = &quot;</span> &lt;&lt; a &lt;&lt; endl;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;b = &quot;</span> &lt;&lt; b &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//main函数文件</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;swap.h&quot;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"type\">int</span> a = <span class=\"number\">100</span>;</span><br><span class=\"line\">\t<span class=\"type\">int</span> b = <span class=\"number\">200</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">swap</span>(a, b);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">system</span>(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"6-函数\"><a href=\"#6-函数\" class=\"headerlink\" title=\"6 函数\"></a>6 函数</h2><h3 id=\"6-1-概述\"><a href=\"#6-1-概述\" class=\"headerlink\" title=\"6.1 概述\"></a>6.1 概述</h3><p><strong>作用：</strong>将一段经常使用的代码封装起来，减少重复代码</p>\n<p>一个较大的程序，一般分为若干个程序块，每个模块实现特定的功能。</p>\n<h3 id=\"6-2-函数的定义\"><a href=\"#6-2-函数的定义\" class=\"headerlink\" title=\"6.2 函数的定义\"></a>6.2 函数的定义</h3><p>函数的定义一般主要有5个步骤：</p>\n<p>1、返回值类型 </p>\n<p>2、函数名</p>\n<p>3、参数表列</p>\n<p>4、函数体语句 </p>\n<p>5、return 表达式</p>\n<p><strong>语法：</strong> </p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">返回值类型 函数名 （参数列表）</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">       函数体语句</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"keyword\">return</span>表达式</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<ul>\n<li>返回值类型 ：一个函数可以返回一个值。在函数定义中</li>\n<li>函数名：给函数起个名称</li>\n<li>参数列表：使用该函数时，传入的数据</li>\n<li>函数体语句：花括号内的代码，函数内需要执行的语句</li>\n<li>return表达式： 和返回值类型挂钩，函数执行完后，返回相应的数据</li>\n</ul>\n<p><strong>示例：</strong>定义一个加法函数，实现两个数相加</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//函数定义</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"type\">int</span> num1, <span class=\"type\">int</span> num2)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> sum = num1 + num2;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> sum;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"6-3-函数的调用\"><a href=\"#6-3-函数的调用\" class=\"headerlink\" title=\"6.3 函数的调用\"></a>6.3 函数的调用</h3><p><strong>功能：</strong>使用定义好的函数</p>\n<p><strong>语法：</strong><code> 函数名（参数）</code></p>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//函数定义</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"type\">int</span> num1, <span class=\"type\">int</span> num2)</span> <span class=\"comment\">//定义中的num1,num2称为形式参数，简称形参</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> sum = num1 + num2;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> sum;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"type\">int</span> a = <span class=\"number\">10</span>;</span><br><span class=\"line\">\t<span class=\"type\">int</span> b = <span class=\"number\">10</span>;</span><br><span class=\"line\">\t<span class=\"comment\">//调用add函数</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> sum = <span class=\"built_in\">add</span>(a, b);<span class=\"comment\">//调用时的a，b称为实际参数，简称实参</span></span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;sum = &quot;</span> &lt;&lt; sum &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">\ta = <span class=\"number\">100</span>;</span><br><span class=\"line\">\tb = <span class=\"number\">100</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\tsum = <span class=\"built_in\">add</span>(a, b);</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;sum = &quot;</span> &lt;&lt; sum &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">system</span>(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>总结：函数定义里小括号内称为形参，函数调用时传入的参数称为实参</p>\n</blockquote>\n<h3 id=\"6-4-值传递\"><a href=\"#6-4-值传递\" class=\"headerlink\" title=\"6.4 值传递\"></a>6.4 值传递</h3><ul>\n<li>所谓值传递，就是函数调用时实参将数值传入给形参</li>\n<li>值传递时，==如果形参发生，并不会影响实参==</li>\n</ul>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">swap</span><span class=\"params\">(<span class=\"type\">int</span> num1, <span class=\"type\">int</span> num2)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;交换前：&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;num1 = &quot;</span> &lt;&lt; num1 &lt;&lt; endl;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;num2 = &quot;</span> &lt;&lt; num2 &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"type\">int</span> temp = num1;</span><br><span class=\"line\">\tnum1 = num2;</span><br><span class=\"line\">\tnum2 = temp;</span><br><span class=\"line\"></span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;交换后：&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;num1 = &quot;</span> &lt;&lt; num1 &lt;&lt; endl;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;num2 = &quot;</span> &lt;&lt; num2 &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//return ; 当函数声明时候，不需要返回值，可以不写return</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"type\">int</span> a = <span class=\"number\">10</span>;</span><br><span class=\"line\">\t<span class=\"type\">int</span> b = <span class=\"number\">20</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">swap</span>(a, b);</span><br><span class=\"line\"></span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;mian中的 a = &quot;</span> &lt;&lt; a &lt;&lt; endl;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;mian中的 b = &quot;</span> &lt;&lt; b &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">system</span>(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<blockquote>\n<p>总结： 值传递时，形参是修饰不了实参的</p>\n</blockquote>\n<h3 id=\"6-5-函数的常见样式\"><a href=\"#6-5-函数的常见样式\" class=\"headerlink\" title=\"6.5 函数的常见样式\"></a><strong>6.5 函数的常见样式</strong></h3><p>常见的函数样式有4种</p>\n<ol>\n<li>无参无返</li>\n<li>有参无返</li>\n<li>无参有返</li>\n<li>有参有返</li>\n</ol>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//函数常见样式</span></span><br><span class=\"line\"><span class=\"comment\">//1、 无参无返</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">test01</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//void a = 10; //无类型不可以创建变量,原因无法分配内存</span></span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;this is test01&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\t<span class=\"comment\">//test01(); 函数调用</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//2、 有参无返</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">test02</span><span class=\"params\">(<span class=\"type\">int</span> a)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;this is test02&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;a = &quot;</span> &lt;&lt; a &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//3、无参有返</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">test03</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;this is test03 &quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">10</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//4、有参有返</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">test04</span><span class=\"params\">(<span class=\"type\">int</span> a, <span class=\"type\">int</span> b)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;this is test04 &quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\t<span class=\"type\">int</span> sum = a + b;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> sum;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n<h3 id=\"6-6-函数的声明\"><a href=\"#6-6-函数的声明\" class=\"headerlink\" title=\"6.6 函数的声明\"></a>6.6 函数的声明</h3><p><strong>作用：</strong> 告诉编译器函数名称及如何调用函数。函数的实际主体可以单独定义。</p>\n<ul>\n<li> 函数的<strong>声明可以多次</strong>，但是函数的<strong>定义只能有一次</strong></li>\n</ul>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//声明可以多次，定义只能一次</span></span><br><span class=\"line\"><span class=\"comment\">//声明</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">max</span><span class=\"params\">(<span class=\"type\">int</span> a, <span class=\"type\">int</span> b)</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">max</span><span class=\"params\">(<span class=\"type\">int</span> a, <span class=\"type\">int</span> b)</span></span>;</span><br><span class=\"line\"><span class=\"comment\">//定义</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">max</span><span class=\"params\">(<span class=\"type\">int</span> a, <span class=\"type\">int</span> b)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> a &gt; b ? a : b;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"type\">int</span> a = <span class=\"number\">100</span>;</span><br><span class=\"line\">\t<span class=\"type\">int</span> b = <span class=\"number\">200</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"built_in\">max</span>(a, b) &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">system</span>(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"6-7-函数的分文件编写\"><a href=\"#6-7-函数的分文件编写\" class=\"headerlink\" title=\"6.7 函数的分文件编写\"></a>6.7 函数的分文件编写</h3><p><strong>作用：</strong>让代码结构更加清晰</p>\n<p>函数分文件编写一般有4个步骤</p>\n<ol>\n<li>创建后缀名为.h的头文件  </li>\n<li>创建后缀名为.cpp的源文件</li>\n<li>在头文件中写函数的声明</li>\n<li>在源文件中写函数的定义</li>\n</ol>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//swap.h文件</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//实现两个数字交换的函数声明</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">swap</span><span class=\"params\">(<span class=\"type\">int</span> a, <span class=\"type\">int</span> b)</span></span>;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//swap.cpp文件</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;swap.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">swap</span><span class=\"params\">(<span class=\"type\">int</span> a, <span class=\"type\">int</span> b)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> temp = a;</span><br><span class=\"line\">\ta = b;</span><br><span class=\"line\">\tb = temp;</span><br><span class=\"line\"></span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;a = &quot;</span> &lt;&lt; a &lt;&lt; endl;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;b = &quot;</span> &lt;&lt; b &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//main函数文件</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;swap.h&quot;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"type\">int</span> a = <span class=\"number\">100</span>;</span><br><span class=\"line\">\t<span class=\"type\">int</span> b = <span class=\"number\">200</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">swap</span>(a, b);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">system</span>(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n"},{"title":"四.程序流程结构","author":"连思鑫","date":"2023-03-01T11:03:00.000Z","_content":"## 4 程序流程结构\n\nC/C++支持最基本的三种程序运行结构：==顺序结构、选择结构、循环结构==\n\n* 顺序结构：程序按顺序执行，不发生跳转\n* 选择结构：依据条件是否满足，有选择的执行相应功能\n* 循环结构：依据条件是否满足，循环多次执行某段代码\n\n\n\n### 4.1 选择结构\n\n#### 4.1.1 if语句\n\n**作用：**执行满足条件的语句\n\nif语句的三种形式\n\n* 单行格式if语句\n\n* 多行格式if语句\n\n* 多条件的if语句\n\n  \n\n1. 单行格式if语句：`if(条件){ 条件满足执行的语句 }`\n\n   ![img](/assets/clip_image002.png)\n\n   示例：\n\n   ```C++\n   int main() {\n   \n   \t//选择结构-单行if语句\n   \t//输入一个分数，如果分数大于600分，视为考上一本大学，并在屏幕上打印\n   \n   \tint score = 0;\n   \tcout << \"请输入一个分数：\" << endl;\n   \tcin >> score;\n   \n   \tcout << \"您输入的分数为： \" << score << endl;\n   \n   \t//if语句\n   \t//注意事项，在if判断语句后面，不要加分号\n   \tif (score > 600)\n   \t{\n   \t\tcout << \"我考上了一本大学！！！\" << endl;\n   \t}\n   \n   \tsystem(\"pause\");\n   \n   \treturn 0;\n   }\n   ```\n\n\n\n> 注意：if条件表达式后不要加分号\n\n\n\n\n\n\n\n2. 多行格式if语句：`if(条件){ 条件满足执行的语句 }else{ 条件不满足执行的语句 };`\n\n![img](/assets/clip_image002-1541662519170.png)\n\n\n\n示例：\n\n```C++\nint main() {\n\n\tint score = 0;\n\n\tcout << \"请输入考试分数：\" << endl;\n\n\tcin >> score;\n\n\tif (score > 600)\n\t{\n\t\tcout << \"我考上了一本大学\" << endl;\n\t}\n\telse\n\t{\n\t\tcout << \"我未考上一本大学\" << endl;\n\t}\n\n\tsystem(\"pause\");\n\n\treturn 0;\n}\n```\n\n\n\n\n\n\n\n\n\n\n\n3. 多条件的if语句：`if(条件1){ 条件1满足执行的语句 }else if(条件2){条件2满足执行的语句}... else{ 都不满足执行的语句}`\n\n![img](/assets/clip_image002-1541662566808.png)\n\n\n\n\n\n\n\n示例：\n\n```C++\n\tint main() {\n\n\tint score = 0;\n\n\tcout << \"请输入考试分数：\" << endl;\n\n\tcin >> score;\n\n\tif (score > 600)\n\t{\n\t\tcout << \"我考上了一本大学\" << endl;\n\t}\n\telse if (score > 500)\n\t{\n\t\tcout << \"我考上了二本大学\" << endl;\n\t}\n\telse if (score > 400)\n\t{\n\t\tcout << \"我考上了三本大学\" << endl;\n\t}\n\telse\n\t{\n\t\tcout << \"我未考上本科\" << endl;\n\t}\n\n\tsystem(\"pause\");\n\n\treturn 0;\n}\n```\n\n\n\n\n\n\n\n\n\n**嵌套if语句**：在if语句中，可以嵌套使用if语句，达到更精确的条件判断\n\n\n\n案例需求：\n\n* 提示用户输入一个高考考试分数，根据分数做如下判断\n* 分数如果大于600分视为考上一本，大于500分考上二本，大于400考上三本，其余视为未考上本科；\n* 在一本分数中，如果大于700分，考入北大，大于650分，考入清华，大于600考入人大。\n\n\n\n**示例：**\n\n```c++\nint main() {\n\n\tint score = 0;\n\n\tcout << \"请输入考试分数：\" << endl;\n\n\tcin >> score;\n\n\tif (score > 600)\n\t{\n\t\tcout << \"我考上了一本大学\" << endl;\n\t\tif (score > 700)\n\t\t{\n\t\t\tcout << \"我考上了北大\" << endl;\n\t\t}\n\t\telse if (score > 650)\n\t\t{\n\t\t\tcout << \"我考上了清华\" << endl;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tcout << \"我考上了人大\" << endl;\n\t\t}\n\t\t\n\t}\n\telse if (score > 500)\n\t{\n\t\tcout << \"我考上了二本大学\" << endl;\n\t}\n\telse if (score > 400)\n\t{\n\t\tcout << \"我考上了三本大学\" << endl;\n\t}\n\telse\n\t{\n\t\tcout << \"我未考上本科\" << endl;\n\t}\n\n\tsystem(\"pause\");\n\n\treturn 0;\n}\n```\n\n\n\n\n\n\n\n**练习案例：** 三只小猪称体重\n\n有三只小猪ABC，请分别输入三只小猪的体重，并且判断哪只小猪最重？![三只小猪](/assets/三只小猪.jpg)\n\n\n代码实现如下：\n```c++\n#include<iostream>\nusing namespace std; \n\nint main(){\n\n//三只小猪称体重   \n//变量初始化三只小猪的体重\n\tint pig1 = 0;\n\tint pig2 = 0;\n\tint pig3 = 0;\n//让用户输入小猪的重量\n\tcout << \"请输入小猪1的体重：\"<<endl;\n\tcin >> pig1;\n\n\tcout << \"请输入小猪2的体重：\"<<endl;\n\tcin >> pig2;\n\n\tcout << \"请输入小猪3的体重：\"<<endl;\n\tcin >> pig3;\n\n\tcout << \"小猪1的体重为：\" << pig1 << \"斤\" <<endl;\n\tcout << \"小猪2的体重为：\" << pig2 << \"斤\" <<endl;\n\tcout << \"小猪3的体重为：\" << pig3 << \"斤\" <<endl;\n//判断哪支小猪是最重的\n\t//先判断A和B的体重\n\tif(pig1 > pig2)        //A和B比重\n\t{\t//A比B重\t\n\t\tif(pig1 > pig3)\n\t\t{   // A比C重\n\t\t cout <<\"小猪1最重\"<<endl;  \n\t\t}\n\t\t else\n\t\t {     \n\t      cout <<\"小猪3最重\"<<endl;\n\t      }\n\t}\n\telse{                   //B比A重\n\t\tif(pig2 > pig3)\n\t\t{\n\t\t cout <<\"小猪2最重\"<<endl;\t\t\n\t\t}\n\t\telse{\n\t\t cout <<\"小猪3最重\"<<endl;\t\t\n\t\t}\n\t}\n   system(\"pause\");\n   return 0;\n\n}\n```\n\n\n\n\n\n\n\n#### 4.1.2 三目运算符\n\n**作用：** 通过三目运算符实现简单的判断\n\n**语法：**`表达式1 ? 表达式2 ：表达式3`\n\n**解释：**\n\n如果表达式1的值为真，执行表达式2，并返回表达式2的结果；\n\n如果表达式1的值为假，执行表达式3，并返回表达式3的结果。\n\n**示例：**\n\n```C++\nint main() {\n\n\tint a = 10;\n\tint b = 20;\n\tint c = 0;\n\n\tc = a > b ? a : b;\n\tcout << \"c = \" << c << endl;\n\n\t//C++中三目运算符返回的是变量,可以继续赋值\n\n\t(a > b ? a : b) = 100;\n\n\tcout << \"a = \" << a << endl;\n\tcout << \"b = \" << b << endl;\n\tcout << \"c = \" << c << endl;\n\n\tsystem(\"pause\");\n\n\treturn 0;\n}\n```\n\n> 总结：和if语句比较，三目运算符优点是短小整洁，缺点是如果用嵌套，结构不清晰\n\n\n\n\n\n\n#### 4.1.3 switch语句\n\n**作用：**执行多条件分支语句\n\n**语法：**\n\n```C++\nswitch(表达式)\n\n{\n\n\tcase 结果1：执行语句;break;\n\n\tcase 结果2：执行语句;break;\n\n\t...\n\n\tdefault:执行语句;break;\n\n}\n\n```\n\n\n\n\n\n\n\n**示例：**\n\n```C++\nint main() {\n\n\t//请给电影评分 \n\t//10 ~ 9   经典   \n\t// 8 ~ 7   非常好\n\t// 6 ~ 5   一般\n\t// 5分以下 烂片\n\n\tint score = 0;\n\tcout << \"请给电影打分\" << endl;\n\tcin >> score;\n\n\tswitch (score)\n\t{\n\tcase 10:\n\tcase 9:\n\t\tcout << \"经典\" << endl;\n\t\tbreak;\n\tcase 8:\n\t\tcout << \"非常好\" << endl;\n\t\tbreak;\n\tcase 7:\n\tcase 6:\n\t\tcout << \"一般\" << endl;\n\t\tbreak;\n\tdefault:\n\t\tcout << \"烂片\" << endl;\n\t\tbreak;\n\t}\n\n\tsystem(\"pause\");\n\n\treturn 0;\n}\n```\n\n\n\n> 注意1：switch语句中表达式类型只能是整型或者字符型\n\n> 注意2：case里如果没有break，那么程序会一直向下执行\n\n> 总结：与if语句比，对于多条件判断时，switch的结构清晰，执行效率高，缺点是switch不可以判断区间\n\n\n\n\n\n\n\n\n\n### 4.2 循环结构\n\n#### 4.2.1 while循环语句\n\n**作用：**满足循环条件，执行循环语句\n\n**语法：**` while(循环条件){ 循环语句 }`\n\n**解释：**==只要循环条件的结果为真，就执行循环语句==\n\n![img](/assets/clip_image002-1541668640382.png)\n\n\n\n\n\n\n\n**示例：**\n\n```C++\nint main() {\n\n\tint num = 0;\n\twhile (num < 10)\n\t{\n\t\tcout << \"num = \" << num << endl;\n\t\tnum++;\n\t}\n\t\n\tsystem(\"pause\");\n\n\treturn 0;\n}\n```\n\n\n\n> 注意：在执行循环语句时候，程序必须提供跳出循环的出口，否则出现死循环\n\n\n\n\n\n\n\n\n\n**while循环练习案例：**==猜数字==\n\n**案例描述：**系统随机生成一个1到100之间的数字，玩家进行猜测，如果猜错，提示玩家数字过大或过小，如果猜对恭喜玩家胜利，并且退出游戏。\n\n\n\n![猜数字](/assets/猜数字.jpg)\n\n\n代码实现如下：\n```c++\n#include <iostream>\nusing namespace std;\n//time系统时间头文件包含\n#include <ctime>\nint main() {\n\t//添加随机数种子  利用当前系统时间生成随机数，防止每次随机数都一样\n\tsrand((unsigned int)time(NULL));\n\t//1.系统生成随机数\n\tint num=rand()%100+1;  // rand()%100 生成0+1~99+1的随机数\n\tcout<<num<<endl;\n\t\n\t//2.玩家进行猜测\n\tint val=0;\n\twhile(1){\n\t\tcin>>val;\n\t\t//3.判断玩家的猜测\n\t\tif(val>num){\n\t\t\t//猜错  提示猜的结果 过大或者过小 重新返回第2步\n\t\t\tcout<<\"猜测过大\"<<endl;\n\t\t}else if(val<num){\n\t\t\t//猜错  提示猜的结果 过大或者过小 重新返回第2步\n\t\t\tcout<<\"猜测过小\"<<endl;\n\t\t}else{\n\t\t\t//猜对  退出游戏\n\t\t\tcout<<\"恭喜您猜对啦\"<<endl;\n\t\t\tbreak;\n\t\t}\n\t}\t\n\tsystem(\"pause\");\n \n\treturn 0;\n}\n```\n\n\n\n#### 4.2.2 do...while循环语句\n\n**作用：** 满足循环条件，执行循环语句\n\n**语法：** `do{ 循环语句 } while(循环条件);`\n\n**注意：**与while的区别在于==do...while会先执行一次循环语句==，再判断循环条件\n\n![img](/assets/clip_image002-1541671163478.png)\n\n\n\n**示例：**\n\n```C++\nint main() {\n\n\tint num = 0;\n\n\tdo\n\t{\n\t\tcout << num << endl;\n\t\tnum++;\n\n\t} while (num < 10);\n\t\n\t\n\tsystem(\"pause\");\n\n\treturn 0;\n}\n```\n\n\n\n> 总结：与while循环区别在于，do...while先执行一次循环语句，再判断循环条件\n\n\n\n\n\n\n**练习案例：水仙花数**\n\n**案例描述：**水仙花数是指一个 3 位数，它的每个位上的数字的 3次幂之和等于它本身\n\n例如：1^3 + 5^3+ 3^3 = 153\n\n请利用do...while语句，求出所有3位数中的水仙花数\n\n\n代码实现：\n\n方法一\n```c++\n#include <iostream>\n#include <cmath>\nusing namespace std;\n \nint main(int argc, const char * argv[]) {\n    int n, unit, ten, hund; // unit, ten, hund分别存储个位、十位和百位的数字\n    \n    for(n = 100; n < 1000; n++) {\n        unit = n % 10; // 得到n的个位数字\n        ten = (n / 10) % 10; // 得到n的十位数字\n        hund = n / 100; // 得到n的百位数字\n        // 判断各位数字的立方和是否等于它本身\n        if(n == hund * hund * hund + ten * ten * ten + unit * unit * unit)\n        // if(n == pow(hund, 3) + pow(ten, 3) + pow(unit, 3))\n            cout << n << \" \";\n    }\n    cout << endl;\n    return 0;\n}\n```\n\n方法二\n\n```c++\n#include <iostream>\nusing namespace std;\n \nint main(int argc, const char * argv[]) {\n    int sum;\n    \n    for(int i = 1; i < 10; i++)\n        for(int j = 0; j < 10; j++)\n            for(int k = 0; k < 10; k++) {\n                sum = i * 100 + j * 10 + k;\n                if(sum == (i * i * i + j * j * j + k * k * k))\n                    cout << sum << \" \";\n            }\n    cout << endl;\n    return 0;\n}\n```\n\ndo...while实现\n\n```c++\n#include <iostream>\nusing namespace std;\nint main() {\n\tint num = 100;\n\tdo\n\t{\n\t\tint a = num % 10;\n\t\tint b = (num % 100) / 10;\n\t\tint c = num / 100;\n\t\tif (a*a*a + b*b*b + c*c*c == num) \n\t\t{\n\t\t\tcout << \"水仙数是：\" << num << endl;\n\t\t}\n\n\t\tnum++;\n\n\t} while (num < 999);\n\t\n\n\tsystem(\"pause\");\n\n\treturn 0;\n}\n```\n\n\n\n\n#### 4.2.3 for循环语句\n\n**作用：** 满足循环条件，执行循环语句\n\n**语法：**` for(起始表达式;条件表达式;末尾循环体) { 循环语句; }`\n\n\n\n**示例：**\n\n```C++\nint main() {\n\n\tfor (int i = 0; i < 10; i++)\n\t{\n\t\tcout << i << endl;\n\t}\n\t\n\tsystem(\"pause\");\n\n\treturn 0;\n}\n```\n\n\n\n\n**详解：**\n\n![1541673704101](/assets/1541673704101.png)\n\n\n\n> 注意：for循环中的表达式，要用分号进行分隔\n\n> 总结：while , do...while, for都是开发中常用的循环语句，for循环结构比较清晰，比较常用\n\n\n\n\n\n\n\n\n**练习案例：敲桌子**\n\n案例描述：从1开始数到数字100， 如果数字个位含有7，或者数字十位含有7，或者该数字是7的倍数，我们打印敲桌子，其余数字直接打印输出。\n\n![timg](/assets/timg.gif)\n\n代码实现\n```c++\n#include <iostream>\nusing namespace std;\n \nint main() {\n\tint num;\n\tfor (num = 1; num<= 100; num++) {\n\t\tif (num < 10)\n\t\t\tif (num == 7 || num % 7 == 0)\n\t\t\t\tcout << \"敲桌子\" << endl;\n\t\t\telse\n\t\t\t\tcout << num << endl;\n\t\telse if (num < 100)\n\t\t\tif (num % 10 == 7 || num / 10 == 7 || num % 7 == 0)\n\t\t\t\tcout << \"敲桌子\" << endl;\n\t\t\telse\n\t\t\t\tcout << num << endl;\n\t\telse\n\t\t\tif (num % 10 == 7 || (num / 10) % 10 == 7 || num % 7 == 0)\n\t\t\t\tcout << \"敲桌子\" << endl;\n\t\t\telse\n\t\t\t\tcout << num << endl;\n \n\t}\n\tsystem(\"pause\");\n\treturn 0;\n \n}\n```\n\n\n\n\n\n#### 4.2.4 嵌套循环\n\n**作用：** 在循环体中再嵌套一层循环，解决一些实际问题\n\n例如我们想在屏幕中打印如下图片，就需要利用嵌套循环\n\n![1541676003486](/assets/1541676003486.png)\n\n\n\n\n\n**示例：**\n\n```C++\nint main() {\n\n\t//外层循环执行1次，内层循环执行1轮\n\tfor (int i = 0; i < 10; i++)\n\t{\n\t\tfor (int j = 0; j < 10; j++)\n\t\t{\n\t\t\tcout << \"*\" << \" \";\n\t\t}\n\t\tcout << endl;\n\t}\n\n\tsystem(\"pause\");\n\n\treturn 0;\n}\n```\n\n\n\n**练习案例：**乘法口诀表\n\n案例描述：利用嵌套循环，实现九九乘法表\n\n![0006018857256120_b](/assets/0006018857256120_b.jpg)\n\n代码实现\n```c++\n#include<iostream>\nusing namespace std;\n\nint main() {\n\t//嵌套循环实现九九乘法表\n\tfor (int i = 1; i < 10; i++) {   \n\n\n\t\tfor (int j = 1; j <= i; j++) {   \n\n\t\t\tcout <<i<< \" * \"<<j<<\" = \"<<i * j<<\" \";\n\n\t\t}\n\t\tcout << endl;//换行\n\n\t}\n\n\tsystem(\"pause\");\n\n\treturn 0;\n}\n```\n\n\n\n### 4.3 跳转语句\n\n#### 4.3.1 break语句\n\n**作用:** 用于跳出==选择结构==或者==循环结构==\n\nbreak使用的时机：\n\n* 出现在switch条件语句中，作用是终止case并跳出switch\n* 出现在循环语句中，作用是跳出当前的循环语句\n* 出现在嵌套循环中，跳出最近的内层循环语句\n\n\n\n**示例1：**\n\n```C++\nint main() {\n\t//1、在switch 语句中使用break\n\tcout << \"请选择您挑战副本的难度：\" << endl;\n\tcout << \"1、普通\" << endl;\n\tcout << \"2、中等\" << endl;\n\tcout << \"3、困难\" << endl;\n\n\tint num = 0;\n\n\tcin >> num;\n\n\tswitch (num)\n\t{\n\tcase 1:\n\t\tcout << \"您选择的是普通难度\" << endl;\n\t\tbreak;\n\tcase 2:\n\t\tcout << \"您选择的是中等难度\" << endl;\n\t\tbreak;\n\tcase 3:\n\t\tcout << \"您选择的是困难难度\" << endl;\n\t\tbreak;\n\t}\n\n\tsystem(\"pause\");\n\n\treturn 0;\n}\n```\n\n\n\n**示例2：**\n\n```C++\nint main() {\n\t//2、在循环语句中用break\n\tfor (int i = 0; i < 10; i++)\n\t{\n\t\tif (i == 5)\n\t\t{\n\t\t\tbreak; //跳出循环语句\n\t\t}\n\t\tcout << i << endl;\n\t}\n\n\tsystem(\"pause\");\n\n\treturn 0;\n}\n```\n\n\n\n**示例3：**\n\n```C++\nint main() {\n\t//在嵌套循环语句中使用break，退出内层循环\n\tfor (int i = 0; i < 10; i++)\n\t{\n\t\tfor (int j = 0; j < 10; j++)\n\t\t{\n\t\t\tif (j == 5)\n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcout << \"*\" << \" \";\n\t\t}\n\t\tcout << endl;\n\t}\n\t\n\tsystem(\"pause\");\n\n\treturn 0;\n}\n```\n\n\n\n\n\n#### 4.3.2 continue语句\n\n**作用：**在==循环语句==中，跳过本次循环中余下尚未执行的语句，继续执行下一次循环\n\n**示例：**\n\n```C++\nint main() {\n\n\tfor (int i = 0; i < 100; i++)\n\t{\n\t\tif (i % 2 == 0)\n\t\t{\n\t\t\tcontinue;\n\t\t}\n\t\tcout << i << endl;\n\t}\n\t\n\tsystem(\"pause\");\n\n\treturn 0;\n}\n```\n\n\n\n> 注意：continue并没有使整个循环终止，而break会跳出循环\n\n\n\n\n\n\n#### 4.3.3 goto语句\n\n**作用：**可以无条件跳转语句\n\n\n\n**语法：** `goto 标记;`\n\n**解释：**如果标记的名称存在，执行到goto语句时，会跳转到标记的位置\n\n\n\n**示例：**\n\n```C++\nint main() {\n\n\tcout << \"1\" << endl;\n\n\tgoto FLAG;\n\n\tcout << \"2\" << endl;\n\tcout << \"3\" << endl;\n\tcout << \"4\" << endl;\n\n\tFLAG:\n\n\tcout << \"5\" << endl;\n\t\n\tsystem(\"pause\");\n\n\treturn 0;\n}\n```\n\n\n\n> 注意：在程序中不建议使用goto语句，以免造成程序流程混乱\n\n","source":"_posts/四-程序流程结构.md","raw":"title: 四.程序流程结构\nauthor: 连思鑫\ntags:\n  - c++\n  - 流程结构\ncategories:\n  - ..\n  - C++\n  - C++基础教程\n  - ''\ndate: 2023-03-01 19:03:00\n---\n## 4 程序流程结构\n\nC/C++支持最基本的三种程序运行结构：==顺序结构、选择结构、循环结构==\n\n* 顺序结构：程序按顺序执行，不发生跳转\n* 选择结构：依据条件是否满足，有选择的执行相应功能\n* 循环结构：依据条件是否满足，循环多次执行某段代码\n\n\n\n### 4.1 选择结构\n\n#### 4.1.1 if语句\n\n**作用：**执行满足条件的语句\n\nif语句的三种形式\n\n* 单行格式if语句\n\n* 多行格式if语句\n\n* 多条件的if语句\n\n  \n\n1. 单行格式if语句：`if(条件){ 条件满足执行的语句 }`\n\n   ![img](/assets/clip_image002.png)\n\n   示例：\n\n   ```C++\n   int main() {\n   \n   \t//选择结构-单行if语句\n   \t//输入一个分数，如果分数大于600分，视为考上一本大学，并在屏幕上打印\n   \n   \tint score = 0;\n   \tcout << \"请输入一个分数：\" << endl;\n   \tcin >> score;\n   \n   \tcout << \"您输入的分数为： \" << score << endl;\n   \n   \t//if语句\n   \t//注意事项，在if判断语句后面，不要加分号\n   \tif (score > 600)\n   \t{\n   \t\tcout << \"我考上了一本大学！！！\" << endl;\n   \t}\n   \n   \tsystem(\"pause\");\n   \n   \treturn 0;\n   }\n   ```\n\n\n\n> 注意：if条件表达式后不要加分号\n\n\n\n\n\n\n\n2. 多行格式if语句：`if(条件){ 条件满足执行的语句 }else{ 条件不满足执行的语句 };`\n\n![img](/assets/clip_image002-1541662519170.png)\n\n\n\n示例：\n\n```C++\nint main() {\n\n\tint score = 0;\n\n\tcout << \"请输入考试分数：\" << endl;\n\n\tcin >> score;\n\n\tif (score > 600)\n\t{\n\t\tcout << \"我考上了一本大学\" << endl;\n\t}\n\telse\n\t{\n\t\tcout << \"我未考上一本大学\" << endl;\n\t}\n\n\tsystem(\"pause\");\n\n\treturn 0;\n}\n```\n\n\n\n\n\n\n\n\n\n\n\n3. 多条件的if语句：`if(条件1){ 条件1满足执行的语句 }else if(条件2){条件2满足执行的语句}... else{ 都不满足执行的语句}`\n\n![img](/assets/clip_image002-1541662566808.png)\n\n\n\n\n\n\n\n示例：\n\n```C++\n\tint main() {\n\n\tint score = 0;\n\n\tcout << \"请输入考试分数：\" << endl;\n\n\tcin >> score;\n\n\tif (score > 600)\n\t{\n\t\tcout << \"我考上了一本大学\" << endl;\n\t}\n\telse if (score > 500)\n\t{\n\t\tcout << \"我考上了二本大学\" << endl;\n\t}\n\telse if (score > 400)\n\t{\n\t\tcout << \"我考上了三本大学\" << endl;\n\t}\n\telse\n\t{\n\t\tcout << \"我未考上本科\" << endl;\n\t}\n\n\tsystem(\"pause\");\n\n\treturn 0;\n}\n```\n\n\n\n\n\n\n\n\n\n**嵌套if语句**：在if语句中，可以嵌套使用if语句，达到更精确的条件判断\n\n\n\n案例需求：\n\n* 提示用户输入一个高考考试分数，根据分数做如下判断\n* 分数如果大于600分视为考上一本，大于500分考上二本，大于400考上三本，其余视为未考上本科；\n* 在一本分数中，如果大于700分，考入北大，大于650分，考入清华，大于600考入人大。\n\n\n\n**示例：**\n\n```c++\nint main() {\n\n\tint score = 0;\n\n\tcout << \"请输入考试分数：\" << endl;\n\n\tcin >> score;\n\n\tif (score > 600)\n\t{\n\t\tcout << \"我考上了一本大学\" << endl;\n\t\tif (score > 700)\n\t\t{\n\t\t\tcout << \"我考上了北大\" << endl;\n\t\t}\n\t\telse if (score > 650)\n\t\t{\n\t\t\tcout << \"我考上了清华\" << endl;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tcout << \"我考上了人大\" << endl;\n\t\t}\n\t\t\n\t}\n\telse if (score > 500)\n\t{\n\t\tcout << \"我考上了二本大学\" << endl;\n\t}\n\telse if (score > 400)\n\t{\n\t\tcout << \"我考上了三本大学\" << endl;\n\t}\n\telse\n\t{\n\t\tcout << \"我未考上本科\" << endl;\n\t}\n\n\tsystem(\"pause\");\n\n\treturn 0;\n}\n```\n\n\n\n\n\n\n\n**练习案例：** 三只小猪称体重\n\n有三只小猪ABC，请分别输入三只小猪的体重，并且判断哪只小猪最重？![三只小猪](/assets/三只小猪.jpg)\n\n\n代码实现如下：\n```c++\n#include<iostream>\nusing namespace std; \n\nint main(){\n\n//三只小猪称体重   \n//变量初始化三只小猪的体重\n\tint pig1 = 0;\n\tint pig2 = 0;\n\tint pig3 = 0;\n//让用户输入小猪的重量\n\tcout << \"请输入小猪1的体重：\"<<endl;\n\tcin >> pig1;\n\n\tcout << \"请输入小猪2的体重：\"<<endl;\n\tcin >> pig2;\n\n\tcout << \"请输入小猪3的体重：\"<<endl;\n\tcin >> pig3;\n\n\tcout << \"小猪1的体重为：\" << pig1 << \"斤\" <<endl;\n\tcout << \"小猪2的体重为：\" << pig2 << \"斤\" <<endl;\n\tcout << \"小猪3的体重为：\" << pig3 << \"斤\" <<endl;\n//判断哪支小猪是最重的\n\t//先判断A和B的体重\n\tif(pig1 > pig2)        //A和B比重\n\t{\t//A比B重\t\n\t\tif(pig1 > pig3)\n\t\t{   // A比C重\n\t\t cout <<\"小猪1最重\"<<endl;  \n\t\t}\n\t\t else\n\t\t {     \n\t      cout <<\"小猪3最重\"<<endl;\n\t      }\n\t}\n\telse{                   //B比A重\n\t\tif(pig2 > pig3)\n\t\t{\n\t\t cout <<\"小猪2最重\"<<endl;\t\t\n\t\t}\n\t\telse{\n\t\t cout <<\"小猪3最重\"<<endl;\t\t\n\t\t}\n\t}\n   system(\"pause\");\n   return 0;\n\n}\n```\n\n\n\n\n\n\n\n#### 4.1.2 三目运算符\n\n**作用：** 通过三目运算符实现简单的判断\n\n**语法：**`表达式1 ? 表达式2 ：表达式3`\n\n**解释：**\n\n如果表达式1的值为真，执行表达式2，并返回表达式2的结果；\n\n如果表达式1的值为假，执行表达式3，并返回表达式3的结果。\n\n**示例：**\n\n```C++\nint main() {\n\n\tint a = 10;\n\tint b = 20;\n\tint c = 0;\n\n\tc = a > b ? a : b;\n\tcout << \"c = \" << c << endl;\n\n\t//C++中三目运算符返回的是变量,可以继续赋值\n\n\t(a > b ? a : b) = 100;\n\n\tcout << \"a = \" << a << endl;\n\tcout << \"b = \" << b << endl;\n\tcout << \"c = \" << c << endl;\n\n\tsystem(\"pause\");\n\n\treturn 0;\n}\n```\n\n> 总结：和if语句比较，三目运算符优点是短小整洁，缺点是如果用嵌套，结构不清晰\n\n\n\n\n\n\n#### 4.1.3 switch语句\n\n**作用：**执行多条件分支语句\n\n**语法：**\n\n```C++\nswitch(表达式)\n\n{\n\n\tcase 结果1：执行语句;break;\n\n\tcase 结果2：执行语句;break;\n\n\t...\n\n\tdefault:执行语句;break;\n\n}\n\n```\n\n\n\n\n\n\n\n**示例：**\n\n```C++\nint main() {\n\n\t//请给电影评分 \n\t//10 ~ 9   经典   \n\t// 8 ~ 7   非常好\n\t// 6 ~ 5   一般\n\t// 5分以下 烂片\n\n\tint score = 0;\n\tcout << \"请给电影打分\" << endl;\n\tcin >> score;\n\n\tswitch (score)\n\t{\n\tcase 10:\n\tcase 9:\n\t\tcout << \"经典\" << endl;\n\t\tbreak;\n\tcase 8:\n\t\tcout << \"非常好\" << endl;\n\t\tbreak;\n\tcase 7:\n\tcase 6:\n\t\tcout << \"一般\" << endl;\n\t\tbreak;\n\tdefault:\n\t\tcout << \"烂片\" << endl;\n\t\tbreak;\n\t}\n\n\tsystem(\"pause\");\n\n\treturn 0;\n}\n```\n\n\n\n> 注意1：switch语句中表达式类型只能是整型或者字符型\n\n> 注意2：case里如果没有break，那么程序会一直向下执行\n\n> 总结：与if语句比，对于多条件判断时，switch的结构清晰，执行效率高，缺点是switch不可以判断区间\n\n\n\n\n\n\n\n\n\n### 4.2 循环结构\n\n#### 4.2.1 while循环语句\n\n**作用：**满足循环条件，执行循环语句\n\n**语法：**` while(循环条件){ 循环语句 }`\n\n**解释：**==只要循环条件的结果为真，就执行循环语句==\n\n![img](/assets/clip_image002-1541668640382.png)\n\n\n\n\n\n\n\n**示例：**\n\n```C++\nint main() {\n\n\tint num = 0;\n\twhile (num < 10)\n\t{\n\t\tcout << \"num = \" << num << endl;\n\t\tnum++;\n\t}\n\t\n\tsystem(\"pause\");\n\n\treturn 0;\n}\n```\n\n\n\n> 注意：在执行循环语句时候，程序必须提供跳出循环的出口，否则出现死循环\n\n\n\n\n\n\n\n\n\n**while循环练习案例：**==猜数字==\n\n**案例描述：**系统随机生成一个1到100之间的数字，玩家进行猜测，如果猜错，提示玩家数字过大或过小，如果猜对恭喜玩家胜利，并且退出游戏。\n\n\n\n![猜数字](/assets/猜数字.jpg)\n\n\n代码实现如下：\n```c++\n#include <iostream>\nusing namespace std;\n//time系统时间头文件包含\n#include <ctime>\nint main() {\n\t//添加随机数种子  利用当前系统时间生成随机数，防止每次随机数都一样\n\tsrand((unsigned int)time(NULL));\n\t//1.系统生成随机数\n\tint num=rand()%100+1;  // rand()%100 生成0+1~99+1的随机数\n\tcout<<num<<endl;\n\t\n\t//2.玩家进行猜测\n\tint val=0;\n\twhile(1){\n\t\tcin>>val;\n\t\t//3.判断玩家的猜测\n\t\tif(val>num){\n\t\t\t//猜错  提示猜的结果 过大或者过小 重新返回第2步\n\t\t\tcout<<\"猜测过大\"<<endl;\n\t\t}else if(val<num){\n\t\t\t//猜错  提示猜的结果 过大或者过小 重新返回第2步\n\t\t\tcout<<\"猜测过小\"<<endl;\n\t\t}else{\n\t\t\t//猜对  退出游戏\n\t\t\tcout<<\"恭喜您猜对啦\"<<endl;\n\t\t\tbreak;\n\t\t}\n\t}\t\n\tsystem(\"pause\");\n \n\treturn 0;\n}\n```\n\n\n\n#### 4.2.2 do...while循环语句\n\n**作用：** 满足循环条件，执行循环语句\n\n**语法：** `do{ 循环语句 } while(循环条件);`\n\n**注意：**与while的区别在于==do...while会先执行一次循环语句==，再判断循环条件\n\n![img](/assets/clip_image002-1541671163478.png)\n\n\n\n**示例：**\n\n```C++\nint main() {\n\n\tint num = 0;\n\n\tdo\n\t{\n\t\tcout << num << endl;\n\t\tnum++;\n\n\t} while (num < 10);\n\t\n\t\n\tsystem(\"pause\");\n\n\treturn 0;\n}\n```\n\n\n\n> 总结：与while循环区别在于，do...while先执行一次循环语句，再判断循环条件\n\n\n\n\n\n\n**练习案例：水仙花数**\n\n**案例描述：**水仙花数是指一个 3 位数，它的每个位上的数字的 3次幂之和等于它本身\n\n例如：1^3 + 5^3+ 3^3 = 153\n\n请利用do...while语句，求出所有3位数中的水仙花数\n\n\n代码实现：\n\n方法一\n```c++\n#include <iostream>\n#include <cmath>\nusing namespace std;\n \nint main(int argc, const char * argv[]) {\n    int n, unit, ten, hund; // unit, ten, hund分别存储个位、十位和百位的数字\n    \n    for(n = 100; n < 1000; n++) {\n        unit = n % 10; // 得到n的个位数字\n        ten = (n / 10) % 10; // 得到n的十位数字\n        hund = n / 100; // 得到n的百位数字\n        // 判断各位数字的立方和是否等于它本身\n        if(n == hund * hund * hund + ten * ten * ten + unit * unit * unit)\n        // if(n == pow(hund, 3) + pow(ten, 3) + pow(unit, 3))\n            cout << n << \" \";\n    }\n    cout << endl;\n    return 0;\n}\n```\n\n方法二\n\n```c++\n#include <iostream>\nusing namespace std;\n \nint main(int argc, const char * argv[]) {\n    int sum;\n    \n    for(int i = 1; i < 10; i++)\n        for(int j = 0; j < 10; j++)\n            for(int k = 0; k < 10; k++) {\n                sum = i * 100 + j * 10 + k;\n                if(sum == (i * i * i + j * j * j + k * k * k))\n                    cout << sum << \" \";\n            }\n    cout << endl;\n    return 0;\n}\n```\n\ndo...while实现\n\n```c++\n#include <iostream>\nusing namespace std;\nint main() {\n\tint num = 100;\n\tdo\n\t{\n\t\tint a = num % 10;\n\t\tint b = (num % 100) / 10;\n\t\tint c = num / 100;\n\t\tif (a*a*a + b*b*b + c*c*c == num) \n\t\t{\n\t\t\tcout << \"水仙数是：\" << num << endl;\n\t\t}\n\n\t\tnum++;\n\n\t} while (num < 999);\n\t\n\n\tsystem(\"pause\");\n\n\treturn 0;\n}\n```\n\n\n\n\n#### 4.2.3 for循环语句\n\n**作用：** 满足循环条件，执行循环语句\n\n**语法：**` for(起始表达式;条件表达式;末尾循环体) { 循环语句; }`\n\n\n\n**示例：**\n\n```C++\nint main() {\n\n\tfor (int i = 0; i < 10; i++)\n\t{\n\t\tcout << i << endl;\n\t}\n\t\n\tsystem(\"pause\");\n\n\treturn 0;\n}\n```\n\n\n\n\n**详解：**\n\n![1541673704101](/assets/1541673704101.png)\n\n\n\n> 注意：for循环中的表达式，要用分号进行分隔\n\n> 总结：while , do...while, for都是开发中常用的循环语句，for循环结构比较清晰，比较常用\n\n\n\n\n\n\n\n\n**练习案例：敲桌子**\n\n案例描述：从1开始数到数字100， 如果数字个位含有7，或者数字十位含有7，或者该数字是7的倍数，我们打印敲桌子，其余数字直接打印输出。\n\n![timg](/assets/timg.gif)\n\n代码实现\n```c++\n#include <iostream>\nusing namespace std;\n \nint main() {\n\tint num;\n\tfor (num = 1; num<= 100; num++) {\n\t\tif (num < 10)\n\t\t\tif (num == 7 || num % 7 == 0)\n\t\t\t\tcout << \"敲桌子\" << endl;\n\t\t\telse\n\t\t\t\tcout << num << endl;\n\t\telse if (num < 100)\n\t\t\tif (num % 10 == 7 || num / 10 == 7 || num % 7 == 0)\n\t\t\t\tcout << \"敲桌子\" << endl;\n\t\t\telse\n\t\t\t\tcout << num << endl;\n\t\telse\n\t\t\tif (num % 10 == 7 || (num / 10) % 10 == 7 || num % 7 == 0)\n\t\t\t\tcout << \"敲桌子\" << endl;\n\t\t\telse\n\t\t\t\tcout << num << endl;\n \n\t}\n\tsystem(\"pause\");\n\treturn 0;\n \n}\n```\n\n\n\n\n\n#### 4.2.4 嵌套循环\n\n**作用：** 在循环体中再嵌套一层循环，解决一些实际问题\n\n例如我们想在屏幕中打印如下图片，就需要利用嵌套循环\n\n![1541676003486](/assets/1541676003486.png)\n\n\n\n\n\n**示例：**\n\n```C++\nint main() {\n\n\t//外层循环执行1次，内层循环执行1轮\n\tfor (int i = 0; i < 10; i++)\n\t{\n\t\tfor (int j = 0; j < 10; j++)\n\t\t{\n\t\t\tcout << \"*\" << \" \";\n\t\t}\n\t\tcout << endl;\n\t}\n\n\tsystem(\"pause\");\n\n\treturn 0;\n}\n```\n\n\n\n**练习案例：**乘法口诀表\n\n案例描述：利用嵌套循环，实现九九乘法表\n\n![0006018857256120_b](/assets/0006018857256120_b.jpg)\n\n代码实现\n```c++\n#include<iostream>\nusing namespace std;\n\nint main() {\n\t//嵌套循环实现九九乘法表\n\tfor (int i = 1; i < 10; i++) {   \n\n\n\t\tfor (int j = 1; j <= i; j++) {   \n\n\t\t\tcout <<i<< \" * \"<<j<<\" = \"<<i * j<<\" \";\n\n\t\t}\n\t\tcout << endl;//换行\n\n\t}\n\n\tsystem(\"pause\");\n\n\treturn 0;\n}\n```\n\n\n\n### 4.3 跳转语句\n\n#### 4.3.1 break语句\n\n**作用:** 用于跳出==选择结构==或者==循环结构==\n\nbreak使用的时机：\n\n* 出现在switch条件语句中，作用是终止case并跳出switch\n* 出现在循环语句中，作用是跳出当前的循环语句\n* 出现在嵌套循环中，跳出最近的内层循环语句\n\n\n\n**示例1：**\n\n```C++\nint main() {\n\t//1、在switch 语句中使用break\n\tcout << \"请选择您挑战副本的难度：\" << endl;\n\tcout << \"1、普通\" << endl;\n\tcout << \"2、中等\" << endl;\n\tcout << \"3、困难\" << endl;\n\n\tint num = 0;\n\n\tcin >> num;\n\n\tswitch (num)\n\t{\n\tcase 1:\n\t\tcout << \"您选择的是普通难度\" << endl;\n\t\tbreak;\n\tcase 2:\n\t\tcout << \"您选择的是中等难度\" << endl;\n\t\tbreak;\n\tcase 3:\n\t\tcout << \"您选择的是困难难度\" << endl;\n\t\tbreak;\n\t}\n\n\tsystem(\"pause\");\n\n\treturn 0;\n}\n```\n\n\n\n**示例2：**\n\n```C++\nint main() {\n\t//2、在循环语句中用break\n\tfor (int i = 0; i < 10; i++)\n\t{\n\t\tif (i == 5)\n\t\t{\n\t\t\tbreak; //跳出循环语句\n\t\t}\n\t\tcout << i << endl;\n\t}\n\n\tsystem(\"pause\");\n\n\treturn 0;\n}\n```\n\n\n\n**示例3：**\n\n```C++\nint main() {\n\t//在嵌套循环语句中使用break，退出内层循环\n\tfor (int i = 0; i < 10; i++)\n\t{\n\t\tfor (int j = 0; j < 10; j++)\n\t\t{\n\t\t\tif (j == 5)\n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcout << \"*\" << \" \";\n\t\t}\n\t\tcout << endl;\n\t}\n\t\n\tsystem(\"pause\");\n\n\treturn 0;\n}\n```\n\n\n\n\n\n#### 4.3.2 continue语句\n\n**作用：**在==循环语句==中，跳过本次循环中余下尚未执行的语句，继续执行下一次循环\n\n**示例：**\n\n```C++\nint main() {\n\n\tfor (int i = 0; i < 100; i++)\n\t{\n\t\tif (i % 2 == 0)\n\t\t{\n\t\t\tcontinue;\n\t\t}\n\t\tcout << i << endl;\n\t}\n\t\n\tsystem(\"pause\");\n\n\treturn 0;\n}\n```\n\n\n\n> 注意：continue并没有使整个循环终止，而break会跳出循环\n\n\n\n\n\n\n#### 4.3.3 goto语句\n\n**作用：**可以无条件跳转语句\n\n\n\n**语法：** `goto 标记;`\n\n**解释：**如果标记的名称存在，执行到goto语句时，会跳转到标记的位置\n\n\n\n**示例：**\n\n```C++\nint main() {\n\n\tcout << \"1\" << endl;\n\n\tgoto FLAG;\n\n\tcout << \"2\" << endl;\n\tcout << \"3\" << endl;\n\tcout << \"4\" << endl;\n\n\tFLAG:\n\n\tcout << \"5\" << endl;\n\t\n\tsystem(\"pause\");\n\n\treturn 0;\n}\n```\n\n\n\n> 注意：在程序中不建议使用goto语句，以免造成程序流程混乱\n\n","slug":"四-程序流程结构","published":1,"updated":"2023-03-01T12:02:04.486Z","_id":"clifr2v1y002414uo5vcsa94k","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"4-程序流程结构\"><a href=\"#4-程序流程结构\" class=\"headerlink\" title=\"4 程序流程结构\"></a>4 程序流程结构</h2><p>C/C++支持最基本的三种程序运行结构：==顺序结构、选择结构、循环结构==</p>\n<ul>\n<li>顺序结构：程序按顺序执行，不发生跳转</li>\n<li>选择结构：依据条件是否满足，有选择的执行相应功能</li>\n<li>循环结构：依据条件是否满足，循环多次执行某段代码</li>\n</ul>\n<h3 id=\"4-1-选择结构\"><a href=\"#4-1-选择结构\" class=\"headerlink\" title=\"4.1 选择结构\"></a>4.1 选择结构</h3><h4 id=\"4-1-1-if语句\"><a href=\"#4-1-1-if语句\" class=\"headerlink\" title=\"4.1.1 if语句\"></a>4.1.1 if语句</h4><p><strong>作用：</strong>执行满足条件的语句</p>\n<p>if语句的三种形式</p>\n<ul>\n<li><p>单行格式if语句</p>\n</li>\n<li><p>多行格式if语句</p>\n</li>\n<li><p>多条件的if语句</p>\n</li>\n</ul>\n<ol>\n<li><p>单行格式if语句：<code>if(条件)&#123; 条件满足执行的语句 &#125;</code></p>\n<p><img src=\"/assets/clip_image002.png\" alt=\"img\"></p>\n<p>示例：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//选择结构-单行if语句</span></span><br><span class=\"line\">\t<span class=\"comment\">//输入一个分数，如果分数大于600分，视为考上一本大学，并在屏幕上打印</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"type\">int</span> score = <span class=\"number\">0</span>;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;请输入一个分数：&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\tcin &gt;&gt; score;</span><br><span class=\"line\"></span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;您输入的分数为： &quot;</span> &lt;&lt; score &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//if语句</span></span><br><span class=\"line\">\t<span class=\"comment\">//注意事项，在if判断语句后面，不要加分号</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (score &gt; <span class=\"number\">600</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tcout &lt;&lt; <span class=\"string\">&quot;我考上了一本大学！！！&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">system</span>(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<blockquote>\n<p>注意：if条件表达式后不要加分号</p>\n</blockquote>\n<ol start=\"2\">\n<li>多行格式if语句：<code>if(条件)&#123; 条件满足执行的语句 &#125;else&#123; 条件不满足执行的语句 &#125;;</code></li>\n</ol>\n<p><img src=\"/assets/clip_image002-1541662519170.png\" alt=\"img\"></p>\n<p>示例：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"type\">int</span> score = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;请输入考试分数：&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">\tcin &gt;&gt; score;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (score &gt; <span class=\"number\">600</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tcout &lt;&lt; <span class=\"string\">&quot;我考上了一本大学&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tcout &lt;&lt; <span class=\"string\">&quot;我未考上一本大学&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">system</span>(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n\n\n\n\n<ol start=\"3\">\n<li>多条件的if语句：<code>if(条件1)&#123; 条件1满足执行的语句 &#125;else if(条件2)&#123;条件2满足执行的语句&#125;... else&#123; 都不满足执行的语句&#125;</code></li>\n</ol>\n<p><img src=\"/assets/clip_image002-1541662566808.png\" alt=\"img\"></p>\n<p>示例：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\t<span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"type\">int</span> score = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;请输入考试分数：&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">\tcin &gt;&gt; score;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (score &gt; <span class=\"number\">600</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tcout &lt;&lt; <span class=\"string\">&quot;我考上了一本大学&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (score &gt; <span class=\"number\">500</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tcout &lt;&lt; <span class=\"string\">&quot;我考上了二本大学&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (score &gt; <span class=\"number\">400</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tcout &lt;&lt; <span class=\"string\">&quot;我考上了三本大学&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tcout &lt;&lt; <span class=\"string\">&quot;我未考上本科&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">system</span>(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n\n\n<p><strong>嵌套if语句</strong>：在if语句中，可以嵌套使用if语句，达到更精确的条件判断</p>\n<p>案例需求：</p>\n<ul>\n<li>提示用户输入一个高考考试分数，根据分数做如下判断</li>\n<li>分数如果大于600分视为考上一本，大于500分考上二本，大于400考上三本，其余视为未考上本科；</li>\n<li>在一本分数中，如果大于700分，考入北大，大于650分，考入清华，大于600考入人大。</li>\n</ul>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"type\">int</span> score = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;请输入考试分数：&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">\tcin &gt;&gt; score;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (score &gt; <span class=\"number\">600</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tcout &lt;&lt; <span class=\"string\">&quot;我考上了一本大学&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (score &gt; <span class=\"number\">700</span>)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tcout &lt;&lt; <span class=\"string\">&quot;我考上了北大&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (score &gt; <span class=\"number\">650</span>)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tcout &lt;&lt; <span class=\"string\">&quot;我考上了清华&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tcout &lt;&lt; <span class=\"string\">&quot;我考上了人大&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (score &gt; <span class=\"number\">500</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tcout &lt;&lt; <span class=\"string\">&quot;我考上了二本大学&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (score &gt; <span class=\"number\">400</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tcout &lt;&lt; <span class=\"string\">&quot;我考上了三本大学&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tcout &lt;&lt; <span class=\"string\">&quot;我未考上本科&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">system</span>(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n<p><strong>练习案例：</strong> 三只小猪称体重</p>\n<p>有三只小猪ABC，请分别输入三只小猪的体重，并且判断哪只小猪最重？<img src=\"/assets/%E4%B8%89%E5%8F%AA%E5%B0%8F%E7%8C%AA.jpg\" alt=\"三只小猪\"></p>\n<p>代码实现如下：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std; </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//三只小猪称体重   </span></span><br><span class=\"line\"><span class=\"comment\">//变量初始化三只小猪的体重</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> pig1 = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"type\">int</span> pig2 = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"type\">int</span> pig3 = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"comment\">//让用户输入小猪的重量</span></span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;请输入小猪1的体重：&quot;</span>&lt;&lt;endl;</span><br><span class=\"line\">\tcin &gt;&gt; pig1;</span><br><span class=\"line\"></span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;请输入小猪2的体重：&quot;</span>&lt;&lt;endl;</span><br><span class=\"line\">\tcin &gt;&gt; pig2;</span><br><span class=\"line\"></span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;请输入小猪3的体重：&quot;</span>&lt;&lt;endl;</span><br><span class=\"line\">\tcin &gt;&gt; pig3;</span><br><span class=\"line\"></span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;小猪1的体重为：&quot;</span> &lt;&lt; pig1 &lt;&lt; <span class=\"string\">&quot;斤&quot;</span> &lt;&lt;endl;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;小猪2的体重为：&quot;</span> &lt;&lt; pig2 &lt;&lt; <span class=\"string\">&quot;斤&quot;</span> &lt;&lt;endl;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;小猪3的体重为：&quot;</span> &lt;&lt; pig3 &lt;&lt; <span class=\"string\">&quot;斤&quot;</span> &lt;&lt;endl;</span><br><span class=\"line\"><span class=\"comment\">//判断哪支小猪是最重的</span></span><br><span class=\"line\">\t<span class=\"comment\">//先判断A和B的体重</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(pig1 &gt; pig2)        <span class=\"comment\">//A和B比重</span></span><br><span class=\"line\">\t&#123;\t<span class=\"comment\">//A比B重\t</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(pig1 &gt; pig3)</span><br><span class=\"line\">\t\t&#123;   <span class=\"comment\">// A比C重</span></span><br><span class=\"line\">\t\t cout &lt;&lt;<span class=\"string\">&quot;小猪1最重&quot;</span>&lt;&lt;endl;  </span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t <span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t &#123;     </span><br><span class=\"line\">\t      cout &lt;&lt;<span class=\"string\">&quot;小猪3最重&quot;</span>&lt;&lt;endl;</span><br><span class=\"line\">\t      &#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span>&#123;                   <span class=\"comment\">//B比A重</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(pig2 &gt; pig3)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t cout &lt;&lt;<span class=\"string\">&quot;小猪2最重&quot;</span>&lt;&lt;endl;\t\t</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\t cout &lt;&lt;<span class=\"string\">&quot;小猪3最重&quot;</span>&lt;&lt;endl;\t\t</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">   <span class=\"built_in\">system</span>(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\">   <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n<h4 id=\"4-1-2-三目运算符\"><a href=\"#4-1-2-三目运算符\" class=\"headerlink\" title=\"4.1.2 三目运算符\"></a>4.1.2 三目运算符</h4><p><strong>作用：</strong> 通过三目运算符实现简单的判断</p>\n<p><strong>语法：</strong><code>表达式1 ? 表达式2 ：表达式3</code></p>\n<p><strong>解释：</strong></p>\n<p>如果表达式1的值为真，执行表达式2，并返回表达式2的结果；</p>\n<p>如果表达式1的值为假，执行表达式3，并返回表达式3的结果。</p>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"type\">int</span> a = <span class=\"number\">10</span>;</span><br><span class=\"line\">\t<span class=\"type\">int</span> b = <span class=\"number\">20</span>;</span><br><span class=\"line\">\t<span class=\"type\">int</span> c = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\tc = a &gt; b ? a : b;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;c = &quot;</span> &lt;&lt; c &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//C++中三目运算符返回的是变量,可以继续赋值</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t(a &gt; b ? a : b) = <span class=\"number\">100</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;a = &quot;</span> &lt;&lt; a &lt;&lt; endl;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;b = &quot;</span> &lt;&lt; b &lt;&lt; endl;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;c = &quot;</span> &lt;&lt; c &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">system</span>(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>总结：和if语句比较，三目运算符优点是短小整洁，缺点是如果用嵌套，结构不清晰</p>\n</blockquote>\n<h4 id=\"4-1-3-switch语句\"><a href=\"#4-1-3-switch语句\" class=\"headerlink\" title=\"4.1.3 switch语句\"></a>4.1.3 switch语句</h4><p><strong>作用：</strong>执行多条件分支语句</p>\n<p><strong>语法：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">switch</span>(表达式)</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">case</span> 结果<span class=\"number\">1</span>：执行语句;<span class=\"keyword\">break</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">case</span> 结果<span class=\"number\">2</span>：执行语句;<span class=\"keyword\">break</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t...</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">default</span>:执行语句;<span class=\"keyword\">break</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n<p><strong>示例：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//请给电影评分 </span></span><br><span class=\"line\">\t<span class=\"comment\">//10 ~ 9   经典   </span></span><br><span class=\"line\">\t<span class=\"comment\">// 8 ~ 7   非常好</span></span><br><span class=\"line\">\t<span class=\"comment\">// 6 ~ 5   一般</span></span><br><span class=\"line\">\t<span class=\"comment\">// 5分以下 烂片</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"type\">int</span> score = <span class=\"number\">0</span>;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;请给电影打分&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\tcin &gt;&gt; score;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">switch</span> (score)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">case</span> <span class=\"number\">10</span>:</span><br><span class=\"line\">\t<span class=\"keyword\">case</span> <span class=\"number\">9</span>:</span><br><span class=\"line\">\t\tcout &lt;&lt; <span class=\"string\">&quot;经典&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">case</span> <span class=\"number\">8</span>:</span><br><span class=\"line\">\t\tcout &lt;&lt; <span class=\"string\">&quot;非常好&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">case</span> <span class=\"number\">7</span>:</span><br><span class=\"line\">\t<span class=\"keyword\">case</span> <span class=\"number\">6</span>:</span><br><span class=\"line\">\t\tcout &lt;&lt; <span class=\"string\">&quot;一般&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">default</span>:</span><br><span class=\"line\">\t\tcout &lt;&lt; <span class=\"string\">&quot;烂片&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">system</span>(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<blockquote>\n<p>注意1：switch语句中表达式类型只能是整型或者字符型</p>\n</blockquote>\n<blockquote>\n<p>注意2：case里如果没有break，那么程序会一直向下执行</p>\n</blockquote>\n<blockquote>\n<p>总结：与if语句比，对于多条件判断时，switch的结构清晰，执行效率高，缺点是switch不可以判断区间</p>\n</blockquote>\n<h3 id=\"4-2-循环结构\"><a href=\"#4-2-循环结构\" class=\"headerlink\" title=\"4.2 循环结构\"></a>4.2 循环结构</h3><h4 id=\"4-2-1-while循环语句\"><a href=\"#4-2-1-while循环语句\" class=\"headerlink\" title=\"4.2.1 while循环语句\"></a>4.2.1 while循环语句</h4><p><strong>作用：</strong>满足循环条件，执行循环语句</p>\n<p><strong>语法：</strong><code> while(循环条件)&#123; 循环语句 &#125;</code></p>\n<p><strong>解释：</strong>==只要循环条件的结果为真，就执行循环语句==</p>\n<p><img src=\"/assets/clip_image002-1541668640382.png\" alt=\"img\"></p>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"type\">int</span> num = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (num &lt; <span class=\"number\">10</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tcout &lt;&lt; <span class=\"string\">&quot;num = &quot;</span> &lt;&lt; num &lt;&lt; endl;</span><br><span class=\"line\">\t\tnum++;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"built_in\">system</span>(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<blockquote>\n<p>注意：在执行循环语句时候，程序必须提供跳出循环的出口，否则出现死循环</p>\n</blockquote>\n<p><strong>while循环练习案例：</strong>==猜数字==</p>\n<p><strong>案例描述：</strong>系统随机生成一个1到100之间的数字，玩家进行猜测，如果猜错，提示玩家数字过大或过小，如果猜对恭喜玩家胜利，并且退出游戏。</p>\n<p><img src=\"/assets/%E7%8C%9C%E6%95%B0%E5%AD%97.jpg\" alt=\"猜数字\"></p>\n<p>代码实现如下：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"comment\">//time系统时间头文件包含</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;ctime&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//添加随机数种子  利用当前系统时间生成随机数，防止每次随机数都一样</span></span><br><span class=\"line\">\t<span class=\"built_in\">srand</span>((<span class=\"type\">unsigned</span> <span class=\"type\">int</span>)<span class=\"built_in\">time</span>(<span class=\"literal\">NULL</span>));</span><br><span class=\"line\">\t<span class=\"comment\">//1.系统生成随机数</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> num=<span class=\"built_in\">rand</span>()%<span class=\"number\">100</span>+<span class=\"number\">1</span>;  <span class=\"comment\">// rand()%100 生成0+1~99+1的随机数</span></span><br><span class=\"line\">\tcout&lt;&lt;num&lt;&lt;endl;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//2.玩家进行猜测</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> val=<span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">\t\tcin&gt;&gt;val;</span><br><span class=\"line\">\t\t<span class=\"comment\">//3.判断玩家的猜测</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(val&gt;num)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//猜错  提示猜的结果 过大或者过小 重新返回第2步</span></span><br><span class=\"line\">\t\t\tcout&lt;&lt;<span class=\"string\">&quot;猜测过大&quot;</span>&lt;&lt;endl;</span><br><span class=\"line\">\t\t&#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(val&lt;num)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//猜错  提示猜的结果 过大或者过小 重新返回第2步</span></span><br><span class=\"line\">\t\t\tcout&lt;&lt;<span class=\"string\">&quot;猜测过小&quot;</span>&lt;&lt;endl;</span><br><span class=\"line\">\t\t&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//猜对  退出游戏</span></span><br><span class=\"line\">\t\t\tcout&lt;&lt;<span class=\"string\">&quot;恭喜您猜对啦&quot;</span>&lt;&lt;endl;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;\t</span><br><span class=\"line\">\t<span class=\"built_in\">system</span>(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\"> </span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"4-2-2-do…while循环语句\"><a href=\"#4-2-2-do…while循环语句\" class=\"headerlink\" title=\"4.2.2 do…while循环语句\"></a>4.2.2 do…while循环语句</h4><p><strong>作用：</strong> 满足循环条件，执行循环语句</p>\n<p><strong>语法：</strong> <code>do&#123; 循环语句 &#125; while(循环条件);</code></p>\n<p><strong>注意：</strong>与while的区别在于==do…while会先执行一次循环语句==，再判断循环条件</p>\n<p><img src=\"/assets/clip_image002-1541671163478.png\" alt=\"img\"></p>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"type\">int</span> num = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">do</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tcout &lt;&lt; num &lt;&lt; endl;</span><br><span class=\"line\">\t\tnum++;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125; <span class=\"keyword\">while</span> (num &lt; <span class=\"number\">10</span>);</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"built_in\">system</span>(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<blockquote>\n<p>总结：与while循环区别在于，do…while先执行一次循环语句，再判断循环条件</p>\n</blockquote>\n<p><strong>练习案例：水仙花数</strong></p>\n<p><strong>案例描述：</strong>水仙花数是指一个 3 位数，它的每个位上的数字的 3次幂之和等于它本身</p>\n<p>例如：1^3 + 5^3+ 3^3 = 153</p>\n<p>请利用do…while语句，求出所有3位数中的水仙花数</p>\n<p>代码实现：</p>\n<p>方法一</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;cmath&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"type\">int</span> argc, <span class=\"type\">const</span> <span class=\"type\">char</span> * argv[])</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> n, unit, ten, hund; <span class=\"comment\">// unit, ten, hund分别存储个位、十位和百位的数字</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(n = <span class=\"number\">100</span>; n &lt; <span class=\"number\">1000</span>; n++) &#123;</span><br><span class=\"line\">        unit = n % <span class=\"number\">10</span>; <span class=\"comment\">// 得到n的个位数字</span></span><br><span class=\"line\">        ten = (n / <span class=\"number\">10</span>) % <span class=\"number\">10</span>; <span class=\"comment\">// 得到n的十位数字</span></span><br><span class=\"line\">        hund = n / <span class=\"number\">100</span>; <span class=\"comment\">// 得到n的百位数字</span></span><br><span class=\"line\">        <span class=\"comment\">// 判断各位数字的立方和是否等于它本身</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(n == hund * hund * hund + ten * ten * ten + unit * unit * unit)</span><br><span class=\"line\">        <span class=\"comment\">// if(n == pow(hund, 3) + pow(ten, 3) + pow(unit, 3))</span></span><br><span class=\"line\">            cout &lt;&lt; n &lt;&lt; <span class=\"string\">&quot; &quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout &lt;&lt; endl;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>方法二</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"type\">int</span> argc, <span class=\"type\">const</span> <span class=\"type\">char</span> * argv[])</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> sum;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt; <span class=\"number\">10</span>; i++)</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j = <span class=\"number\">0</span>; j &lt; <span class=\"number\">10</span>; j++)</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> k = <span class=\"number\">0</span>; k &lt; <span class=\"number\">10</span>; k++) &#123;</span><br><span class=\"line\">                sum = i * <span class=\"number\">100</span> + j * <span class=\"number\">10</span> + k;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(sum == (i * i * i + j * j * j + k * k * k))</span><br><span class=\"line\">                    cout &lt;&lt; sum &lt;&lt; <span class=\"string\">&quot; &quot;</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">    cout &lt;&lt; endl;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>do…while实现</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> num = <span class=\"number\">100</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">do</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"type\">int</span> a = num % <span class=\"number\">10</span>;</span><br><span class=\"line\">\t\t<span class=\"type\">int</span> b = (num % <span class=\"number\">100</span>) / <span class=\"number\">10</span>;</span><br><span class=\"line\">\t\t<span class=\"type\">int</span> c = num / <span class=\"number\">100</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (a*a*a + b*b*b + c*c*c == num) </span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tcout &lt;&lt; <span class=\"string\">&quot;水仙数是：&quot;</span> &lt;&lt; num &lt;&lt; endl;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tnum++;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125; <span class=\"keyword\">while</span> (num &lt; <span class=\"number\">999</span>);</span><br><span class=\"line\">\t</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">system</span>(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n<h4 id=\"4-2-3-for循环语句\"><a href=\"#4-2-3-for循环语句\" class=\"headerlink\" title=\"4.2.3 for循环语句\"></a>4.2.3 for循环语句</h4><p><strong>作用：</strong> 满足循环条件，执行循环语句</p>\n<p><strong>语法：</strong><code> for(起始表达式;条件表达式;末尾循环体) &#123; 循环语句; &#125;</code></p>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tcout &lt;&lt; i &lt;&lt; endl;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"built_in\">system</span>(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n<p><strong>详解：</strong></p>\n<p><img src=\"/assets/1541673704101.png\" alt=\"1541673704101\"></p>\n<blockquote>\n<p>注意：for循环中的表达式，要用分号进行分隔</p>\n</blockquote>\n<blockquote>\n<p>总结：while , do…while, for都是开发中常用的循环语句，for循环结构比较清晰，比较常用</p>\n</blockquote>\n<p><strong>练习案例：敲桌子</strong></p>\n<p>案例描述：从1开始数到数字100， 如果数字个位含有7，或者数字十位含有7，或者该数字是7的倍数，我们打印敲桌子，其余数字直接打印输出。</p>\n<p><img src=\"/assets/timg.gif\" alt=\"timg\"></p>\n<p>代码实现</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> num;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (num = <span class=\"number\">1</span>; num&lt;= <span class=\"number\">100</span>; num++) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (num &lt; <span class=\"number\">10</span>)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (num == <span class=\"number\">7</span> || num % <span class=\"number\">7</span> == <span class=\"number\">0</span>)</span><br><span class=\"line\">\t\t\t\tcout &lt;&lt; <span class=\"string\">&quot;敲桌子&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t\t\tcout &lt;&lt; num &lt;&lt; endl;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (num &lt; <span class=\"number\">100</span>)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (num % <span class=\"number\">10</span> == <span class=\"number\">7</span> || num / <span class=\"number\">10</span> == <span class=\"number\">7</span> || num % <span class=\"number\">7</span> == <span class=\"number\">0</span>)</span><br><span class=\"line\">\t\t\t\tcout &lt;&lt; <span class=\"string\">&quot;敲桌子&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t\t\tcout &lt;&lt; num &lt;&lt; endl;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (num % <span class=\"number\">10</span> == <span class=\"number\">7</span> || (num / <span class=\"number\">10</span>) % <span class=\"number\">10</span> == <span class=\"number\">7</span> || num % <span class=\"number\">7</span> == <span class=\"number\">0</span>)</span><br><span class=\"line\">\t\t\t\tcout &lt;&lt; <span class=\"string\">&quot;敲桌子&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t\t\tcout &lt;&lt; num &lt;&lt; endl;</span><br><span class=\"line\"> </span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">system</span>(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h4 id=\"4-2-4-嵌套循环\"><a href=\"#4-2-4-嵌套循环\" class=\"headerlink\" title=\"4.2.4 嵌套循环\"></a>4.2.4 嵌套循环</h4><p><strong>作用：</strong> 在循环体中再嵌套一层循环，解决一些实际问题</p>\n<p>例如我们想在屏幕中打印如下图片，就需要利用嵌套循环</p>\n<p><img src=\"/assets/1541676003486.png\" alt=\"1541676003486\"></p>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//外层循环执行1次，内层循环执行1轮</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">0</span>; j &lt; <span class=\"number\">10</span>; j++)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tcout &lt;&lt; <span class=\"string\">&quot;*&quot;</span> &lt;&lt; <span class=\"string\">&quot; &quot;</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tcout &lt;&lt; endl;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">system</span>(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p><strong>练习案例：</strong>乘法口诀表</p>\n<p>案例描述：利用嵌套循环，实现九九乘法表</p>\n<p><img src=\"/assets/0006018857256120_b.jpg\" alt=\"0006018857256120_b\"></p>\n<p>代码实现</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//嵌套循环实现九九乘法表</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;   </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">1</span>; j &lt;= i; j++) &#123;   </span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\tcout &lt;&lt;i&lt;&lt; <span class=\"string\">&quot; * &quot;</span>&lt;&lt;j&lt;&lt;<span class=\"string\">&quot; = &quot;</span>&lt;&lt;i * j&lt;&lt;<span class=\"string\">&quot; &quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tcout &lt;&lt; endl;<span class=\"comment\">//换行</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">system</span>(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"4-3-跳转语句\"><a href=\"#4-3-跳转语句\" class=\"headerlink\" title=\"4.3 跳转语句\"></a>4.3 跳转语句</h3><h4 id=\"4-3-1-break语句\"><a href=\"#4-3-1-break语句\" class=\"headerlink\" title=\"4.3.1 break语句\"></a>4.3.1 break语句</h4><p><strong>作用:</strong> 用于跳出==选择结构==或者==循环结构==</p>\n<p>break使用的时机：</p>\n<ul>\n<li>出现在switch条件语句中，作用是终止case并跳出switch</li>\n<li>出现在循环语句中，作用是跳出当前的循环语句</li>\n<li>出现在嵌套循环中，跳出最近的内层循环语句</li>\n</ul>\n<p><strong>示例1：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//1、在switch 语句中使用break</span></span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;请选择您挑战副本的难度：&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;1、普通&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;2、中等&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;3、困难&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"type\">int</span> num = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\tcin &gt;&gt; num;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">switch</span> (num)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">case</span> <span class=\"number\">1</span>:</span><br><span class=\"line\">\t\tcout &lt;&lt; <span class=\"string\">&quot;您选择的是普通难度&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">case</span> <span class=\"number\">2</span>:</span><br><span class=\"line\">\t\tcout &lt;&lt; <span class=\"string\">&quot;您选择的是中等难度&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">case</span> <span class=\"number\">3</span>:</span><br><span class=\"line\">\t\tcout &lt;&lt; <span class=\"string\">&quot;您选择的是困难难度&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">system</span>(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p><strong>示例2：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//2、在循环语句中用break</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (i == <span class=\"number\">5</span>)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>; <span class=\"comment\">//跳出循环语句</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tcout &lt;&lt; i &lt;&lt; endl;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">system</span>(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p><strong>示例3：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//在嵌套循环语句中使用break，退出内层循环</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">0</span>; j &lt; <span class=\"number\">10</span>; j++)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (j == <span class=\"number\">5</span>)</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\tcout &lt;&lt; <span class=\"string\">&quot;*&quot;</span> &lt;&lt; <span class=\"string\">&quot; &quot;</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tcout &lt;&lt; endl;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"built_in\">system</span>(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h4 id=\"4-3-2-continue语句\"><a href=\"#4-3-2-continue语句\" class=\"headerlink\" title=\"4.3.2 continue语句\"></a>4.3.2 continue语句</h4><p><strong>作用：</strong>在==循环语句==中，跳过本次循环中余下尚未执行的语句，继续执行下一次循环</p>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">100</span>; i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (i % <span class=\"number\">2</span> == <span class=\"number\">0</span>)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">continue</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tcout &lt;&lt; i &lt;&lt; endl;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"built_in\">system</span>(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<blockquote>\n<p>注意：continue并没有使整个循环终止，而break会跳出循环</p>\n</blockquote>\n<h4 id=\"4-3-3-goto语句\"><a href=\"#4-3-3-goto语句\" class=\"headerlink\" title=\"4.3.3 goto语句\"></a>4.3.3 goto语句</h4><p><strong>作用：</strong>可以无条件跳转语句</p>\n<p><strong>语法：</strong> <code>goto 标记;</code></p>\n<p><strong>解释：</strong>如果标记的名称存在，执行到goto语句时，会跳转到标记的位置</p>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;1&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">goto</span> FLAG;</span><br><span class=\"line\"></span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;2&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;3&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;4&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">\tFLAG:</span><br><span class=\"line\"></span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;5&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"built_in\">system</span>(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<blockquote>\n<p>注意：在程序中不建议使用goto语句，以免造成程序流程混乱</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"4-程序流程结构\"><a href=\"#4-程序流程结构\" class=\"headerlink\" title=\"4 程序流程结构\"></a>4 程序流程结构</h2><p>C/C++支持最基本的三种程序运行结构：==顺序结构、选择结构、循环结构==</p>\n<ul>\n<li>顺序结构：程序按顺序执行，不发生跳转</li>\n<li>选择结构：依据条件是否满足，有选择的执行相应功能</li>\n<li>循环结构：依据条件是否满足，循环多次执行某段代码</li>\n</ul>\n<h3 id=\"4-1-选择结构\"><a href=\"#4-1-选择结构\" class=\"headerlink\" title=\"4.1 选择结构\"></a>4.1 选择结构</h3><h4 id=\"4-1-1-if语句\"><a href=\"#4-1-1-if语句\" class=\"headerlink\" title=\"4.1.1 if语句\"></a>4.1.1 if语句</h4><p><strong>作用：</strong>执行满足条件的语句</p>\n<p>if语句的三种形式</p>\n<ul>\n<li><p>单行格式if语句</p>\n</li>\n<li><p>多行格式if语句</p>\n</li>\n<li><p>多条件的if语句</p>\n</li>\n</ul>\n<ol>\n<li><p>单行格式if语句：<code>if(条件)&#123; 条件满足执行的语句 &#125;</code></p>\n<p><img src=\"/assets/clip_image002.png\" alt=\"img\"></p>\n<p>示例：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//选择结构-单行if语句</span></span><br><span class=\"line\">\t<span class=\"comment\">//输入一个分数，如果分数大于600分，视为考上一本大学，并在屏幕上打印</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"type\">int</span> score = <span class=\"number\">0</span>;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;请输入一个分数：&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\tcin &gt;&gt; score;</span><br><span class=\"line\"></span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;您输入的分数为： &quot;</span> &lt;&lt; score &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//if语句</span></span><br><span class=\"line\">\t<span class=\"comment\">//注意事项，在if判断语句后面，不要加分号</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (score &gt; <span class=\"number\">600</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tcout &lt;&lt; <span class=\"string\">&quot;我考上了一本大学！！！&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">system</span>(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<blockquote>\n<p>注意：if条件表达式后不要加分号</p>\n</blockquote>\n<ol start=\"2\">\n<li>多行格式if语句：<code>if(条件)&#123; 条件满足执行的语句 &#125;else&#123; 条件不满足执行的语句 &#125;;</code></li>\n</ol>\n<p><img src=\"/assets/clip_image002-1541662519170.png\" alt=\"img\"></p>\n<p>示例：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"type\">int</span> score = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;请输入考试分数：&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">\tcin &gt;&gt; score;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (score &gt; <span class=\"number\">600</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tcout &lt;&lt; <span class=\"string\">&quot;我考上了一本大学&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tcout &lt;&lt; <span class=\"string\">&quot;我未考上一本大学&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">system</span>(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n\n\n\n\n<ol start=\"3\">\n<li>多条件的if语句：<code>if(条件1)&#123; 条件1满足执行的语句 &#125;else if(条件2)&#123;条件2满足执行的语句&#125;... else&#123; 都不满足执行的语句&#125;</code></li>\n</ol>\n<p><img src=\"/assets/clip_image002-1541662566808.png\" alt=\"img\"></p>\n<p>示例：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\t<span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"type\">int</span> score = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;请输入考试分数：&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">\tcin &gt;&gt; score;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (score &gt; <span class=\"number\">600</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tcout &lt;&lt; <span class=\"string\">&quot;我考上了一本大学&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (score &gt; <span class=\"number\">500</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tcout &lt;&lt; <span class=\"string\">&quot;我考上了二本大学&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (score &gt; <span class=\"number\">400</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tcout &lt;&lt; <span class=\"string\">&quot;我考上了三本大学&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tcout &lt;&lt; <span class=\"string\">&quot;我未考上本科&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">system</span>(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n\n\n<p><strong>嵌套if语句</strong>：在if语句中，可以嵌套使用if语句，达到更精确的条件判断</p>\n<p>案例需求：</p>\n<ul>\n<li>提示用户输入一个高考考试分数，根据分数做如下判断</li>\n<li>分数如果大于600分视为考上一本，大于500分考上二本，大于400考上三本，其余视为未考上本科；</li>\n<li>在一本分数中，如果大于700分，考入北大，大于650分，考入清华，大于600考入人大。</li>\n</ul>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"type\">int</span> score = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;请输入考试分数：&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">\tcin &gt;&gt; score;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (score &gt; <span class=\"number\">600</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tcout &lt;&lt; <span class=\"string\">&quot;我考上了一本大学&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (score &gt; <span class=\"number\">700</span>)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tcout &lt;&lt; <span class=\"string\">&quot;我考上了北大&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (score &gt; <span class=\"number\">650</span>)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tcout &lt;&lt; <span class=\"string\">&quot;我考上了清华&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tcout &lt;&lt; <span class=\"string\">&quot;我考上了人大&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (score &gt; <span class=\"number\">500</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tcout &lt;&lt; <span class=\"string\">&quot;我考上了二本大学&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (score &gt; <span class=\"number\">400</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tcout &lt;&lt; <span class=\"string\">&quot;我考上了三本大学&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tcout &lt;&lt; <span class=\"string\">&quot;我未考上本科&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">system</span>(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n<p><strong>练习案例：</strong> 三只小猪称体重</p>\n<p>有三只小猪ABC，请分别输入三只小猪的体重，并且判断哪只小猪最重？<img src=\"/assets/%E4%B8%89%E5%8F%AA%E5%B0%8F%E7%8C%AA.jpg\" alt=\"三只小猪\"></p>\n<p>代码实现如下：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std; </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//三只小猪称体重   </span></span><br><span class=\"line\"><span class=\"comment\">//变量初始化三只小猪的体重</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> pig1 = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"type\">int</span> pig2 = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"type\">int</span> pig3 = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"comment\">//让用户输入小猪的重量</span></span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;请输入小猪1的体重：&quot;</span>&lt;&lt;endl;</span><br><span class=\"line\">\tcin &gt;&gt; pig1;</span><br><span class=\"line\"></span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;请输入小猪2的体重：&quot;</span>&lt;&lt;endl;</span><br><span class=\"line\">\tcin &gt;&gt; pig2;</span><br><span class=\"line\"></span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;请输入小猪3的体重：&quot;</span>&lt;&lt;endl;</span><br><span class=\"line\">\tcin &gt;&gt; pig3;</span><br><span class=\"line\"></span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;小猪1的体重为：&quot;</span> &lt;&lt; pig1 &lt;&lt; <span class=\"string\">&quot;斤&quot;</span> &lt;&lt;endl;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;小猪2的体重为：&quot;</span> &lt;&lt; pig2 &lt;&lt; <span class=\"string\">&quot;斤&quot;</span> &lt;&lt;endl;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;小猪3的体重为：&quot;</span> &lt;&lt; pig3 &lt;&lt; <span class=\"string\">&quot;斤&quot;</span> &lt;&lt;endl;</span><br><span class=\"line\"><span class=\"comment\">//判断哪支小猪是最重的</span></span><br><span class=\"line\">\t<span class=\"comment\">//先判断A和B的体重</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(pig1 &gt; pig2)        <span class=\"comment\">//A和B比重</span></span><br><span class=\"line\">\t&#123;\t<span class=\"comment\">//A比B重\t</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(pig1 &gt; pig3)</span><br><span class=\"line\">\t\t&#123;   <span class=\"comment\">// A比C重</span></span><br><span class=\"line\">\t\t cout &lt;&lt;<span class=\"string\">&quot;小猪1最重&quot;</span>&lt;&lt;endl;  </span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t <span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t &#123;     </span><br><span class=\"line\">\t      cout &lt;&lt;<span class=\"string\">&quot;小猪3最重&quot;</span>&lt;&lt;endl;</span><br><span class=\"line\">\t      &#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span>&#123;                   <span class=\"comment\">//B比A重</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(pig2 &gt; pig3)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t cout &lt;&lt;<span class=\"string\">&quot;小猪2最重&quot;</span>&lt;&lt;endl;\t\t</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\t cout &lt;&lt;<span class=\"string\">&quot;小猪3最重&quot;</span>&lt;&lt;endl;\t\t</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">   <span class=\"built_in\">system</span>(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\">   <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n<h4 id=\"4-1-2-三目运算符\"><a href=\"#4-1-2-三目运算符\" class=\"headerlink\" title=\"4.1.2 三目运算符\"></a>4.1.2 三目运算符</h4><p><strong>作用：</strong> 通过三目运算符实现简单的判断</p>\n<p><strong>语法：</strong><code>表达式1 ? 表达式2 ：表达式3</code></p>\n<p><strong>解释：</strong></p>\n<p>如果表达式1的值为真，执行表达式2，并返回表达式2的结果；</p>\n<p>如果表达式1的值为假，执行表达式3，并返回表达式3的结果。</p>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"type\">int</span> a = <span class=\"number\">10</span>;</span><br><span class=\"line\">\t<span class=\"type\">int</span> b = <span class=\"number\">20</span>;</span><br><span class=\"line\">\t<span class=\"type\">int</span> c = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\tc = a &gt; b ? a : b;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;c = &quot;</span> &lt;&lt; c &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//C++中三目运算符返回的是变量,可以继续赋值</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t(a &gt; b ? a : b) = <span class=\"number\">100</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;a = &quot;</span> &lt;&lt; a &lt;&lt; endl;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;b = &quot;</span> &lt;&lt; b &lt;&lt; endl;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;c = &quot;</span> &lt;&lt; c &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">system</span>(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>总结：和if语句比较，三目运算符优点是短小整洁，缺点是如果用嵌套，结构不清晰</p>\n</blockquote>\n<h4 id=\"4-1-3-switch语句\"><a href=\"#4-1-3-switch语句\" class=\"headerlink\" title=\"4.1.3 switch语句\"></a>4.1.3 switch语句</h4><p><strong>作用：</strong>执行多条件分支语句</p>\n<p><strong>语法：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">switch</span>(表达式)</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">case</span> 结果<span class=\"number\">1</span>：执行语句;<span class=\"keyword\">break</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">case</span> 结果<span class=\"number\">2</span>：执行语句;<span class=\"keyword\">break</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t...</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">default</span>:执行语句;<span class=\"keyword\">break</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n<p><strong>示例：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//请给电影评分 </span></span><br><span class=\"line\">\t<span class=\"comment\">//10 ~ 9   经典   </span></span><br><span class=\"line\">\t<span class=\"comment\">// 8 ~ 7   非常好</span></span><br><span class=\"line\">\t<span class=\"comment\">// 6 ~ 5   一般</span></span><br><span class=\"line\">\t<span class=\"comment\">// 5分以下 烂片</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"type\">int</span> score = <span class=\"number\">0</span>;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;请给电影打分&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\tcin &gt;&gt; score;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">switch</span> (score)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">case</span> <span class=\"number\">10</span>:</span><br><span class=\"line\">\t<span class=\"keyword\">case</span> <span class=\"number\">9</span>:</span><br><span class=\"line\">\t\tcout &lt;&lt; <span class=\"string\">&quot;经典&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">case</span> <span class=\"number\">8</span>:</span><br><span class=\"line\">\t\tcout &lt;&lt; <span class=\"string\">&quot;非常好&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">case</span> <span class=\"number\">7</span>:</span><br><span class=\"line\">\t<span class=\"keyword\">case</span> <span class=\"number\">6</span>:</span><br><span class=\"line\">\t\tcout &lt;&lt; <span class=\"string\">&quot;一般&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">default</span>:</span><br><span class=\"line\">\t\tcout &lt;&lt; <span class=\"string\">&quot;烂片&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">system</span>(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<blockquote>\n<p>注意1：switch语句中表达式类型只能是整型或者字符型</p>\n</blockquote>\n<blockquote>\n<p>注意2：case里如果没有break，那么程序会一直向下执行</p>\n</blockquote>\n<blockquote>\n<p>总结：与if语句比，对于多条件判断时，switch的结构清晰，执行效率高，缺点是switch不可以判断区间</p>\n</blockquote>\n<h3 id=\"4-2-循环结构\"><a href=\"#4-2-循环结构\" class=\"headerlink\" title=\"4.2 循环结构\"></a>4.2 循环结构</h3><h4 id=\"4-2-1-while循环语句\"><a href=\"#4-2-1-while循环语句\" class=\"headerlink\" title=\"4.2.1 while循环语句\"></a>4.2.1 while循环语句</h4><p><strong>作用：</strong>满足循环条件，执行循环语句</p>\n<p><strong>语法：</strong><code> while(循环条件)&#123; 循环语句 &#125;</code></p>\n<p><strong>解释：</strong>==只要循环条件的结果为真，就执行循环语句==</p>\n<p><img src=\"/assets/clip_image002-1541668640382.png\" alt=\"img\"></p>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"type\">int</span> num = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (num &lt; <span class=\"number\">10</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tcout &lt;&lt; <span class=\"string\">&quot;num = &quot;</span> &lt;&lt; num &lt;&lt; endl;</span><br><span class=\"line\">\t\tnum++;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"built_in\">system</span>(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<blockquote>\n<p>注意：在执行循环语句时候，程序必须提供跳出循环的出口，否则出现死循环</p>\n</blockquote>\n<p><strong>while循环练习案例：</strong>==猜数字==</p>\n<p><strong>案例描述：</strong>系统随机生成一个1到100之间的数字，玩家进行猜测，如果猜错，提示玩家数字过大或过小，如果猜对恭喜玩家胜利，并且退出游戏。</p>\n<p><img src=\"/assets/%E7%8C%9C%E6%95%B0%E5%AD%97.jpg\" alt=\"猜数字\"></p>\n<p>代码实现如下：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"comment\">//time系统时间头文件包含</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;ctime&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//添加随机数种子  利用当前系统时间生成随机数，防止每次随机数都一样</span></span><br><span class=\"line\">\t<span class=\"built_in\">srand</span>((<span class=\"type\">unsigned</span> <span class=\"type\">int</span>)<span class=\"built_in\">time</span>(<span class=\"literal\">NULL</span>));</span><br><span class=\"line\">\t<span class=\"comment\">//1.系统生成随机数</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> num=<span class=\"built_in\">rand</span>()%<span class=\"number\">100</span>+<span class=\"number\">1</span>;  <span class=\"comment\">// rand()%100 生成0+1~99+1的随机数</span></span><br><span class=\"line\">\tcout&lt;&lt;num&lt;&lt;endl;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//2.玩家进行猜测</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> val=<span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">\t\tcin&gt;&gt;val;</span><br><span class=\"line\">\t\t<span class=\"comment\">//3.判断玩家的猜测</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(val&gt;num)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//猜错  提示猜的结果 过大或者过小 重新返回第2步</span></span><br><span class=\"line\">\t\t\tcout&lt;&lt;<span class=\"string\">&quot;猜测过大&quot;</span>&lt;&lt;endl;</span><br><span class=\"line\">\t\t&#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(val&lt;num)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//猜错  提示猜的结果 过大或者过小 重新返回第2步</span></span><br><span class=\"line\">\t\t\tcout&lt;&lt;<span class=\"string\">&quot;猜测过小&quot;</span>&lt;&lt;endl;</span><br><span class=\"line\">\t\t&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//猜对  退出游戏</span></span><br><span class=\"line\">\t\t\tcout&lt;&lt;<span class=\"string\">&quot;恭喜您猜对啦&quot;</span>&lt;&lt;endl;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;\t</span><br><span class=\"line\">\t<span class=\"built_in\">system</span>(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\"> </span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"4-2-2-do…while循环语句\"><a href=\"#4-2-2-do…while循环语句\" class=\"headerlink\" title=\"4.2.2 do…while循环语句\"></a>4.2.2 do…while循环语句</h4><p><strong>作用：</strong> 满足循环条件，执行循环语句</p>\n<p><strong>语法：</strong> <code>do&#123; 循环语句 &#125; while(循环条件);</code></p>\n<p><strong>注意：</strong>与while的区别在于==do…while会先执行一次循环语句==，再判断循环条件</p>\n<p><img src=\"/assets/clip_image002-1541671163478.png\" alt=\"img\"></p>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"type\">int</span> num = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">do</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tcout &lt;&lt; num &lt;&lt; endl;</span><br><span class=\"line\">\t\tnum++;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125; <span class=\"keyword\">while</span> (num &lt; <span class=\"number\">10</span>);</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"built_in\">system</span>(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<blockquote>\n<p>总结：与while循环区别在于，do…while先执行一次循环语句，再判断循环条件</p>\n</blockquote>\n<p><strong>练习案例：水仙花数</strong></p>\n<p><strong>案例描述：</strong>水仙花数是指一个 3 位数，它的每个位上的数字的 3次幂之和等于它本身</p>\n<p>例如：1^3 + 5^3+ 3^3 = 153</p>\n<p>请利用do…while语句，求出所有3位数中的水仙花数</p>\n<p>代码实现：</p>\n<p>方法一</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;cmath&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"type\">int</span> argc, <span class=\"type\">const</span> <span class=\"type\">char</span> * argv[])</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> n, unit, ten, hund; <span class=\"comment\">// unit, ten, hund分别存储个位、十位和百位的数字</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(n = <span class=\"number\">100</span>; n &lt; <span class=\"number\">1000</span>; n++) &#123;</span><br><span class=\"line\">        unit = n % <span class=\"number\">10</span>; <span class=\"comment\">// 得到n的个位数字</span></span><br><span class=\"line\">        ten = (n / <span class=\"number\">10</span>) % <span class=\"number\">10</span>; <span class=\"comment\">// 得到n的十位数字</span></span><br><span class=\"line\">        hund = n / <span class=\"number\">100</span>; <span class=\"comment\">// 得到n的百位数字</span></span><br><span class=\"line\">        <span class=\"comment\">// 判断各位数字的立方和是否等于它本身</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(n == hund * hund * hund + ten * ten * ten + unit * unit * unit)</span><br><span class=\"line\">        <span class=\"comment\">// if(n == pow(hund, 3) + pow(ten, 3) + pow(unit, 3))</span></span><br><span class=\"line\">            cout &lt;&lt; n &lt;&lt; <span class=\"string\">&quot; &quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout &lt;&lt; endl;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>方法二</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"type\">int</span> argc, <span class=\"type\">const</span> <span class=\"type\">char</span> * argv[])</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> sum;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt; <span class=\"number\">10</span>; i++)</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j = <span class=\"number\">0</span>; j &lt; <span class=\"number\">10</span>; j++)</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> k = <span class=\"number\">0</span>; k &lt; <span class=\"number\">10</span>; k++) &#123;</span><br><span class=\"line\">                sum = i * <span class=\"number\">100</span> + j * <span class=\"number\">10</span> + k;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(sum == (i * i * i + j * j * j + k * k * k))</span><br><span class=\"line\">                    cout &lt;&lt; sum &lt;&lt; <span class=\"string\">&quot; &quot;</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">    cout &lt;&lt; endl;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>do…while实现</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> num = <span class=\"number\">100</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">do</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"type\">int</span> a = num % <span class=\"number\">10</span>;</span><br><span class=\"line\">\t\t<span class=\"type\">int</span> b = (num % <span class=\"number\">100</span>) / <span class=\"number\">10</span>;</span><br><span class=\"line\">\t\t<span class=\"type\">int</span> c = num / <span class=\"number\">100</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (a*a*a + b*b*b + c*c*c == num) </span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tcout &lt;&lt; <span class=\"string\">&quot;水仙数是：&quot;</span> &lt;&lt; num &lt;&lt; endl;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tnum++;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125; <span class=\"keyword\">while</span> (num &lt; <span class=\"number\">999</span>);</span><br><span class=\"line\">\t</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">system</span>(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n<h4 id=\"4-2-3-for循环语句\"><a href=\"#4-2-3-for循环语句\" class=\"headerlink\" title=\"4.2.3 for循环语句\"></a>4.2.3 for循环语句</h4><p><strong>作用：</strong> 满足循环条件，执行循环语句</p>\n<p><strong>语法：</strong><code> for(起始表达式;条件表达式;末尾循环体) &#123; 循环语句; &#125;</code></p>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tcout &lt;&lt; i &lt;&lt; endl;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"built_in\">system</span>(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n<p><strong>详解：</strong></p>\n<p><img src=\"/assets/1541673704101.png\" alt=\"1541673704101\"></p>\n<blockquote>\n<p>注意：for循环中的表达式，要用分号进行分隔</p>\n</blockquote>\n<blockquote>\n<p>总结：while , do…while, for都是开发中常用的循环语句，for循环结构比较清晰，比较常用</p>\n</blockquote>\n<p><strong>练习案例：敲桌子</strong></p>\n<p>案例描述：从1开始数到数字100， 如果数字个位含有7，或者数字十位含有7，或者该数字是7的倍数，我们打印敲桌子，其余数字直接打印输出。</p>\n<p><img src=\"/assets/timg.gif\" alt=\"timg\"></p>\n<p>代码实现</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> num;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (num = <span class=\"number\">1</span>; num&lt;= <span class=\"number\">100</span>; num++) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (num &lt; <span class=\"number\">10</span>)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (num == <span class=\"number\">7</span> || num % <span class=\"number\">7</span> == <span class=\"number\">0</span>)</span><br><span class=\"line\">\t\t\t\tcout &lt;&lt; <span class=\"string\">&quot;敲桌子&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t\t\tcout &lt;&lt; num &lt;&lt; endl;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (num &lt; <span class=\"number\">100</span>)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (num % <span class=\"number\">10</span> == <span class=\"number\">7</span> || num / <span class=\"number\">10</span> == <span class=\"number\">7</span> || num % <span class=\"number\">7</span> == <span class=\"number\">0</span>)</span><br><span class=\"line\">\t\t\t\tcout &lt;&lt; <span class=\"string\">&quot;敲桌子&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t\t\tcout &lt;&lt; num &lt;&lt; endl;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (num % <span class=\"number\">10</span> == <span class=\"number\">7</span> || (num / <span class=\"number\">10</span>) % <span class=\"number\">10</span> == <span class=\"number\">7</span> || num % <span class=\"number\">7</span> == <span class=\"number\">0</span>)</span><br><span class=\"line\">\t\t\t\tcout &lt;&lt; <span class=\"string\">&quot;敲桌子&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t\t\tcout &lt;&lt; num &lt;&lt; endl;</span><br><span class=\"line\"> </span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">system</span>(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h4 id=\"4-2-4-嵌套循环\"><a href=\"#4-2-4-嵌套循环\" class=\"headerlink\" title=\"4.2.4 嵌套循环\"></a>4.2.4 嵌套循环</h4><p><strong>作用：</strong> 在循环体中再嵌套一层循环，解决一些实际问题</p>\n<p>例如我们想在屏幕中打印如下图片，就需要利用嵌套循环</p>\n<p><img src=\"/assets/1541676003486.png\" alt=\"1541676003486\"></p>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//外层循环执行1次，内层循环执行1轮</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">0</span>; j &lt; <span class=\"number\">10</span>; j++)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tcout &lt;&lt; <span class=\"string\">&quot;*&quot;</span> &lt;&lt; <span class=\"string\">&quot; &quot;</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tcout &lt;&lt; endl;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">system</span>(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p><strong>练习案例：</strong>乘法口诀表</p>\n<p>案例描述：利用嵌套循环，实现九九乘法表</p>\n<p><img src=\"/assets/0006018857256120_b.jpg\" alt=\"0006018857256120_b\"></p>\n<p>代码实现</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//嵌套循环实现九九乘法表</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;   </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">1</span>; j &lt;= i; j++) &#123;   </span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\tcout &lt;&lt;i&lt;&lt; <span class=\"string\">&quot; * &quot;</span>&lt;&lt;j&lt;&lt;<span class=\"string\">&quot; = &quot;</span>&lt;&lt;i * j&lt;&lt;<span class=\"string\">&quot; &quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tcout &lt;&lt; endl;<span class=\"comment\">//换行</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">system</span>(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"4-3-跳转语句\"><a href=\"#4-3-跳转语句\" class=\"headerlink\" title=\"4.3 跳转语句\"></a>4.3 跳转语句</h3><h4 id=\"4-3-1-break语句\"><a href=\"#4-3-1-break语句\" class=\"headerlink\" title=\"4.3.1 break语句\"></a>4.3.1 break语句</h4><p><strong>作用:</strong> 用于跳出==选择结构==或者==循环结构==</p>\n<p>break使用的时机：</p>\n<ul>\n<li>出现在switch条件语句中，作用是终止case并跳出switch</li>\n<li>出现在循环语句中，作用是跳出当前的循环语句</li>\n<li>出现在嵌套循环中，跳出最近的内层循环语句</li>\n</ul>\n<p><strong>示例1：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//1、在switch 语句中使用break</span></span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;请选择您挑战副本的难度：&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;1、普通&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;2、中等&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;3、困难&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"type\">int</span> num = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\tcin &gt;&gt; num;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">switch</span> (num)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">case</span> <span class=\"number\">1</span>:</span><br><span class=\"line\">\t\tcout &lt;&lt; <span class=\"string\">&quot;您选择的是普通难度&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">case</span> <span class=\"number\">2</span>:</span><br><span class=\"line\">\t\tcout &lt;&lt; <span class=\"string\">&quot;您选择的是中等难度&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">case</span> <span class=\"number\">3</span>:</span><br><span class=\"line\">\t\tcout &lt;&lt; <span class=\"string\">&quot;您选择的是困难难度&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">system</span>(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p><strong>示例2：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//2、在循环语句中用break</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (i == <span class=\"number\">5</span>)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>; <span class=\"comment\">//跳出循环语句</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tcout &lt;&lt; i &lt;&lt; endl;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">system</span>(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p><strong>示例3：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//在嵌套循环语句中使用break，退出内层循环</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">0</span>; j &lt; <span class=\"number\">10</span>; j++)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (j == <span class=\"number\">5</span>)</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\tcout &lt;&lt; <span class=\"string\">&quot;*&quot;</span> &lt;&lt; <span class=\"string\">&quot; &quot;</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tcout &lt;&lt; endl;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"built_in\">system</span>(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h4 id=\"4-3-2-continue语句\"><a href=\"#4-3-2-continue语句\" class=\"headerlink\" title=\"4.3.2 continue语句\"></a>4.3.2 continue语句</h4><p><strong>作用：</strong>在==循环语句==中，跳过本次循环中余下尚未执行的语句，继续执行下一次循环</p>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">100</span>; i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (i % <span class=\"number\">2</span> == <span class=\"number\">0</span>)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">continue</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tcout &lt;&lt; i &lt;&lt; endl;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"built_in\">system</span>(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<blockquote>\n<p>注意：continue并没有使整个循环终止，而break会跳出循环</p>\n</blockquote>\n<h4 id=\"4-3-3-goto语句\"><a href=\"#4-3-3-goto语句\" class=\"headerlink\" title=\"4.3.3 goto语句\"></a>4.3.3 goto语句</h4><p><strong>作用：</strong>可以无条件跳转语句</p>\n<p><strong>语法：</strong> <code>goto 标记;</code></p>\n<p><strong>解释：</strong>如果标记的名称存在，执行到goto语句时，会跳转到标记的位置</p>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;1&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">goto</span> FLAG;</span><br><span class=\"line\"></span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;2&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;3&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;4&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">\tFLAG:</span><br><span class=\"line\"></span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;5&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"built_in\">system</span>(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<blockquote>\n<p>注意：在程序中不建议使用goto语句，以免造成程序流程混乱</p>\n</blockquote>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"clifr2v1k000914uog6848zo1","category_id":"clifr2v1h000414uo1orz2zdd","_id":"clifr2v1s001914uo3kab22lr"},{"post_id":"clifr2v1k000914uog6848zo1","category_id":"clifr2v1r000y14uo79ewg1ok","_id":"clifr2v1t001c14uod2ku3ohj"},{"post_id":"clifr2v1r001214uo8qzp5a15","category_id":"clifr2v1h000414uo1orz2zdd","_id":"clifr2v1u001g14uo2slaaux6"},{"post_id":"clifr2v1r001214uo8qzp5a15","category_id":"clifr2v1r000y14uo79ewg1ok","_id":"clifr2v1u001j14uoegc6ffml"},{"post_id":"clifr2v1m000d14uo1q7nb9t7","category_id":"clifr2v1h000414uo1orz2zdd","_id":"clifr2v1v001o14uocfbrbrev"},{"post_id":"clifr2v1m000d14uo1q7nb9t7","category_id":"clifr2v1r000y14uo79ewg1ok","_id":"clifr2v1w001r14uo78dhe4mr"},{"post_id":"clifr2v1s001714uogjzd051n","category_id":"clifr2v1h000414uo1orz2zdd","_id":"clifr2v1w001w14uoeled4pj4"},{"post_id":"clifr2v1s001714uogjzd051n","category_id":"clifr2v1r000y14uo79ewg1ok","_id":"clifr2v1x001y14uofrrv4xgi"},{"post_id":"clifr2v1j000714uo3ddx68mc","category_id":"clifr2v1h000414uo1orz2zdd","_id":"clifr2v1z002814uo6ykc5mu2"},{"post_id":"clifr2v1j000714uo3ddx68mc","category_id":"clifr2v1r000y14uo79ewg1ok","_id":"clifr2v1z002a14uo6o7q57ea"},{"post_id":"clifr2v1o000l14uo2gn456w9","category_id":"clifr2v1h000414uo1orz2zdd","_id":"clifr2v1z002c14uo3gls0y0h"},{"post_id":"clifr2v1o000l14uo2gn456w9","category_id":"clifr2v1r000y14uo79ewg1ok","_id":"clifr2v1z002e14uo2bir95o1"},{"post_id":"clifr2v1o000p14uo6d6yaaxx","category_id":"clifr2v1h000414uo1orz2zdd","_id":"clifr2v20002h14uo0pmfg8aj"},{"post_id":"clifr2v1o000p14uo6d6yaaxx","category_id":"clifr2v1o000m14uo6b16afex","_id":"clifr2v20002j14uo7ywy1kdj"},{"post_id":"clifr2v1o000p14uo6d6yaaxx","category_id":"clifr2v1z002714uofrwacrq7","_id":"clifr2v20002m14uo8yb18cfg"},{"post_id":"clifr2v1j000814uo3h075t4u","category_id":"clifr2v1h000414uo1orz2zdd","_id":"clifr2v21002p14uohkrx5e5k"},{"post_id":"clifr2v1j000814uo3h075t4u","category_id":"clifr2v1o000m14uo6b16afex","_id":"clifr2v21002s14uoglsz6350"},{"post_id":"clifr2v1j000814uo3h075t4u","category_id":"clifr2v1z002714uofrwacrq7","_id":"clifr2v22002u14uob7ls94ba"},{"post_id":"clifr2v1p000r14uo43ds8vl0","category_id":"clifr2v1h000414uo1orz2zdd","_id":"clifr2v22002x14uo7vykhnqm"},{"post_id":"clifr2v1p000r14uo43ds8vl0","category_id":"clifr2v1r000y14uo79ewg1ok","_id":"clifr2v23003014uo54j9dlvt"},{"post_id":"clifr2v1q000v14uo7huu1smh","category_id":"clifr2v1h000414uo1orz2zdd","_id":"clifr2v23003314uofykn5ymt"},{"post_id":"clifr2v1q000v14uo7huu1smh","category_id":"clifr2v1o000m14uo6b16afex","_id":"clifr2v23003614uoadarc65l"},{"post_id":"clifr2v1q000v14uo7huu1smh","category_id":"clifr2v1z002714uofrwacrq7","_id":"clifr2v23003914uo5wuq4rbc"},{"post_id":"clifr2v1e000114uo3xmlcthm","category_id":"clifr2v1h000414uo1orz2zdd","_id":"clifr2v24003b14uo3dao1h5b"},{"post_id":"clifr2v1e000114uo3xmlcthm","category_id":"clifr2v1o000m14uo6b16afex","_id":"clifr2v24003f14uoa6xf3rbb"},{"post_id":"clifr2v1e000114uo3xmlcthm","category_id":"clifr2v1z002714uofrwacrq7","_id":"clifr2v24003h14uoerkyh5ec"},{"post_id":"clifr2v1q000x14uocsjt7ww5","category_id":"clifr2v1h000414uo1orz2zdd","_id":"clifr2v25003j14uo59e52gw2"},{"post_id":"clifr2v1q000x14uocsjt7ww5","category_id":"clifr2v1r000y14uo79ewg1ok","_id":"clifr2v25003l14uo4v031cf5"},{"post_id":"clifr2v1r001014uo82eqdws5","category_id":"clifr2v1h000414uo1orz2zdd","_id":"clifr2v25003o14uodemfa1ku"},{"post_id":"clifr2v1r001014uo82eqdws5","category_id":"clifr2v1o000m14uo6b16afex","_id":"clifr2v25003p14uoerq11gmu"},{"post_id":"clifr2v1r001014uo82eqdws5","category_id":"clifr2v1z002714uofrwacrq7","_id":"clifr2v25003q14uodkgu2nz6"},{"post_id":"clifr2v1s001514uocss17jqv","category_id":"clifr2v1h000414uo1orz2zdd","_id":"clifr2v26003s14uob6in09g0"},{"post_id":"clifr2v1s001514uocss17jqv","category_id":"clifr2v1o000m14uo6b16afex","_id":"clifr2v26003t14uo8ptw332j"},{"post_id":"clifr2v1s001514uocss17jqv","category_id":"clifr2v1z002714uofrwacrq7","_id":"clifr2v26003v14uo0qlu9lgv"},{"post_id":"clifr2v1t001b14uo0sa1301p","category_id":"clifr2v1h000414uo1orz2zdd","_id":"clifr2v26003w14uogw17c4ka"},{"post_id":"clifr2v1t001b14uo0sa1301p","category_id":"clifr2v1o000m14uo6b16afex","_id":"clifr2v26003y14uo2xdvfabn"},{"post_id":"clifr2v1t001b14uo0sa1301p","category_id":"clifr2v1z002714uofrwacrq7","_id":"clifr2v27003z14uo7vyq68tn"},{"post_id":"clifr2v1g000314uo2sy96fyy","category_id":"clifr2v1h000414uo1orz2zdd","_id":"clifr2v27004114uo93l352dq"},{"post_id":"clifr2v1g000314uo2sy96fyy","category_id":"clifr2v1o000m14uo6b16afex","_id":"clifr2v27004214uocttgdwk9"},{"post_id":"clifr2v1g000314uo2sy96fyy","category_id":"clifr2v1z002714uofrwacrq7","_id":"clifr2v27004414uog5r3ez19"},{"post_id":"clifr2v1u001i14uocplv5vxv","category_id":"clifr2v1h000414uo1orz2zdd","_id":"clifr2v27004514uo5blxa2dq"},{"post_id":"clifr2v1u001i14uocplv5vxv","category_id":"clifr2v25003r14uo0v04fqsk","_id":"clifr2v28004714uoh3wt3puw"},{"post_id":"clifr2v1m000f14uo2invbtaf","category_id":"clifr2v1h000414uo1orz2zdd","_id":"clifr2v28004814uob6lp3gaq"},{"post_id":"clifr2v1m000f14uo2invbtaf","category_id":"clifr2v1o000m14uo6b16afex","_id":"clifr2v28004a14uoeiev7xx4"},{"post_id":"clifr2v1m000f14uo2invbtaf","category_id":"clifr2v1z002714uofrwacrq7","_id":"clifr2v28004b14uog0dc0o5o"},{"post_id":"clifr2v1n000j14uo5yb33xfr","category_id":"clifr2v1h000414uo1orz2zdd","_id":"clifr2v28004d14uohcba6cx4"},{"post_id":"clifr2v1n000j14uo5yb33xfr","category_id":"clifr2v1o000m14uo6b16afex","_id":"clifr2v28004e14uoa1jx5ufz"},{"post_id":"clifr2v1n000j14uo5yb33xfr","category_id":"clifr2v1z002714uofrwacrq7","_id":"clifr2v29004g14uoauma4627"},{"post_id":"clifr2v1t001e14uo4iqs8uhh","category_id":"clifr2v1h000414uo1orz2zdd","_id":"clifr2v2a004l14uo5ivkcpdi"},{"post_id":"clifr2v1t001e14uo4iqs8uhh","category_id":"clifr2v25003n14uo5yfr35i8","_id":"clifr2v2a004m14uogx6mbeuh"},{"post_id":"clifr2v1t001e14uo4iqs8uhh","category_id":"clifr2v29004i14uoars96rgc","_id":"clifr2v2a004o14uo1vzv65cs"},{"post_id":"clifr2v1v001m14uo8rhber6c","category_id":"clifr2v1h000414uo1orz2zdd","_id":"clifr2v2a004p14uo9b4d55nw"},{"post_id":"clifr2v1v001m14uo8rhber6c","category_id":"clifr2v25003n14uo5yfr35i8","_id":"clifr2v2b004r14uo15a8cojj"},{"post_id":"clifr2v1v001m14uo8rhber6c","category_id":"clifr2v29004i14uoars96rgc","_id":"clifr2v2b004s14uohj81c7vt"},{"post_id":"clifr2v1v001q14uohtyzah5z","category_id":"clifr2v1h000414uo1orz2zdd","_id":"clifr2v2b004u14uod5pdcpbe"},{"post_id":"clifr2v1v001q14uohtyzah5z","category_id":"clifr2v25003n14uo5yfr35i8","_id":"clifr2v2b004v14uo3bll4i6w"},{"post_id":"clifr2v1v001q14uohtyzah5z","category_id":"clifr2v29004i14uoars96rgc","_id":"clifr2v2c004x14uo55ie2iiw"},{"post_id":"clifr2v1w001t14uo21jg8e65","category_id":"clifr2v1h000414uo1orz2zdd","_id":"clifr2v2c004y14uocxx5cjw5"},{"post_id":"clifr2v1w001t14uo21jg8e65","category_id":"clifr2v25003n14uo5yfr35i8","_id":"clifr2v2c005014uo7gap7iaq"},{"post_id":"clifr2v1w001t14uo21jg8e65","category_id":"clifr2v29004i14uoars96rgc","_id":"clifr2v2c005114uo8o0481qe"},{"post_id":"clifr2v1x001x14uo1pfm7yaj","category_id":"clifr2v1h000414uo1orz2zdd","_id":"clifr2v2c005214uo0dukaw0a"},{"post_id":"clifr2v1x001x14uo1pfm7yaj","category_id":"clifr2v25003n14uo5yfr35i8","_id":"clifr2v2c005314uoabg11xze"},{"post_id":"clifr2v1x001x14uo1pfm7yaj","category_id":"clifr2v29004i14uoars96rgc","_id":"clifr2v2c005414uo7h8o9wyw"},{"post_id":"clifr2v1x001z14uohri54xvc","category_id":"clifr2v1h000414uo1orz2zdd","_id":"clifr2v2c005514uo9nvy6v7j"},{"post_id":"clifr2v1x001z14uohri54xvc","category_id":"clifr2v25003n14uo5yfr35i8","_id":"clifr2v2d005614uo9m76hl3a"},{"post_id":"clifr2v1x001z14uohri54xvc","category_id":"clifr2v29004i14uoars96rgc","_id":"clifr2v2d005714uodrskgbdo"},{"post_id":"clifr2v1y002214uo75d70g37","category_id":"clifr2v1h000414uo1orz2zdd","_id":"clifr2v2d005814uo5iyn9zw8"},{"post_id":"clifr2v1y002214uo75d70g37","category_id":"clifr2v25003n14uo5yfr35i8","_id":"clifr2v2d005914uo16pn4v2a"},{"post_id":"clifr2v1y002214uo75d70g37","category_id":"clifr2v29004i14uoars96rgc","_id":"clifr2v2d005a14uo4vem3is0"},{"post_id":"clifr2v1y002414uo5vcsa94k","category_id":"clifr2v1h000414uo1orz2zdd","_id":"clifr2v2d005b14uo3km689p7"},{"post_id":"clifr2v1y002414uo5vcsa94k","category_id":"clifr2v25003n14uo5yfr35i8","_id":"clifr2v2d005c14uo4r936ijd"},{"post_id":"clifr2v1y002414uo5vcsa94k","category_id":"clifr2v29004i14uoars96rgc","_id":"clifr2v2d005d14uo48ym9hlk"}],"PostTag":[{"post_id":"clifr2v1j000814uo3h075t4u","tag_id":"clifr2v1i000514uo4shx6ir8","_id":"clifr2v1l000c14uo9grb0bl5"},{"post_id":"clifr2v1e000114uo3xmlcthm","tag_id":"clifr2v1i000514uo4shx6ir8","_id":"clifr2v1m000e14uog4w72ga0"},{"post_id":"clifr2v1g000314uo2sy96fyy","tag_id":"clifr2v1i000514uo4shx6ir8","_id":"clifr2v1n000i14uo1m64a2hc"},{"post_id":"clifr2v1m000f14uo2invbtaf","tag_id":"clifr2v1i000514uo4shx6ir8","_id":"clifr2v1n000k14uo4gva5smo"},{"post_id":"clifr2v1n000j14uo5yb33xfr","tag_id":"clifr2v1i000514uo4shx6ir8","_id":"clifr2v1o000o14uo11zi1jqk"},{"post_id":"clifr2v1j000714uo3ddx68mc","tag_id":"clifr2v1n000h14uoc56e4mig","_id":"clifr2v1p000q14uo6cxl1g6l"},{"post_id":"clifr2v1o000l14uo2gn456w9","tag_id":"clifr2v1n000h14uoc56e4mig","_id":"clifr2v1q000u14uo0hjubdfk"},{"post_id":"clifr2v1o000p14uo6d6yaaxx","tag_id":"clifr2v1i000514uo4shx6ir8","_id":"clifr2v1q000w14uo0pfqd9ae"},{"post_id":"clifr2v1k000914uog6848zo1","tag_id":"clifr2v1n000h14uoc56e4mig","_id":"clifr2v1r000z14uoebnxb8zp"},{"post_id":"clifr2v1p000r14uo43ds8vl0","tag_id":"clifr2v1n000h14uoc56e4mig","_id":"clifr2v1r001114uognkp564f"},{"post_id":"clifr2v1q000v14uo7huu1smh","tag_id":"clifr2v1i000514uo4shx6ir8","_id":"clifr2v1s001414uo7gmwgrm9"},{"post_id":"clifr2v1m000d14uo1q7nb9t7","tag_id":"clifr2v1n000h14uoc56e4mig","_id":"clifr2v1s001614uo6oeq725v"},{"post_id":"clifr2v1q000x14uocsjt7ww5","tag_id":"clifr2v1n000h14uoc56e4mig","_id":"clifr2v1t001a14uodhcib9kd"},{"post_id":"clifr2v1r001014uo82eqdws5","tag_id":"clifr2v1i000514uo4shx6ir8","_id":"clifr2v1t001d14uocxxn449a"},{"post_id":"clifr2v1r001214uo8qzp5a15","tag_id":"clifr2v1n000h14uoc56e4mig","_id":"clifr2v1u001h14uohmuo4rgh"},{"post_id":"clifr2v1s001514uocss17jqv","tag_id":"clifr2v1i000514uo4shx6ir8","_id":"clifr2v1v001l14uo8fm8edy6"},{"post_id":"clifr2v1s001714uogjzd051n","tag_id":"clifr2v1n000h14uoc56e4mig","_id":"clifr2v1v001p14uodgnpc5zp"},{"post_id":"clifr2v1t001b14uo0sa1301p","tag_id":"clifr2v1i000514uo4shx6ir8","_id":"clifr2v1w001s14uo43vz5iw2"},{"post_id":"clifr2v1t001e14uo4iqs8uhh","tag_id":"clifr2v1u001k14uo5zhk57si","_id":"clifr2v1y002314uohbzz9k8h"},{"post_id":"clifr2v1t001e14uo4iqs8uhh","tag_id":"clifr2v1w001u14uo6p3n8d6n","_id":"clifr2v1y002514uof8m830jc"},{"post_id":"clifr2v1u001i14uocplv5vxv","tag_id":"clifr2v1x002014uoa93o8kx8","_id":"clifr2v1z002914uo0e9d1831"},{"post_id":"clifr2v1v001m14uo8rhber6c","tag_id":"clifr2v1u001k14uo5zhk57si","_id":"clifr2v20002i14uo6ix0h90g"},{"post_id":"clifr2v1v001m14uo8rhber6c","tag_id":"clifr2v1z002b14uof9w27lti","_id":"clifr2v20002k14uo4c5p5heq"},{"post_id":"clifr2v1v001q14uohtyzah5z","tag_id":"clifr2v1u001k14uo5zhk57si","_id":"clifr2v21002o14uof04v74xk"},{"post_id":"clifr2v1v001q14uohtyzah5z","tag_id":"clifr2v20002f14uo8my7d55i","_id":"clifr2v21002q14uogmw66879"},{"post_id":"clifr2v1w001t14uo21jg8e65","tag_id":"clifr2v1u001k14uo5zhk57si","_id":"clifr2v22002v14uohwz2dzz8"},{"post_id":"clifr2v1w001t14uo21jg8e65","tag_id":"clifr2v20002n14uoh0swbekm","_id":"clifr2v22002y14uo0ihmguwo"},{"post_id":"clifr2v1x001x14uo1pfm7yaj","tag_id":"clifr2v1u001k14uo5zhk57si","_id":"clifr2v23003114uo9gwnhhis"},{"post_id":"clifr2v1x001x14uo1pfm7yaj","tag_id":"clifr2v22002t14uocyjddora","_id":"clifr2v23003414uogqhmhwh2"},{"post_id":"clifr2v1x001z14uohri54xvc","tag_id":"clifr2v1u001k14uo5zhk57si","_id":"clifr2v23003714uo1l7xcc1n"},{"post_id":"clifr2v1x001z14uohri54xvc","tag_id":"clifr2v22002z14uo3i2u1812","_id":"clifr2v23003a14uo6f2f38i1"},{"post_id":"clifr2v1y002214uo75d70g37","tag_id":"clifr2v1u001k14uo5zhk57si","_id":"clifr2v24003d14uo0g0d5vqu"},{"post_id":"clifr2v1y002214uo75d70g37","tag_id":"clifr2v23003514uocc28a1re","_id":"clifr2v24003g14uofbvib7zr"},{"post_id":"clifr2v1y002414uo5vcsa94k","tag_id":"clifr2v1u001k14uo5zhk57si","_id":"clifr2v25003k14uoaove53e1"},{"post_id":"clifr2v1y002414uo5vcsa94k","tag_id":"clifr2v24003c14uoc7le13i2","_id":"clifr2v25003m14uoc1sf1ipf"}],"Tag":[{"name":"cmake","_id":"clifr2v1i000514uo4shx6ir8"},{"name":"git","_id":"clifr2v1n000h14uoc56e4mig"},{"name":"c++","_id":"clifr2v1u001k14uo5zhk57si"},{"name":"变量常量标识符","_id":"clifr2v1w001u14uo6p3n8d6n"},{"name":"vi","_id":"clifr2v1x002014uoa93o8kx8"},{"name":"指针","_id":"clifr2v1z002b14uof9w27lti"},{"name":"运算符","_id":"clifr2v20002f14uo8my7d55i"},{"name":"数据类型","_id":"clifr2v20002n14uoh0swbekm"},{"name":"数组","_id":"clifr2v22002t14uocyjddora"},{"name":"结构体","_id":"clifr2v22002z14uo3i2u1812"},{"name":"函数","_id":"clifr2v23003514uocc28a1re"},{"name":"流程结构","_id":"clifr2v24003c14uoc7le13i2"}]}}